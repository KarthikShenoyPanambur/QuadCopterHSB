
FlightAngleController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800200  00003c56  00003cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000459  008002d0  008002d0  00003dba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003dba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b60  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019836  00000000  00000000  0000498c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003906  00000000  00000000  0001e1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005509  00000000  00000000  00021ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027c8  00000000  00000000  00026fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004773  00000000  00000000  0002979c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bc51  00000000  00000000  0002df0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a88  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e1 c1       	rjmp	.+962    	; 0x3c4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__vector_1>
       8:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__vector_2>
       c:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__vector_3>
      10:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__vector_4>
      14:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__vector_5>
      18:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__vector_6>
      1c:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__vector_7>
      20:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__vector_8>
      24:	00 c2       	rjmp	.+1024   	; 0x426 <__bad_interrupt>
      26:	00 00       	nop
      28:	fe c1       	rjmp	.+1020   	; 0x426 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fc c1       	rjmp	.+1016   	; 0x426 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fa c1       	rjmp	.+1012   	; 0x426 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__vector_13>
      38:	f6 c1       	rjmp	.+1004   	; 0x426 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f4 c1       	rjmp	.+1000   	; 0x426 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f2 c1       	rjmp	.+996    	; 0x426 <__bad_interrupt>
      42:	00 00       	nop
      44:	f0 c1       	rjmp	.+992    	; 0x426 <__bad_interrupt>
      46:	00 00       	nop
      48:	ee c1       	rjmp	.+988    	; 0x426 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ec c1       	rjmp	.+984    	; 0x426 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ea c1       	rjmp	.+980    	; 0x426 <__bad_interrupt>
      52:	00 00       	nop
      54:	e8 c1       	rjmp	.+976    	; 0x426 <__bad_interrupt>
      56:	00 00       	nop
      58:	e6 c1       	rjmp	.+972    	; 0x426 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__vector_23>
      60:	e2 c1       	rjmp	.+964    	; 0x426 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_25>
      68:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_26>
      6c:	dc c1       	rjmp	.+952    	; 0x426 <__bad_interrupt>
      6e:	00 00       	nop
      70:	da c1       	rjmp	.+948    	; 0x426 <__bad_interrupt>
      72:	00 00       	nop
      74:	d8 c1       	rjmp	.+944    	; 0x426 <__bad_interrupt>
      76:	00 00       	nop
      78:	d6 c1       	rjmp	.+940    	; 0x426 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d4 c1       	rjmp	.+936    	; 0x426 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d2 c1       	rjmp	.+932    	; 0x426 <__bad_interrupt>
      82:	00 00       	nop
      84:	d0 c1       	rjmp	.+928    	; 0x426 <__bad_interrupt>
      86:	00 00       	nop
      88:	ce c1       	rjmp	.+924    	; 0x426 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 87 13 	jmp	0x270e	; 0x270e <__vector_35>
      90:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_36>
      94:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_37>
      98:	c6 c1       	rjmp	.+908    	; 0x426 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__vector_39>
      a0:	c2 c1       	rjmp	.+900    	; 0x426 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c0 c1       	rjmp	.+896    	; 0x426 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	be c1       	rjmp	.+892    	; 0x426 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bc c1       	rjmp	.+888    	; 0x426 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ba c1       	rjmp	.+884    	; 0x426 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b8 c1       	rjmp	.+880    	; 0x426 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b6 c1       	rjmp	.+876    	; 0x426 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b4 c1       	rjmp	.+872    	; 0x426 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b2 c1       	rjmp	.+868    	; 0x426 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b0 c1       	rjmp	.+864    	; 0x426 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ae c1       	rjmp	.+860    	; 0x426 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_51>
      d0:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_52>
      d4:	a8 c1       	rjmp	.+848    	; 0x426 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__vector_54>
      dc:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_55>
      e0:	a2 c1       	rjmp	.+836    	; 0x426 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a6 16       	cp	r10, r22
      e6:	a9 16       	cp	r10, r25
      e8:	a9 16       	cp	r10, r25
      ea:	a9 16       	cp	r10, r25
      ec:	a9 16       	cp	r10, r25
      ee:	a9 16       	cp	r10, r25
      f0:	a9 16       	cp	r10, r25
      f2:	a9 16       	cp	r10, r25
      f4:	c0 15       	cp	r28, r0
      f6:	a9 16       	cp	r10, r25
      f8:	a9 16       	cp	r10, r25
      fa:	a9 16       	cp	r10, r25
      fc:	a9 16       	cp	r10, r25
      fe:	a9 16       	cp	r10, r25
     100:	a9 16       	cp	r10, r25
     102:	a9 16       	cp	r10, r25
     104:	c0 15       	cp	r28, r0
     106:	a9 16       	cp	r10, r25
     108:	a9 16       	cp	r10, r25
     10a:	a9 16       	cp	r10, r25
     10c:	a9 16       	cp	r10, r25
     10e:	a9 16       	cp	r10, r25
     110:	a9 16       	cp	r10, r25
     112:	a9 16       	cp	r10, r25
     114:	c8 15       	cp	r28, r8
     116:	a9 16       	cp	r10, r25
     118:	a9 16       	cp	r10, r25
     11a:	a9 16       	cp	r10, r25
     11c:	a9 16       	cp	r10, r25
     11e:	a9 16       	cp	r10, r25
     120:	a9 16       	cp	r10, r25
     122:	a9 16       	cp	r10, r25
     124:	ed 15       	cp	r30, r13
     126:	a9 16       	cp	r10, r25
     128:	a9 16       	cp	r10, r25
     12a:	a9 16       	cp	r10, r25
     12c:	a9 16       	cp	r10, r25
     12e:	a9 16       	cp	r10, r25
     130:	a9 16       	cp	r10, r25
     132:	a9 16       	cp	r10, r25
     134:	c8 15       	cp	r28, r8
     136:	a9 16       	cp	r10, r25
     138:	a9 16       	cp	r10, r25
     13a:	a9 16       	cp	r10, r25
     13c:	a9 16       	cp	r10, r25
     13e:	a9 16       	cp	r10, r25
     140:	a9 16       	cp	r10, r25
     142:	a9 16       	cp	r10, r25
     144:	f2 15       	cp	r31, r2
     146:	a9 16       	cp	r10, r25
     148:	a9 16       	cp	r10, r25
     14a:	a9 16       	cp	r10, r25
     14c:	a9 16       	cp	r10, r25
     14e:	a9 16       	cp	r10, r25
     150:	a9 16       	cp	r10, r25
     152:	a9 16       	cp	r10, r25
     154:	f7 15       	cp	r31, r7
     156:	a9 16       	cp	r10, r25
     158:	a9 16       	cp	r10, r25
     15a:	a9 16       	cp	r10, r25
     15c:	a9 16       	cp	r10, r25
     15e:	a9 16       	cp	r10, r25
     160:	a9 16       	cp	r10, r25
     162:	a9 16       	cp	r10, r25
     164:	08 16       	cp	r0, r24
     166:	a9 16       	cp	r10, r25
     168:	a9 16       	cp	r10, r25
     16a:	a9 16       	cp	r10, r25
     16c:	a9 16       	cp	r10, r25
     16e:	a9 16       	cp	r10, r25
     170:	a9 16       	cp	r10, r25
     172:	a9 16       	cp	r10, r25
     174:	31 16       	cp	r3, r17
     176:	a9 16       	cp	r10, r25
     178:	a9 16       	cp	r10, r25
     17a:	a9 16       	cp	r10, r25
     17c:	a9 16       	cp	r10, r25
     17e:	a9 16       	cp	r10, r25
     180:	a9 16       	cp	r10, r25
     182:	a9 16       	cp	r10, r25
     184:	fc 15       	cp	r31, r12
     186:	a9 16       	cp	r10, r25
     188:	a9 16       	cp	r10, r25
     18a:	a9 16       	cp	r10, r25
     18c:	a9 16       	cp	r10, r25
     18e:	a9 16       	cp	r10, r25
     190:	a9 16       	cp	r10, r25
     192:	a9 16       	cp	r10, r25
     194:	16 16       	cp	r1, r22
     196:	a9 16       	cp	r10, r25
     198:	a9 16       	cp	r10, r25
     19a:	a9 16       	cp	r10, r25
     19c:	a9 16       	cp	r10, r25
     19e:	a9 16       	cp	r10, r25
     1a0:	a9 16       	cp	r10, r25
     1a2:	a9 16       	cp	r10, r25
     1a4:	33 16       	cp	r3, r19
     1a6:	a9 16       	cp	r10, r25
     1a8:	a9 16       	cp	r10, r25
     1aa:	a9 16       	cp	r10, r25
     1ac:	a9 16       	cp	r10, r25
     1ae:	a9 16       	cp	r10, r25
     1b0:	a9 16       	cp	r10, r25
     1b2:	a9 16       	cp	r10, r25
     1b4:	33 16       	cp	r3, r19
     1b6:	a9 16       	cp	r10, r25
     1b8:	a9 16       	cp	r10, r25
     1ba:	a9 16       	cp	r10, r25
     1bc:	a9 16       	cp	r10, r25
     1be:	a9 16       	cp	r10, r25
     1c0:	a9 16       	cp	r10, r25
     1c2:	a9 16       	cp	r10, r25
     1c4:	33 16       	cp	r3, r19
     1c6:	a9 16       	cp	r10, r25
     1c8:	a9 16       	cp	r10, r25
     1ca:	a9 16       	cp	r10, r25
     1cc:	a9 16       	cp	r10, r25
     1ce:	a9 16       	cp	r10, r25
     1d0:	a9 16       	cp	r10, r25
     1d2:	a9 16       	cp	r10, r25
     1d4:	33 16       	cp	r3, r19
     1d6:	a9 16       	cp	r10, r25
     1d8:	a9 16       	cp	r10, r25
     1da:	a9 16       	cp	r10, r25
     1dc:	a9 16       	cp	r10, r25
     1de:	a9 16       	cp	r10, r25
     1e0:	a9 16       	cp	r10, r25
     1e2:	a9 16       	cp	r10, r25
     1e4:	3c 16       	cp	r3, r28
     1e6:	a9 16       	cp	r10, r25
     1e8:	a9 16       	cp	r10, r25
     1ea:	a9 16       	cp	r10, r25
     1ec:	a9 16       	cp	r10, r25
     1ee:	a9 16       	cp	r10, r25
     1f0:	a9 16       	cp	r10, r25
     1f2:	a9 16       	cp	r10, r25
     1f4:	6d 16       	cp	r6, r29
     1f6:	a9 16       	cp	r10, r25
     1f8:	a9 16       	cp	r10, r25
     1fa:	a9 16       	cp	r10, r25
     1fc:	a9 16       	cp	r10, r25
     1fe:	a9 16       	cp	r10, r25
     200:	a9 16       	cp	r10, r25
     202:	a9 16       	cp	r10, r25
     204:	3c 16       	cp	r3, r28
     206:	a9 16       	cp	r10, r25
     208:	a9 16       	cp	r10, r25
     20a:	a9 16       	cp	r10, r25
     20c:	a9 16       	cp	r10, r25
     20e:	a9 16       	cp	r10, r25
     210:	a9 16       	cp	r10, r25
     212:	a9 16       	cp	r10, r25
     214:	6d 16       	cp	r6, r29
     216:	a9 16       	cp	r10, r25
     218:	a9 16       	cp	r10, r25
     21a:	a9 16       	cp	r10, r25
     21c:	a9 16       	cp	r10, r25
     21e:	a9 16       	cp	r10, r25
     220:	a9 16       	cp	r10, r25
     222:	a9 16       	cp	r10, r25
     224:	54 16       	cp	r5, r20
     226:	a9 16       	cp	r10, r25
     228:	a9 16       	cp	r10, r25
     22a:	a9 16       	cp	r10, r25
     22c:	a9 16       	cp	r10, r25
     22e:	a9 16       	cp	r10, r25
     230:	a9 16       	cp	r10, r25
     232:	a9 16       	cp	r10, r25
     234:	71 16       	cp	r7, r17
     236:	a9 16       	cp	r10, r25
     238:	a9 16       	cp	r10, r25
     23a:	a9 16       	cp	r10, r25
     23c:	a9 16       	cp	r10, r25
     23e:	a9 16       	cp	r10, r25
     240:	a9 16       	cp	r10, r25
     242:	a9 16       	cp	r10, r25
     244:	71 16       	cp	r7, r17
     246:	a9 16       	cp	r10, r25
     248:	a9 16       	cp	r10, r25
     24a:	a9 16       	cp	r10, r25
     24c:	a9 16       	cp	r10, r25
     24e:	a9 16       	cp	r10, r25
     250:	a9 16       	cp	r10, r25
     252:	a9 16       	cp	r10, r25
     254:	86 16       	cp	r8, r22
     256:	a9 16       	cp	r10, r25
     258:	a9 16       	cp	r10, r25
     25a:	a9 16       	cp	r10, r25
     25c:	a9 16       	cp	r10, r25
     25e:	a9 16       	cp	r10, r25
     260:	a9 16       	cp	r10, r25
     262:	a9 16       	cp	r10, r25
     264:	a0 16       	cp	r10, r16
     266:	a9 16       	cp	r10, r25
     268:	a9 16       	cp	r10, r25
     26a:	a9 16       	cp	r10, r25
     26c:	a9 16       	cp	r10, r25
     26e:	a9 16       	cp	r10, r25
     270:	a9 16       	cp	r10, r25
     272:	a9 16       	cp	r10, r25
     274:	a0 16       	cp	r10, r16
     276:	3a 1a       	sub	r3, r26
     278:	3e 1a       	sub	r3, r30
     27a:	28 1a       	sub	r2, r24
     27c:	2e 1a       	sub	r2, r30
     27e:	34 1a       	sub	r3, r20
     280:	83 1a       	sub	r8, r19
     282:	42 1a       	sub	r4, r18
     284:	48 1a       	sub	r4, r24
     286:	4e 1a       	sub	r4, r30
     288:	54 1a       	sub	r5, r20
     28a:	5a 1a       	sub	r5, r26
     28c:	60 1a       	sub	r6, r16
     28e:	66 1a       	sub	r6, r22
     290:	6c 1a       	sub	r6, r28
     292:	83 1a       	sub	r8, r19
     294:	72 1a       	sub	r7, r18
     296:	78 1a       	sub	r7, r24
     298:	7e 1a       	sub	r7, r30
     29a:	08 4a       	sbci	r16, 0xA8	; 168
     29c:	d7 3b       	cpi	r29, 0xB7	; 183
     29e:	3b ce       	rjmp	.-906    	; 0xffffff16 <__eeprom_end+0xff7eff16>
     2a0:	01 6e       	ori	r16, 0xE1	; 225
     2a2:	84 bc       	out	0x24, r8	; 36
     2a4:	bf fd       	.word	0xfdbf	; ????
     2a6:	c1 2f       	mov	r28, r17
     2a8:	3d 6c       	ori	r19, 0xCD	; 205
     2aa:	74 31       	cpi	r23, 0x14	; 20
     2ac:	9a bd       	out	0x2a, r25	; 42
     2ae:	56 83       	std	Z+6, r21	; 0x06
     2b0:	3d da       	rcall	.-2950   	; 0xfffff72c <__eeprom_end+0xff7ef72c>
     2b2:	3d 00       	.word	0x003d	; ????
     2b4:	c7 7f       	andi	r28, 0xF7	; 247
     2b6:	11 be       	out	0x31, r1	; 49
     2b8:	d9 e4       	ldi	r29, 0x49	; 73
     2ba:	bb 4c       	sbci	r27, 0xCB	; 203
     2bc:	3e 91       	ld	r19, -X
     2be:	6b aa       	std	Y+51, r6	; 0x33
     2c0:	aa be       	out	0x3a, r10	; 58
     2c2:	00 00       	nop
     2c4:	00 80       	ld	r0, Z
     2c6:	3f 00       	.word	0x003f	; ????

000002c8 <__trampolines_end>:
     2c8:	02 00       	.word	0x0002	; ????

000002c9 <digital_pin_to_timer_PGM>:
     2c9:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     2f5:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000030f <digital_pin_to_bit_mask_PGM>:
     30f:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     31f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     32f:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     33f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     34f:	04 08 10 20 40 80                                   ... @.

00000355 <digital_pin_to_port_PGM>:
     355:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     365:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     375:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     385:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     395:	0b 0b 0b 0b 0b 0b                                   ......

0000039b <port_to_output_PGM>:
     39b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     3ab:	02 01 00 00 05 01 08 01 0b 01 00                    ...........

000003b6 <__ctors_start>:
     3b6:	4b 06       	cpc	r4, r27
     3b8:	f7 0c       	add	r15, r7
     3ba:	92 0d       	add	r25, r2
     3bc:	2d 0e       	add	r2, r29
     3be:	c8 0e       	add	r12, r24
     3c0:	31 11       	cpse	r19, r1
     3c2:	1c 19       	sub	r17, r12

000003c4 <__ctors_end>:
     3c4:	11 24       	eor	r1, r1
     3c6:	1f be       	out	0x3f, r1	; 63
     3c8:	cf ef       	ldi	r28, 0xFF	; 255
     3ca:	d1 e2       	ldi	r29, 0x21	; 33
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0c bf       	out	0x3c, r16	; 60

000003d4 <__do_copy_data>:
     3d4:	12 e0       	ldi	r17, 0x02	; 2
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b2 e0       	ldi	r27, 0x02	; 2
     3da:	e6 e5       	ldi	r30, 0x56	; 86
     3dc:	fc e3       	ldi	r31, 0x3C	; 60
     3de:	00 e0       	ldi	r16, 0x00	; 0
     3e0:	0b bf       	out	0x3b, r16	; 59
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <__do_copy_data+0x14>
     3e4:	07 90       	elpm	r0, Z+
     3e6:	0d 92       	st	X+, r0
     3e8:	a0 3d       	cpi	r26, 0xD0	; 208
     3ea:	b1 07       	cpc	r27, r17
     3ec:	d9 f7       	brne	.-10     	; 0x3e4 <__do_copy_data+0x10>

000003ee <__do_clear_bss>:
     3ee:	27 e0       	ldi	r18, 0x07	; 7
     3f0:	a0 ed       	ldi	r26, 0xD0	; 208
     3f2:	b2 e0       	ldi	r27, 0x02	; 2
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <.do_clear_bss_start>

000003f6 <.do_clear_bss_loop>:
     3f6:	1d 92       	st	X+, r1

000003f8 <.do_clear_bss_start>:
     3f8:	a9 32       	cpi	r26, 0x29	; 41
     3fa:	b2 07       	cpc	r27, r18
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <.do_clear_bss_loop>

000003fe <__do_global_ctors>:
     3fe:	11 e0       	ldi	r17, 0x01	; 1
     400:	c2 ee       	ldi	r28, 0xE2	; 226
     402:	d1 e0       	ldi	r29, 0x01	; 1
     404:	00 e0       	ldi	r16, 0x00	; 0
     406:	06 c0       	rjmp	.+12     	; 0x414 <__do_global_ctors+0x16>
     408:	21 97       	sbiw	r28, 0x01	; 1
     40a:	01 09       	sbc	r16, r1
     40c:	80 2f       	mov	r24, r16
     40e:	fe 01       	movw	r30, r28
     410:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__tablejump2__>
     414:	cb 3d       	cpi	r28, 0xDB	; 219
     416:	d1 07       	cpc	r29, r17
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	08 07       	cpc	r16, r24
     41c:	a9 f7       	brne	.-22     	; 0x408 <__do_global_ctors+0xa>
     41e:	0e 94 3d 11 	call	0x227a	; 0x227a <main>
     422:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <_exit>

00000426 <__bad_interrupt>:
     426:	ec cd       	rjmp	.-1064   	; 0x0 <__vectors>

00000428 <_Z21mpuSensorReadCallBackv>:


void mpuSensorReadCallBack(void);
void mpuSensorReadCallBack(void)
{
	mpuSensor.SensorReadFlag=true;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 6d 03 	sts	0x036D, r24
     42e:	08 95       	ret

00000430 <_Z19movingAverageFilterfffP15movingAvgFilter>:

#define GYRO_TIME_DIFF_COUNT 1

void movingAverageFilter(float newRoll,float newPitch,float newYaw,movingAvgFilter* avgFilter);
void movingAverageFilter(float newRoll,float newPitch,float newYaw,movingAvgFilter* avgFilter)
{
     430:	4f 92       	push	r4
     432:	5f 92       	push	r5
     434:	6f 92       	push	r6
     436:	7f 92       	push	r7
     438:	8f 92       	push	r8
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	60 97       	sbiw	r28, 0x10	; 16
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	69 83       	std	Y+1, r22	; 0x01
     462:	7a 83       	std	Y+2, r23	; 0x02
     464:	8b 83       	std	Y+3, r24	; 0x03
     466:	9c 83       	std	Y+4, r25	; 0x04
     468:	29 01       	movw	r4, r18
     46a:	3a 01       	movw	r6, r20
     46c:	ed 86       	std	Y+13, r14	; 0x0d
     46e:	fe 86       	std	Y+14, r15	; 0x0e
     470:	0f 87       	std	Y+15, r16	; 0x0f
     472:	18 8b       	std	Y+16, r17	; 0x10
     474:	86 01       	movw	r16, r12
	avgFilter->Sum_roll = (((avgFilter->Sum_roll*avgFilter->oldDataCoeff)) + (avgFilter->newDataCoeff*  newRoll))/(avgFilter->oldDataCoeff+avgFilter->newDataCoeff);
     476:	f6 01       	movw	r30, r12
     478:	c4 80       	ldd	r12, Z+4	; 0x04
     47a:	d5 80       	ldd	r13, Z+5	; 0x05
     47c:	e6 80       	ldd	r14, Z+6	; 0x06
     47e:	f7 80       	ldd	r15, Z+7	; 0x07
     480:	80 80       	ld	r8, Z
     482:	91 80       	ldd	r9, Z+1	; 0x01
     484:	a2 80       	ldd	r10, Z+2	; 0x02
     486:	b3 80       	ldd	r11, Z+3	; 0x03
     488:	a5 01       	movw	r20, r10
     48a:	94 01       	movw	r18, r8
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     494:	6d 83       	std	Y+5, r22	; 0x05
     496:	7e 83       	std	Y+6, r23	; 0x06
     498:	8f 83       	std	Y+7, r24	; 0x07
     49a:	98 87       	std	Y+8, r25	; 0x08
     49c:	f8 01       	movw	r30, r16
     49e:	60 85       	ldd	r22, Z+8	; 0x08
     4a0:	71 85       	ldd	r23, Z+9	; 0x09
     4a2:	07 2e       	mov	r0, r23
     4a4:	00 0c       	add	r0, r0
     4a6:	88 0b       	sbc	r24, r24
     4a8:	99 0b       	sbc	r25, r25
     4aa:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
     4ae:	a7 01       	movw	r20, r14
     4b0:	96 01       	movw	r18, r12
     4b2:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     4b6:	69 87       	std	Y+9, r22	; 0x09
     4b8:	7a 87       	std	Y+10, r23	; 0x0a
     4ba:	8b 87       	std	Y+11, r24	; 0x0b
     4bc:	9c 87       	std	Y+12, r25	; 0x0c
     4be:	29 81       	ldd	r18, Y+1	; 0x01
     4c0:	3a 81       	ldd	r19, Y+2	; 0x02
     4c2:	4b 81       	ldd	r20, Y+3	; 0x03
     4c4:	5c 81       	ldd	r21, Y+4	; 0x04
     4c6:	c5 01       	movw	r24, r10
     4c8:	b4 01       	movw	r22, r8
     4ca:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	69 85       	ldd	r22, Y+9	; 0x09
     4d4:	7a 85       	ldd	r23, Y+10	; 0x0a
     4d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d8:	9c 85       	ldd	r25, Y+12	; 0x0c
     4da:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     4de:	2d 81       	ldd	r18, Y+5	; 0x05
     4e0:	3e 81       	ldd	r19, Y+6	; 0x06
     4e2:	4f 81       	ldd	r20, Y+7	; 0x07
     4e4:	58 85       	ldd	r21, Y+8	; 0x08
     4e6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
     4ea:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
     4ee:	69 83       	std	Y+1, r22	; 0x01
     4f0:	7a 83       	std	Y+2, r23	; 0x02
     4f2:	8b 83       	std	Y+3, r24	; 0x03
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	29 81       	ldd	r18, Y+1	; 0x01
     4f8:	3a 81       	ldd	r19, Y+2	; 0x02
     4fa:	f8 01       	movw	r30, r16
     4fc:	31 87       	std	Z+9, r19	; 0x09
     4fe:	20 87       	std	Z+8, r18	; 0x08
	avgFilter->Sum_pitch = (((avgFilter->Sum_pitch*avgFilter->oldDataCoeff)) + (avgFilter->newDataCoeff * newPitch))/(avgFilter->oldDataCoeff+avgFilter->newDataCoeff);
     500:	62 85       	ldd	r22, Z+10	; 0x0a
     502:	73 85       	ldd	r23, Z+11	; 0x0b
     504:	07 2e       	mov	r0, r23
     506:	00 0c       	add	r0, r0
     508:	88 0b       	sbc	r24, r24
     50a:	99 0b       	sbc	r25, r25
     50c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     51c:	69 87       	std	Y+9, r22	; 0x09
     51e:	7a 87       	std	Y+10, r23	; 0x0a
     520:	8b 87       	std	Y+11, r24	; 0x0b
     522:	9c 87       	std	Y+12, r25	; 0x0c
     524:	a3 01       	movw	r20, r6
     526:	92 01       	movw	r18, r4
     528:	c5 01       	movw	r24, r10
     52a:	b4 01       	movw	r22, r8
     52c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	69 85       	ldd	r22, Y+9	; 0x09
     536:	7a 85       	ldd	r23, Y+10	; 0x0a
     538:	8b 85       	ldd	r24, Y+11	; 0x0b
     53a:	9c 85       	ldd	r25, Y+12	; 0x0c
     53c:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     540:	2d 81       	ldd	r18, Y+5	; 0x05
     542:	3e 81       	ldd	r19, Y+6	; 0x06
     544:	4f 81       	ldd	r20, Y+7	; 0x07
     546:	58 85       	ldd	r21, Y+8	; 0x08
     548:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
     54c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
     550:	2b 01       	movw	r4, r22
     552:	3c 01       	movw	r6, r24
     554:	f8 01       	movw	r30, r16
     556:	73 87       	std	Z+11, r23	; 0x0b
     558:	62 87       	std	Z+10, r22	; 0x0a
	avgFilter->Sum_yaw = (((avgFilter->Sum_yaw *avgFilter->oldDataCoeff))+ (avgFilter->newDataCoeff * newYaw))/(avgFilter->oldDataCoeff+avgFilter->newDataCoeff);
     55a:	64 85       	ldd	r22, Z+12	; 0x0c
     55c:	75 85       	ldd	r23, Z+13	; 0x0d
     55e:	07 2e       	mov	r0, r23
     560:	00 0c       	add	r0, r0
     562:	88 0b       	sbc	r24, r24
     564:	99 0b       	sbc	r25, r25
     566:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     576:	6b 01       	movw	r12, r22
     578:	7c 01       	movw	r14, r24
     57a:	2d 85       	ldd	r18, Y+13	; 0x0d
     57c:	3e 85       	ldd	r19, Y+14	; 0x0e
     57e:	4f 85       	ldd	r20, Y+15	; 0x0f
     580:	58 89       	ldd	r21, Y+16	; 0x10
     582:	c5 01       	movw	r24, r10
     584:	b4 01       	movw	r22, r8
     586:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     58a:	9b 01       	movw	r18, r22
     58c:	ac 01       	movw	r20, r24
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     596:	2d 81       	ldd	r18, Y+5	; 0x05
     598:	3e 81       	ldd	r19, Y+6	; 0x06
     59a:	4f 81       	ldd	r20, Y+7	; 0x07
     59c:	58 85       	ldd	r21, Y+8	; 0x08
     59e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
     5a2:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
     5a6:	f8 01       	movw	r30, r16
     5a8:	75 87       	std	Z+13, r23	; 0x0d
     5aa:	64 87       	std	Z+12, r22	; 0x0c
	
	//Averaging the values.
	avgFilter->avgRoll = (int16_t)(avgFilter->Sum_roll);             // - sensorOffset.AcclOffset_roll;//(avgFilter->filterCoeff[1]+1);            //FILTER_LENGHT;
     5ac:	29 81       	ldd	r18, Y+1	; 0x01
     5ae:	3a 81       	ldd	r19, Y+2	; 0x02
     5b0:	37 87       	std	Z+15, r19	; 0x0f
     5b2:	26 87       	std	Z+14, r18	; 0x0e
	avgFilter->avgPitch = (int16_t)(avgFilter->Sum_pitch);          // - sensorOffset.AcclOffset_pitch;//(avgFilter->filterCoeff[1]+1);           //FILTER_LENGHT;
     5b4:	51 8a       	std	Z+17, r5	; 0x11
     5b6:	40 8a       	std	Z+16, r4	; 0x10
	avgFilter->avgYaw = (int16_t)(avgFilter->Sum_yaw);
     5b8:	73 8b       	std	Z+19, r23	; 0x13
     5ba:	62 8b       	std	Z+18, r22	; 0x12
	
}
     5bc:	60 96       	adiw	r28, 0x10	; 16
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	7f 90       	pop	r7
     5e2:	6f 90       	pop	r6
     5e4:	5f 90       	pop	r5
     5e6:	4f 90       	pop	r4
     5e8:	08 95       	ret

000005ea <_Z17printRollPitchYawfff>:

void printRollPitchYaw(float roll, float pitch,float yaw);
void printRollPitchYaw(float roll, float pitch,float yaw)
{
     5ea:	4f 92       	push	r4
     5ec:	5f 92       	push	r5
     5ee:	6f 92       	push	r6
     5f0:	7f 92       	push	r7
     5f2:	8f 92       	push	r8
     5f4:	9f 92       	push	r9
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	2b 01       	movw	r4, r22
     608:	3c 01       	movw	r6, r24
     60a:	49 01       	movw	r8, r18
     60c:	5a 01       	movw	r10, r20
     60e:	67 01       	movw	r12, r14
     610:	78 01       	movw	r14, r16
	Serial.print("|| \t rot abt x = \t ");
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	72 e0       	ldi	r23, 0x02	; 2
     616:	8a ec       	ldi	r24, 0xCA	; 202
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
	Serial.print(roll);
     61e:	22 e0       	ldi	r18, 0x02	; 2
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	b3 01       	movw	r22, r6
     624:	a2 01       	movw	r20, r4
     626:	8a ec       	ldi	r24, 0xCA	; 202
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print5printEdi>
	Serial.print("|| \t rot abt y =  \t ");
     62e:	65 e1       	ldi	r22, 0x15	; 21
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	8a ec       	ldi	r24, 0xCA	; 202
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
	Serial.print(pitch);
     63a:	22 e0       	ldi	r18, 0x02	; 2
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	b5 01       	movw	r22, r10
     640:	a4 01       	movw	r20, r8
     642:	8a ec       	ldi	r24, 0xCA	; 202
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print5printEdi>
	Serial.print("|| \t rot abt z = \t ");
     64a:	6a e2       	ldi	r22, 0x2A	; 42
     64c:	72 e0       	ldi	r23, 0x02	; 2
     64e:	8a ec       	ldi	r24, 0xCA	; 202
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
	Serial.println(yaw);
     656:	22 e0       	ldi	r18, 0x02	; 2
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	b7 01       	movw	r22, r14
     65c:	a6 01       	movw	r20, r12
     65e:	8a ec       	ldi	r24, 0xCA	; 202
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	0e 94 77 13 	call	0x26ee	; 0x26ee <_ZN5Print7printlnEdi>
}
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	7f 90       	pop	r7
     67c:	6f 90       	pop	r6
     67e:	5f 90       	pop	r5
     680:	4f 90       	pop	r4
     682:	08 95       	ret

00000684 <_Z19tiltAngleCalculatorPfS_S_>:


void tiltAngleCalculator(float *roll,float *pitch,float *yaw);
void tiltAngleCalculator(float *roll,float *pitch,float *yaw)
{
     684:	2f 92       	push	r2
     686:	3f 92       	push	r3
     688:	4f 92       	push	r4
     68a:	5f 92       	push	r5
     68c:	6f 92       	push	r6
     68e:	7f 92       	push	r7
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	a8 97       	sbiw	r28, 0x28	; 40
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	7c 01       	movw	r14, r24
     6ba:	1b 01       	movw	r2, r22
     6bc:	5c a3       	std	Y+36, r21	; 0x24
     6be:	4b a3       	std	Y+35, r20	; 0x23
	float accl[3];
	float heading;
	mpuSensor.sixDOF.getValues(accl);
     6c0:	be 01       	movw	r22, r28
     6c2:	63 5f       	subi	r22, 0xF3	; 243
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	87 ed       	ldi	r24, 0xD7	; 215
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	7d d7       	rcall	.+3834   	; 0x15c6 <_ZN10FreeSixIMU9getValuesEPf>
	mpuSensor.accelr_x=accl[0];
     6cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     6d0:	af 85       	ldd	r26, Y+15	; 0x0f
     6d2:	b8 89       	ldd	r27, Y+16	; 0x10
     6d4:	80 93 6e 03 	sts	0x036E, r24
     6d8:	90 93 6f 03 	sts	0x036F, r25
     6dc:	a0 93 70 03 	sts	0x0370, r26
     6e0:	b0 93 71 03 	sts	0x0371, r27
	mpuSensor.accelr_y=accl[1];
     6e4:	89 89       	ldd	r24, Y+17	; 0x11
     6e6:	9a 89       	ldd	r25, Y+18	; 0x12
     6e8:	ab 89       	ldd	r26, Y+19	; 0x13
     6ea:	bc 89       	ldd	r27, Y+20	; 0x14
     6ec:	80 93 72 03 	sts	0x0372, r24
     6f0:	90 93 73 03 	sts	0x0373, r25
     6f4:	a0 93 74 03 	sts	0x0374, r26
     6f8:	b0 93 75 03 	sts	0x0375, r27
	mpuSensor.accelr_z=accl[2];
     6fc:	8d 89       	ldd	r24, Y+21	; 0x15
     6fe:	9e 89       	ldd	r25, Y+22	; 0x16
     700:	af 89       	ldd	r26, Y+23	; 0x17
     702:	b8 8d       	ldd	r27, Y+24	; 0x18
     704:	80 93 76 03 	sts	0x0376, r24
     708:	90 93 77 03 	sts	0x0377, r25
     70c:	a0 93 78 03 	sts	0x0378, r26
     710:	b0 93 79 03 	sts	0x0379, r27
	
	mpuSensor.sixDOF.gyro.readGyro(&mpuSensor.gyro_x,&mpuSensor.gyro_y,&mpuSensor.gyro_z);	
     714:	22 e8       	ldi	r18, 0x82	; 130
     716:	33 e0       	ldi	r19, 0x03	; 3
     718:	4e e7       	ldi	r20, 0x7E	; 126
     71a:	53 e0       	ldi	r21, 0x03	; 3
     71c:	6a e7       	ldi	r22, 0x7A	; 122
     71e:	73 e0       	ldi	r23, 0x03	; 3
     720:	8d ee       	ldi	r24, 0xED	; 237
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	ac d5       	rcall	.+2904   	; 0x127e <_ZN7ITG32008readGyroEPfS0_S0_>
	mpuSensor.gyro_x_diff=mpuSensor.prev_gyro_x - mpuSensor.gyro_x;
     726:	20 91 7a 03 	lds	r18, 0x037A
     72a:	30 91 7b 03 	lds	r19, 0x037B
     72e:	40 91 7c 03 	lds	r20, 0x037C
     732:	50 91 7d 03 	lds	r21, 0x037D
     736:	60 91 86 03 	lds	r22, 0x0386
     73a:	70 91 87 03 	lds	r23, 0x0387
     73e:	80 91 88 03 	lds	r24, 0x0388
     742:	90 91 89 03 	lds	r25, 0x0389
     746:	0e 94 b4 1a 	call	0x3568	; 0x3568 <__subsf3>
     74a:	60 93 aa 03 	sts	0x03AA, r22
     74e:	70 93 ab 03 	sts	0x03AB, r23
     752:	80 93 ac 03 	sts	0x03AC, r24
     756:	90 93 ad 03 	sts	0x03AD, r25
	mpuSensor.gyro_y_diff=mpuSensor.prev_gyro_y - mpuSensor.gyro_y;
     75a:	20 91 7e 03 	lds	r18, 0x037E
     75e:	30 91 7f 03 	lds	r19, 0x037F
     762:	40 91 80 03 	lds	r20, 0x0380
     766:	50 91 81 03 	lds	r21, 0x0381
     76a:	60 91 8a 03 	lds	r22, 0x038A
     76e:	70 91 8b 03 	lds	r23, 0x038B
     772:	80 91 8c 03 	lds	r24, 0x038C
     776:	90 91 8d 03 	lds	r25, 0x038D
     77a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <__subsf3>
     77e:	60 93 ae 03 	sts	0x03AE, r22
     782:	70 93 af 03 	sts	0x03AF, r23
     786:	80 93 b0 03 	sts	0x03B0, r24
     78a:	90 93 b1 03 	sts	0x03B1, r25
	mpuSensor.gyro_z_diff=mpuSensor.prev_gyro_z - mpuSensor.gyro_z;
     78e:	20 91 82 03 	lds	r18, 0x0382
     792:	30 91 83 03 	lds	r19, 0x0383
     796:	40 91 84 03 	lds	r20, 0x0384
     79a:	50 91 85 03 	lds	r21, 0x0385
     79e:	60 91 8e 03 	lds	r22, 0x038E
     7a2:	70 91 8f 03 	lds	r23, 0x038F
     7a6:	80 91 90 03 	lds	r24, 0x0390
     7aa:	90 91 91 03 	lds	r25, 0x0391
     7ae:	0e 94 b4 1a 	call	0x3568	; 0x3568 <__subsf3>
     7b2:	60 93 b2 03 	sts	0x03B2, r22
     7b6:	70 93 b3 03 	sts	0x03B3, r23
     7ba:	80 93 b4 03 	sts	0x03B4, r24
     7be:	90 93 b5 03 	sts	0x03B5, r25
	
	// Retrive the raw values from the compass (not scaled).
	MagnetometerRaw raw = mpuSensor.compass.ReadRawAxis();
     7c2:	86 e6       	ldi	r24, 0x66	; 102
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN8HMC5883L11ReadRawAxisEv>
	// Retrived the scaled values from the compass (scaled to the configured scale).
	MagnetometerScaled scaled = mpuSensor.compass.ReadScaledAxis();
     7ca:	66 e6       	ldi	r22, 0x66	; 102
     7cc:	73 e0       	ldi	r23, 0x03	; 3
     7ce:	ce 01       	movw	r24, r28
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	0e 94 8f 10 	call	0x211e	; 0x211e <_ZN8HMC5883L14ReadScaledAxisEv>
	// Values are accessed like so:
	int MilliGauss_OnThe_XAxis = scaled.XAxis;// (or YAxis, or ZAxis)
	// Calculate heading when the magnetometer is level, then correct for signs of axis.
	heading = atan2(scaled.YAxis, scaled.XAxis);
     7d6:	29 81       	ldd	r18, Y+1	; 0x01
     7d8:	3a 81       	ldd	r19, Y+2	; 0x02
     7da:	4b 81       	ldd	r20, Y+3	; 0x03
     7dc:	5c 81       	ldd	r21, Y+4	; 0x04
     7de:	6d 81       	ldd	r22, Y+5	; 0x05
     7e0:	7e 81       	ldd	r23, Y+6	; 0x06
     7e2:	8f 81       	ldd	r24, Y+7	; 0x07
     7e4:	98 85       	ldd	r25, Y+8	; 0x08
     7e6:	0e 94 28 1b 	call	0x3650	; 0x3650 <atan2>
     7ea:	4b 01       	movw	r8, r22
     7ec:	5c 01       	movw	r10, r24
	//float declinationAngle = 0.0457;
	//heading += declinationAngle;	
	// Correct for when signs are reversed.
	if(heading < 0)
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	a9 01       	movw	r20, r18
     7f4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	54 f4       	brge	.+20     	; 0x810 <_Z19tiltAngleCalculatorPfS_S_+0x18c>
	heading += 2*PI;
     7fc:	2b ed       	ldi	r18, 0xDB	; 219
     7fe:	3f e0       	ldi	r19, 0x0F	; 15
     800:	49 ec       	ldi	r20, 0xC9	; 201
     802:	50 e4       	ldi	r21, 0x40	; 64
     804:	c5 01       	movw	r24, r10
     806:	b4 01       	movw	r22, r8
     808:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     80c:	4b 01       	movw	r8, r22
     80e:	5c 01       	movw	r10, r24
	// Check for wrap due to addition of declination.
	if(heading > 2*PI)
     810:	2b ed       	ldi	r18, 0xDB	; 219
     812:	3f e0       	ldi	r19, 0x0F	; 15
     814:	49 ec       	ldi	r20, 0xC9	; 201
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 ef 1c 	call	0x39de	; 0x39de <__gesf2>
     820:	18 16       	cp	r1, r24
     822:	54 f4       	brge	.+20     	; 0x838 <_Z19tiltAngleCalculatorPfS_S_+0x1b4>
	heading -= 2*PI;
     824:	2b ed       	ldi	r18, 0xDB	; 219
     826:	3f e0       	ldi	r19, 0x0F	; 15
     828:	49 ec       	ldi	r20, 0xC9	; 201
     82a:	50 e4       	ldi	r21, 0x40	; 64
     82c:	c5 01       	movw	r24, r10
     82e:	b4 01       	movw	r22, r8
     830:	0e 94 b4 1a 	call	0x3568	; 0x3568 <__subsf3>
     834:	4b 01       	movw	r8, r22
     836:	5c 01       	movw	r10, r24
	// Convert radians to degrees for readability.
	heading = heading * 180/M_PI;
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	44 e3       	ldi	r20, 0x34	; 52
     83e:	53 e4       	ldi	r21, 0x43	; 67
     840:	c5 01       	movw	r24, r10
     842:	b4 01       	movw	r22, r8
     844:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     848:	6d a3       	std	Y+37, r22	; 0x25
     84a:	7e a3       	std	Y+38, r23	; 0x26
     84c:	8f a3       	std	Y+39, r24	; 0x27
     84e:	98 a7       	std	Y+40, r25	; 0x28
	//*roll = (atan2(mpuSensor.accelr_y , mpuSensor.accelr_z) * 57.3);
	
	*roll=*roll+((-mpuSensor.gyro_x_diff/32.8f)*(0.5f));
     850:	80 91 aa 03 	lds	r24, 0x03AA
     854:	90 91 ab 03 	lds	r25, 0x03AB
     858:	a0 91 ac 03 	lds	r26, 0x03AC
     85c:	b0 91 ad 03 	lds	r27, 0x03AD
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	90 58       	subi	r25, 0x80	; 128
     866:	23 e3       	ldi	r18, 0x33	; 51
     868:	33 e3       	ldi	r19, 0x33	; 51
     86a:	43 e0       	ldi	r20, 0x03	; 3
     86c:	52 e4       	ldi	r21, 0x42	; 66
     86e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     87e:	f7 01       	movw	r30, r14
     880:	20 81       	ld	r18, Z
     882:	31 81       	ldd	r19, Z+1	; 0x01
     884:	42 81       	ldd	r20, Z+2	; 0x02
     886:	53 81       	ldd	r21, Z+3	; 0x03
     888:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     88c:	2b 01       	movw	r4, r22
     88e:	3c 01       	movw	r6, r24
     890:	f7 01       	movw	r30, r14
     892:	60 83       	st	Z, r22
     894:	71 83       	std	Z+1, r23	; 0x01
     896:	82 83       	std	Z+2, r24	; 0x02
     898:	93 83       	std	Z+3, r25	; 0x03
	*roll =0.8* (*roll) + (1.0f-0.8)*-(atan2(mpuSensor.accelr_y , mpuSensor.accelr_z) * 57.3);
     89a:	0f 2e       	mov	r0, r31
     89c:	f6 e7       	ldi	r31, 0x76	; 118
     89e:	af 2e       	mov	r10, r31
     8a0:	f3 e0       	ldi	r31, 0x03	; 3
     8a2:	bf 2e       	mov	r11, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	f5 01       	movw	r30, r10
     8a8:	20 81       	ld	r18, Z
     8aa:	31 81       	ldd	r19, Z+1	; 0x01
     8ac:	42 81       	ldd	r20, Z+2	; 0x02
     8ae:	53 81       	ldd	r21, Z+3	; 0x03
     8b0:	02 e7       	ldi	r16, 0x72	; 114
     8b2:	13 e0       	ldi	r17, 0x03	; 3
     8b4:	f8 01       	movw	r30, r16
     8b6:	60 81       	ld	r22, Z
     8b8:	71 81       	ldd	r23, Z+1	; 0x01
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	93 81       	ldd	r25, Z+3	; 0x03
     8be:	0e 94 28 1b 	call	0x3650	; 0x3650 <atan2>
     8c2:	6f 8f       	std	Y+31, r22	; 0x1f
     8c4:	78 a3       	std	Y+32, r23	; 0x20
     8c6:	89 a3       	std	Y+33, r24	; 0x21
     8c8:	9a a3       	std	Y+34, r25	; 0x22
     8ca:	2d ec       	ldi	r18, 0xCD	; 205
     8cc:	3c ec       	ldi	r19, 0xCC	; 204
     8ce:	4c e4       	ldi	r20, 0x4C	; 76
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	c3 01       	movw	r24, r6
     8d4:	b2 01       	movw	r22, r4
     8d6:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     8da:	2b 01       	movw	r4, r22
     8dc:	3c 01       	movw	r6, r24
     8de:	23 e3       	ldi	r18, 0x33	; 51
     8e0:	33 e3       	ldi	r19, 0x33	; 51
     8e2:	45 e6       	ldi	r20, 0x65	; 101
     8e4:	52 e4       	ldi	r21, 0x42	; 66
     8e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     8e8:	78 a1       	ldd	r23, Y+32	; 0x20
     8ea:	89 a1       	ldd	r24, Y+33	; 0x21
     8ec:	9a a1       	ldd	r25, Y+34	; 0x22
     8ee:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     8f2:	90 58       	subi	r25, 0x80	; 128
     8f4:	2c ec       	ldi	r18, 0xCC	; 204
     8f6:	3c ec       	ldi	r19, 0xCC	; 204
     8f8:	4c e4       	ldi	r20, 0x4C	; 76
     8fa:	5e e3       	ldi	r21, 0x3E	; 62
     8fc:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	c3 01       	movw	r24, r6
     906:	b2 01       	movw	r22, r4
     908:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     90c:	f7 01       	movw	r30, r14
     90e:	60 83       	st	Z, r22
     910:	71 83       	std	Z+1, r23	; 0x01
     912:	82 83       	std	Z+2, r24	; 0x02
     914:	93 83       	std	Z+3, r25	; 0x03
	//*pitch = -(atan2((- accl_x) , sqrt(accl_y * accl_y + accl_z * accl_z)) * 57.3);
	*pitch=*pitch+((-mpuSensor.gyro_y_diff/32.8f)*(0.5f));
     916:	80 91 ae 03 	lds	r24, 0x03AE
     91a:	90 91 af 03 	lds	r25, 0x03AF
     91e:	a0 91 b0 03 	lds	r26, 0x03B0
     922:	b0 91 b1 03 	lds	r27, 0x03B1
     926:	bc 01       	movw	r22, r24
     928:	cd 01       	movw	r24, r26
     92a:	90 58       	subi	r25, 0x80	; 128
     92c:	23 e3       	ldi	r18, 0x33	; 51
     92e:	33 e3       	ldi	r19, 0x33	; 51
     930:	43 e0       	ldi	r20, 0x03	; 3
     932:	52 e4       	ldi	r21, 0x42	; 66
     934:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     944:	f1 01       	movw	r30, r2
     946:	20 81       	ld	r18, Z
     948:	31 81       	ldd	r19, Z+1	; 0x01
     94a:	42 81       	ldd	r20, Z+2	; 0x02
     94c:	53 81       	ldd	r21, Z+3	; 0x03
     94e:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     952:	6b 01       	movw	r12, r22
     954:	7c 01       	movw	r14, r24
     956:	f1 01       	movw	r30, r2
     958:	60 83       	st	Z, r22
     95a:	71 83       	std	Z+1, r23	; 0x01
     95c:	82 83       	std	Z+2, r24	; 0x02
     95e:	93 83       	std	Z+3, r25	; 0x03
	*pitch =0.8* (*pitch) + (1.0f-0.8)*-(atan2((- mpuSensor.accelr_x) , sqrt(mpuSensor.accelr_y * mpuSensor.accelr_y + mpuSensor.accelr_z * mpuSensor.accelr_z)) * 57.3);
     960:	f8 01       	movw	r30, r16
     962:	40 80       	ld	r4, Z
     964:	51 80       	ldd	r5, Z+1	; 0x01
     966:	62 80       	ldd	r6, Z+2	; 0x02
     968:	73 80       	ldd	r7, Z+3	; 0x03
     96a:	f5 01       	movw	r30, r10
     96c:	80 80       	ld	r8, Z
     96e:	91 80       	ldd	r9, Z+1	; 0x01
     970:	a2 80       	ldd	r10, Z+2	; 0x02
     972:	b3 80       	ldd	r11, Z+3	; 0x03
     974:	a3 01       	movw	r20, r6
     976:	92 01       	movw	r18, r4
     978:	c3 01       	movw	r24, r6
     97a:	b2 01       	movw	r22, r4
     97c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     980:	6f 8f       	std	Y+31, r22	; 0x1f
     982:	78 a3       	std	Y+32, r23	; 0x20
     984:	89 a3       	std	Y+33, r24	; 0x21
     986:	9a a3       	std	Y+34, r25	; 0x22
     988:	a3 01       	movw	r20, r6
     98a:	92 01       	movw	r18, r4
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     994:	2b 01       	movw	r4, r22
     996:	3c 01       	movw	r6, r24
     998:	a5 01       	movw	r20, r10
     99a:	94 01       	movw	r18, r8
     99c:	c5 01       	movw	r24, r10
     99e:	b4 01       	movw	r22, r8
     9a0:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	c3 01       	movw	r24, r6
     9aa:	b2 01       	movw	r22, r4
     9ac:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     9b0:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <sqrt>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	80 91 6e 03 	lds	r24, 0x036E
     9bc:	90 91 6f 03 	lds	r25, 0x036F
     9c0:	a0 91 70 03 	lds	r26, 0x0370
     9c4:	b0 91 71 03 	lds	r27, 0x0371
     9c8:	bc 01       	movw	r22, r24
     9ca:	cd 01       	movw	r24, r26
     9cc:	90 58       	subi	r25, 0x80	; 128
     9ce:	0e 94 28 1b 	call	0x3650	; 0x3650 <atan2>
     9d2:	2b 01       	movw	r4, r22
     9d4:	3c 01       	movw	r6, r24
     9d6:	2d ec       	ldi	r18, 0xCD	; 205
     9d8:	3c ec       	ldi	r19, 0xCC	; 204
     9da:	4c e4       	ldi	r20, 0x4C	; 76
     9dc:	5f e3       	ldi	r21, 0x3F	; 63
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     9e6:	6b 01       	movw	r12, r22
     9e8:	7c 01       	movw	r14, r24
     9ea:	23 e3       	ldi	r18, 0x33	; 51
     9ec:	33 e3       	ldi	r19, 0x33	; 51
     9ee:	45 e6       	ldi	r20, 0x65	; 101
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	c3 01       	movw	r24, r6
     9f4:	b2 01       	movw	r22, r4
     9f6:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     9fa:	90 58       	subi	r25, 0x80	; 128
     9fc:	2c ec       	ldi	r18, 0xCC	; 204
     9fe:	3c ec       	ldi	r19, 0xCC	; 204
     a00:	4c e4       	ldi	r20, 0x4C	; 76
     a02:	5e e3       	ldi	r21, 0x3E	; 62
     a04:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
     a14:	f1 01       	movw	r30, r2
     a16:	60 83       	st	Z, r22
     a18:	71 83       	std	Z+1, r23	; 0x01
     a1a:	82 83       	std	Z+2, r24	; 0x02
     a1c:	93 83       	std	Z+3, r25	; 0x03
	heading += 2*PI;
	// Check for wrap due to addition of declination.
	if(heading > 2*PI)
	heading -= 2*PI;
	// Convert radians to degrees for readability.
	heading = heading * 180/M_PI;
     a1e:	2b ed       	ldi	r18, 0xDB	; 219
     a20:	3f e0       	ldi	r19, 0x0F	; 15
     a22:	49 e4       	ldi	r20, 0x49	; 73
     a24:	50 e4       	ldi	r21, 0x40	; 64
     a26:	6d a1       	ldd	r22, Y+37	; 0x25
     a28:	7e a1       	ldd	r23, Y+38	; 0x26
     a2a:	8f a1       	ldd	r24, Y+39	; 0x27
     a2c:	98 a5       	ldd	r25, Y+40	; 0x28
     a2e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
	*roll=*roll+((-mpuSensor.gyro_x_diff/32.8f)*(0.5f));
	*roll =0.8* (*roll) + (1.0f-0.8)*-(atan2(mpuSensor.accelr_y , mpuSensor.accelr_z) * 57.3);
	//*pitch = -(atan2((- accl_x) , sqrt(accl_y * accl_y + accl_z * accl_z)) * 57.3);
	*pitch=*pitch+((-mpuSensor.gyro_y_diff/32.8f)*(0.5f));
	*pitch =0.8* (*pitch) + (1.0f-0.8)*-(atan2((- mpuSensor.accelr_x) , sqrt(mpuSensor.accelr_y * mpuSensor.accelr_y + mpuSensor.accelr_z * mpuSensor.accelr_z)) * 57.3);
	*yaw= heading;
     a32:	eb a1       	ldd	r30, Y+35	; 0x23
     a34:	fc a1       	ldd	r31, Y+36	; 0x24
     a36:	60 83       	st	Z, r22
     a38:	71 83       	std	Z+1, r23	; 0x01
     a3a:	82 83       	std	Z+2, r24	; 0x02
     a3c:	93 83       	std	Z+3, r25	; 0x03
}
     a3e:	a8 96       	adiw	r28, 0x28	; 40
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	9f 90       	pop	r9
     a60:	8f 90       	pop	r8
     a62:	7f 90       	pop	r7
     a64:	6f 90       	pop	r6
     a66:	5f 90       	pop	r5
     a68:	4f 90       	pop	r4
     a6a:	3f 90       	pop	r3
     a6c:	2f 90       	pop	r2
     a6e:	08 95       	ret

00000a70 <_Z7mpuInitv>:



void mpuInit();
void mpuInit()
{
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <_Z7mpuInitv+0xa>
     a7a:	1f 92       	push	r1
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
	mpuSensor.SensorReadFlag=false;
     a82:	10 92 6d 03 	sts	0x036D, r1
	mpuSensor.sixDOF.init(); //init the Acc and Gyro
     a86:	87 ed       	ldi	r24, 0xD7	; 215
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	96 d5       	rcall	.+2860   	; 0x15b8 <_ZN10FreeSixIMU4initEv>
	mpuSensor.compass = HMC5883L(); // init HMC5883
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN8HMC5883LC1Ev>
     a94:	85 e0       	ldi	r24, 0x05	; 5
     a96:	fe 01       	movw	r30, r28
     a98:	31 96       	adiw	r30, 0x01	; 1
     a9a:	a6 e6       	ldi	r26, 0x66	; 102
     a9c:	b3 e0       	ldi	r27, 0x03	; 3
     a9e:	01 90       	ld	r0, Z+
     aa0:	0d 92       	st	X+, r0
     aa2:	8a 95       	dec	r24
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <_Z7mpuInitv+0x2e>
	mpuSensor.error = mpuSensor.compass.SetScale(1.3); // Set the scale of the compass.
     aa6:	46 e6       	ldi	r20, 0x66	; 102
     aa8:	56 e6       	ldi	r21, 0x66	; 102
     aaa:	66 ea       	ldi	r22, 0xA6	; 166
     aac:	7f e3       	ldi	r23, 0x3F	; 63
     aae:	86 e6       	ldi	r24, 0x66	; 102
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN8HMC5883L8SetScaleEf>
     ab6:	0b e6       	ldi	r16, 0x6B	; 107
     ab8:	13 e0       	ldi	r17, 0x03	; 3
     aba:	f8 01       	movw	r30, r16
     abc:	91 83       	std	Z+1, r25	; 0x01
     abe:	80 83       	st	Z, r24
	mpuSensor.error = mpuSensor.compass.SetMeasurementMode(Measurement_Continuous); // Set the measurement mode to Continuous
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	86 e6       	ldi	r24, 0x66	; 102
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <_ZN8HMC5883L18SetMeasurementModeEh>
     aca:	f8 01       	movw	r30, r16
     acc:	91 83       	std	Z+1, r25	; 0x01
     ace:	80 83       	st	Z, r24
	if(mpuSensor.error != 0) // If there is an error, print it out.
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	51 f0       	breq	.+20     	; 0xae8 <_Z7mpuInitv+0x78>
	Serial.println(mpuSensor.compass.GetErrorText(mpuSensor.error));
     ad4:	bc 01       	movw	r22, r24
     ad6:	86 e6       	ldi	r24, 0x66	; 102
     ad8:	93 e0       	ldi	r25, 0x03	; 3
     ada:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <_ZN8HMC5883L12GetErrorTextEi>
     ade:	bc 01       	movw	r22, r24
     ae0:	8a ec       	ldi	r24, 0xCA	; 202
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	0e 94 a7 11 	call	0x234e	; 0x234e <_ZN5Print7printlnEPKc>
	//bmp085Calibration(); // init barometric pressure sensor
	
	mpuSensor.mAvgFilter.newDataCoeff=1;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e8       	ldi	r26, 0x80	; 128
     aee:	bf e3       	ldi	r27, 0x3F	; 63
     af0:	80 93 b6 03 	sts	0x03B6, r24
     af4:	90 93 b7 03 	sts	0x03B7, r25
     af8:	a0 93 b8 03 	sts	0x03B8, r26
     afc:	b0 93 b9 03 	sts	0x03B9, r27
	mpuSensor.mAvgFilter.oldDataCoeff=1;
     b00:	80 93 ba 03 	sts	0x03BA, r24
     b04:	90 93 bb 03 	sts	0x03BB, r25
     b08:	a0 93 bc 03 	sts	0x03BC, r26
     b0c:	b0 93 bd 03 	sts	0x03BD, r27
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b24:	26 e0       	ldi	r18, 0x06	; 6
     b26:	40 e8       	ldi	r20, 0x80	; 128
     b28:	55 e2       	ldi	r21, 0x25	; 37
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	8a ec       	ldi	r24, 0xCA	; 202
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	86 d6       	rcall	.+3340   	; 0x1840 <_ZN14HardwareSerial5beginEmh>


void setup()
{
	Serial.begin(9600);	
	Wire.begin();
     b34:	8e ec       	ldi	r24, 0xCE	; 206
     b36:	96 e0       	ldi	r25, 0x06	; 6
     b38:	0e 94 df 18 	call	0x31be	; 0x31be <_ZN7TwoWire5beginEv>
	mpuInit();
     b3c:	99 df       	rcall	.-206    	; 0xa70 <_Z7mpuInitv>
	Timer3.initialize(500);
     b3e:	44 ef       	ldi	r20, 0xF4	; 244
     b40:	51 e0       	ldi	r21, 0x01	; 1
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	84 e4       	ldi	r24, 0x44	; 68
     b48:	96 e0       	ldi	r25, 0x06	; 6
     b4a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN10TimerThree10initializeEl>
	Timer3.attachInterrupt(mpuSensorReadCallBack);
     b4e:	2f ef       	ldi	r18, 0xFF	; 255
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	a9 01       	movw	r20, r18
     b54:	64 e1       	ldi	r22, 0x14	; 20
     b56:	72 e0       	ldi	r23, 0x02	; 2
     b58:	84 e4       	ldi	r24, 0x44	; 68
     b5a:	96 e0       	ldi	r25, 0x06	; 6
     b5c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN10TimerThree15attachInterruptEPFvvEl>
	
	fsm.startQuadCopter=true;
     b60:	e4 ed       	ldi	r30, 0xD4	; 212
     b62:	f2 e0       	ldi	r31, 0x02	; 2
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	82 83       	std	Z+2, r24	; 0x02
	fsm.currentState=IDLE;
     b68:	10 82       	st	Z, r1
	fsm.nextState=IDLE;
     b6a:	11 82       	std	Z+1, r1	; 0x01
	pwmMotor_1.dutyCycle=512;	
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	90 93 d1 02 	sts	0x02D1, r25
     b74:	80 93 d0 02 	sts	0x02D0, r24
     b78:	08 95       	ret

00000b7a <loop>:




void loop()
{
     b7a:	8f 92       	push	r8
     b7c:	9f 92       	push	r9
     b7e:	af 92       	push	r10
     b80:	bf 92       	push	r11
     b82:	cf 92       	push	r12
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
	Timer3.start();
     b8e:	84 e4       	ldi	r24, 0x44	; 68
     b90:	96 e0       	ldi	r25, 0x06	; 6
     b92:	0e 94 de 13 	call	0x27bc	; 0x27bc <_ZN10TimerThree5startEv>
	switch(fsm.currentState)
     b96:	80 91 d4 02 	lds	r24, 0x02D4
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	99 f0       	breq	.+38     	; 0xbc4 <loop+0x4a>
     b9e:	38 f0       	brcs	.+14     	; 0xbae <loop+0x34>
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	09 f4       	brne	.+2      	; 0xba6 <loop+0x2c>
     ba4:	59 c0       	rjmp	.+178    	; 0xc58 <loop+0xde>
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	09 f4       	brne	.+2      	; 0xbac <loop+0x32>
     baa:	5a c0       	rjmp	.+180    	; 0xc60 <loop+0xe6>
     bac:	5b c0       	rjmp	.+182    	; 0xc64 <loop+0xea>
	{
		case IDLE:
					  //Serial.println("\n+++++++++++++++++++++++++++++++\n");
					  //Serial.println("IDLE state");
					  if(fsm.startQuadCopter==true)
     bae:	80 91 d6 02 	lds	r24, 0x02D6
     bb2:	88 23       	and	r24, r24
     bb4:	21 f0       	breq	.+8      	; 0xbbe <loop+0x44>
					  {
						fsm.nextState=MEASURE;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 d5 02 	sts	0x02D5, r24
     bbc:	53 c0       	rjmp	.+166    	; 0xc64 <loop+0xea>
					  }
					  else
						fsm.nextState=IDLE;
     bbe:	10 92 d5 02 	sts	0x02D5, r1
     bc2:	50 c0       	rjmp	.+160    	; 0xc64 <loop+0xea>
						
					  break;
		case MEASURE:
					 movingAverageFilter(mpuSensor.roll,mpuSensor.pitch,mpuSensor.yaw,&mpuSensor.mAvgFilter);
     bc4:	e0 90 a6 03 	lds	r14, 0x03A6
     bc8:	f0 90 a7 03 	lds	r15, 0x03A7
     bcc:	00 91 a8 03 	lds	r16, 0x03A8
     bd0:	10 91 a9 03 	lds	r17, 0x03A9
     bd4:	20 91 a2 03 	lds	r18, 0x03A2
     bd8:	30 91 a3 03 	lds	r19, 0x03A3
     bdc:	40 91 a4 03 	lds	r20, 0x03A4
     be0:	50 91 a5 03 	lds	r21, 0x03A5
     be4:	60 91 9e 03 	lds	r22, 0x039E
     be8:	70 91 9f 03 	lds	r23, 0x039F
     bec:	80 91 a0 03 	lds	r24, 0x03A0
     bf0:	90 91 a1 03 	lds	r25, 0x03A1
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f6 eb       	ldi	r31, 0xB6	; 182
     bf8:	cf 2e       	mov	r12, r31
     bfa:	f3 e0       	ldi	r31, 0x03	; 3
     bfc:	df 2e       	mov	r13, r31
     bfe:	f0 2d       	mov	r31, r0
     c00:	17 dc       	rcall	.-2002   	; 0x430 <_Z19movingAverageFilterfffP15movingAvgFilter>
					 printRollPitchYaw(mpuSensor.mAvgFilter.avgRoll,mpuSensor.mAvgFilter.avgPitch,mpuSensor.mAvgFilter.avgYaw);	
     c02:	60 91 c8 03 	lds	r22, 0x03C8
     c06:	70 91 c9 03 	lds	r23, 0x03C9
     c0a:	07 2e       	mov	r0, r23
     c0c:	00 0c       	add	r0, r0
     c0e:	88 0b       	sbc	r24, r24
     c10:	99 0b       	sbc	r25, r25
     c12:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
     c16:	6b 01       	movw	r12, r22
     c18:	7c 01       	movw	r14, r24
     c1a:	60 91 c6 03 	lds	r22, 0x03C6
     c1e:	70 91 c7 03 	lds	r23, 0x03C7
     c22:	07 2e       	mov	r0, r23
     c24:	00 0c       	add	r0, r0
     c26:	88 0b       	sbc	r24, r24
     c28:	99 0b       	sbc	r25, r25
     c2a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
     c2e:	4b 01       	movw	r8, r22
     c30:	5c 01       	movw	r10, r24
     c32:	80 91 c4 03 	lds	r24, 0x03C4
     c36:	90 91 c5 03 	lds	r25, 0x03C5
     c3a:	bc 01       	movw	r22, r24
     c3c:	99 0f       	add	r25, r25
     c3e:	88 0b       	sbc	r24, r24
     c40:	99 0b       	sbc	r25, r25
     c42:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
     c46:	87 01       	movw	r16, r14
     c48:	76 01       	movw	r14, r12
     c4a:	a5 01       	movw	r20, r10
     c4c:	94 01       	movw	r18, r8
     c4e:	cd dc       	rcall	.-1638   	; 0x5ea <_Z17printRollPitchYawfff>
					 fsm.nextState=CONTROL;
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	80 93 d5 02 	sts	0x02D5, r24
					 break;
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <loop+0xea>
		case CONTROL:
					 //Serial.println("\n CONTROL state");
					 //PID.ControlAlgo(mpuSensor.mAvgFilter.avgRoll,mpuSensor.mAvgFilter.avgPitch,mpuSensor.mAvgFilter.avgYaw);
					 fsm.nextState=DRIVE;
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	80 93 d5 02 	sts	0x02D5, r24
					 break;
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <loop+0xea>
		case DRIVE:
				     //Serial.println("DRIVE state");
		            // pwmGenerator.setPwmDuty(PWM_PIN,pulseWidthModulation.dutyCycle);
				     fsm.nextState=IDLE;
     c60:	10 92 d5 02 	sts	0x02D5, r1
				     break;
				
	}fsm.currentState=fsm.nextState;	
     c64:	e4 ed       	ldi	r30, 0xD4	; 212
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	81 81       	ldd	r24, Z+1	; 0x01
     c6a:	80 83       	st	Z, r24
	if(mpuSensor.SensorReadFlag=true)
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 6d 03 	sts	0x036D, r24
		tiltAngleCalculator(&mpuSensor.roll,&mpuSensor.pitch,&mpuSensor.yaw);
     c72:	46 ea       	ldi	r20, 0xA6	; 166
     c74:	53 e0       	ldi	r21, 0x03	; 3
     c76:	62 ea       	ldi	r22, 0xA2	; 162
     c78:	73 e0       	ldi	r23, 0x03	; 3
     c7a:	8e e9       	ldi	r24, 0x9E	; 158
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	02 dd       	rcall	.-1532   	; 0x684 <_Z19tiltAngleCalculatorPfS_S_>
	
	//temperature = bmp085GetTemperature(bmp085ReadUT());
	//pressure = bmp085GetPressure(bmp085ReadUP());
}
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	08 95       	ret

00000c96 <_GLOBAL__sub_I__Z19movingAverageFilterfffP15movingAvgFilter>:
	int16_t avgRoll,avgPitch,avgYaw;
};


struct    // mpuSensor
{
     c96:	87 ed       	ldi	r24, 0xD7	; 215
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	d2 d3       	rcall	.+1956   	; 0x1440 <_ZN10FreeSixIMUC1Ev>
     c9c:	86 e6       	ldi	r24, 0x66	; 102
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN8HMC5883LC1Ev>
     ca4:	10 92 6c 03 	sts	0x036C, r1
     ca8:	10 92 6b 03 	sts	0x036B, r1
     cac:	08 95       	ret

00000cae <_ZN7ADXL345C1Ev>:
  if((bw_code < ADXL345_BW_3) || (bw_code > ADXL345_BW_1600)){
    status = false;
    error_code = ADXL345_BAD_ARG;
  }
  else{
    writeTo(ADXL345_BW_RATE, bw_code);
     cae:	fc 01       	movw	r30, r24
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 83       	st	Z, r24
     cb4:	11 82       	std	Z+1, r1	; 0x01
     cb6:	83 ec       	ldi	r24, 0xC3	; 195
     cb8:	9b ea       	ldi	r25, 0xAB	; 171
     cba:	a6 e7       	ldi	r26, 0x76	; 118
     cbc:	bb e3       	ldi	r27, 0x3B	; 59
     cbe:	82 83       	std	Z+2, r24	; 0x02
     cc0:	93 83       	std	Z+3, r25	; 0x03
     cc2:	a4 83       	std	Z+4, r26	; 0x04
     cc4:	b5 83       	std	Z+5, r27	; 0x05
     cc6:	88 ed       	ldi	r24, 0xD8	; 216
     cc8:	9b e6       	ldi	r25, 0x6B	; 107
     cca:	a6 e7       	ldi	r26, 0x76	; 118
     ccc:	bb e3       	ldi	r27, 0x3B	; 59
     cce:	86 83       	std	Z+6, r24	; 0x06
     cd0:	97 83       	std	Z+7, r25	; 0x07
     cd2:	a0 87       	std	Z+8, r26	; 0x08
     cd4:	b1 87       	std	Z+9, r27	; 0x09
     cd6:	82 ef       	ldi	r24, 0xF2	; 242
     cd8:	94 ee       	ldi	r25, 0xE4	; 228
     cda:	a4 e6       	ldi	r26, 0x64	; 100
     cdc:	bb e3       	ldi	r27, 0x3B	; 59
     cde:	82 87       	std	Z+10, r24	; 0x0a
     ce0:	93 87       	std	Z+11, r25	; 0x0b
     ce2:	a4 87       	std	Z+12, r26	; 0x0c
     ce4:	b5 87       	std	Z+13, r27	; 0x0d
     ce6:	08 95       	ret

00000ce8 <_ZN7ADXL3457writeToEhh>:
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	d6 2f       	mov	r29, r22
     cee:	c4 2f       	mov	r28, r20
     cf0:	fc 01       	movw	r30, r24
     cf2:	64 89       	ldd	r22, Z+20	; 0x14
     cf4:	75 89       	ldd	r23, Z+21	; 0x15
     cf6:	8e ec       	ldi	r24, 0xCE	; 206
     cf8:	96 e0       	ldi	r25, 0x06	; 6
     cfa:	0e 94 05 19 	call	0x320a	; 0x320a <_ZN7TwoWire17beginTransmissionEi>
     cfe:	6d 2f       	mov	r22, r29
     d00:	8e ec       	ldi	r24, 0xCE	; 206
     d02:	96 e0       	ldi	r25, 0x06	; 6
     d04:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN7TwoWire5writeEh>
     d08:	6c 2f       	mov	r22, r28
     d0a:	8e ec       	ldi	r24, 0xCE	; 206
     d0c:	96 e0       	ldi	r25, 0x06	; 6
     d0e:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN7TwoWire5writeEh>
     d12:	8e ec       	ldi	r24, 0xCE	; 206
     d14:	96 e0       	ldi	r25, 0x06	; 6
     d16:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <_ZN7ADXL3457powerOnEv>:
     d20:	48 e0       	ldi	r20, 0x08	; 8
     d22:	6d e2       	ldi	r22, 0x2D	; 45
     d24:	e1 cf       	rjmp	.-62     	; 0xce8 <_ZN7ADXL3457writeToEhh>
     d26:	08 95       	ret

00000d28 <_ZN7ADXL3454initEi>:
     d28:	fc 01       	movw	r30, r24
     d2a:	75 8b       	std	Z+21, r23	; 0x15
     d2c:	64 8b       	std	Z+20, r22	; 0x14
     d2e:	f8 cf       	rjmp	.-16     	; 0xd20 <_ZN7ADXL3457powerOnEv>
     d30:	08 95       	ret

00000d32 <_ZN7ADXL3458readFromEhiPh>:
  Wire.write(val);                 // send value to write
  Wire.endTransmission();         // end transmission
}

// Reads num bytes starting from address register on device in to _buff array
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	7c 01       	movw	r14, r24
     d44:	c6 2f       	mov	r28, r22
     d46:	6a 01       	movw	r12, r20
     d48:	02 2f       	mov	r16, r18
     d4a:	13 2f       	mov	r17, r19
  Wire.beginTransmission(_dev_address); // start transmission to device
     d4c:	fc 01       	movw	r30, r24
     d4e:	64 89       	ldd	r22, Z+20	; 0x14
     d50:	75 89       	ldd	r23, Z+21	; 0x15
     d52:	8e ec       	ldi	r24, 0xCE	; 206
     d54:	96 e0       	ldi	r25, 0x06	; 6
     d56:	0e 94 05 19 	call	0x320a	; 0x320a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);             // sends address to read from
     d5a:	6c 2f       	mov	r22, r28
     d5c:	8e ec       	ldi	r24, 0xCE	; 206
     d5e:	96 e0       	ldi	r25, 0x06	; 6
     d60:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN7TwoWire5writeEh>
  Wire.endTransmission();         // end transmission
     d64:	8e ec       	ldi	r24, 0xCE	; 206
     d66:	96 e0       	ldi	r25, 0x06	; 6
     d68:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>

  Wire.beginTransmission(_dev_address); // start transmission to device
     d6c:	f7 01       	movw	r30, r14
     d6e:	64 89       	ldd	r22, Z+20	; 0x14
     d70:	75 89       	ldd	r23, Z+21	; 0x15
     d72:	8e ec       	ldi	r24, 0xCE	; 206
     d74:	96 e0       	ldi	r25, 0x06	; 6
     d76:	0e 94 05 19 	call	0x320a	; 0x320a <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(_dev_address, num);    // request 6 bytes from device
     d7a:	f7 01       	movw	r30, r14
     d7c:	64 89       	ldd	r22, Z+20	; 0x14
     d7e:	75 89       	ldd	r23, Z+21	; 0x15
     d80:	a6 01       	movw	r20, r12
     d82:	8e ec       	ldi	r24, 0xCE	; 206
     d84:	96 e0       	ldi	r25, 0x06	; 6
     d86:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN7TwoWire11requestFromEii>
     d8a:	c0 2f       	mov	r28, r16
     d8c:	d1 2f       	mov	r29, r17

  int i = 0;
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	10 e0       	ldi	r17, 0x00	; 0
  while(Wire.available())         // device may send less than requested (abnormal)
     d92:	07 c0       	rjmp	.+14     	; 0xda2 <_ZN7ADXL3458readFromEhiPh+0x70>
  {
    _buff[i] = Wire.read();    // receive a byte
     d94:	8e ec       	ldi	r24, 0xCE	; 206
     d96:	96 e0       	ldi	r25, 0x06	; 6
     d98:	0e 94 4c 18 	call	0x3098	; 0x3098 <_ZN7TwoWire4readEv>
     d9c:	89 93       	st	Y+, r24
    i++;
     d9e:	0f 5f       	subi	r16, 0xFF	; 255
     da0:	1f 4f       	sbci	r17, 0xFF	; 255

  Wire.beginTransmission(_dev_address); // start transmission to device
  Wire.requestFrom(_dev_address, num);    // request 6 bytes from device

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
     da2:	8e ec       	ldi	r24, 0xCE	; 206
     da4:	96 e0       	ldi	r25, 0x06	; 6
     da6:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN7TwoWire9availableEv>
     daa:	89 2b       	or	r24, r25
     dac:	99 f7       	brne	.-26     	; 0xd94 <_ZN7ADXL3458readFromEhiPh+0x62>
  {
    _buff[i] = Wire.read();    // receive a byte
    i++;
  }
  if(i != num){
     dae:	0c 15       	cp	r16, r12
     db0:	1d 05       	cpc	r17, r13
     db2:	21 f0       	breq	.+8      	; 0xdbc <_ZN7ADXL3458readFromEhiPh+0x8a>
    status = ADXL345_ERROR;
     db4:	f7 01       	movw	r30, r14
     db6:	10 82       	st	Z, r1
    error_code = ADXL345_READ_ERROR;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	81 83       	std	Z+1, r24	; 0x01
  }
  Wire.endTransmission();         // end transmission
     dbc:	8e ec       	ldi	r24, 0xCE	; 206
     dbe:	96 e0       	ldi	r25, 0x06	; 6
     dc0:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	08 95       	ret

00000dd6 <_ZN7ADXL3459readAccelEPiS0_S0_>:
void ADXL345::readAccel(int *xyz){
  readAccel(xyz, xyz + 1, xyz + 2);
}

// Reads the acceleration into three variable x, y and z
void ADXL345::readAccel(int *x, int *y, int *z) {
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ec 01       	movw	r28, r24
     de8:	6b 01       	movw	r12, r22
     dea:	7a 01       	movw	r14, r20
     dec:	89 01       	movw	r16, r18
  readFrom(ADXL345_DATAX0, TO_READ, _buff); //read the acceleration data from the ADXL345
     dee:	9c 01       	movw	r18, r24
     df0:	22 5f       	subi	r18, 0xF2	; 242
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	46 e0       	ldi	r20, 0x06	; 6
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	62 e3       	ldi	r22, 0x32	; 50
     dfa:	9b df       	rcall	.-202    	; 0xd32 <_ZN7ADXL3458readFromEhiPh>

  // each axis reading comes in 10 bit resolution, ie 2 bytes.  Least Significat Byte first!!
  // thus we are converting both bytes in to one int
  *x = (((int)_buff[1]) << 8) | _buff[0];  
     dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	98 2f       	mov	r25, r24
     e02:	88 27       	eor	r24, r24
     e04:	2e 85       	ldd	r18, Y+14	; 0x0e
     e06:	82 2b       	or	r24, r18
     e08:	f6 01       	movw	r30, r12
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
  *y = (((int)_buff[3]) << 8) | _buff[2];
     e0e:	89 89       	ldd	r24, Y+17	; 0x11
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	98 2f       	mov	r25, r24
     e14:	88 27       	eor	r24, r24
     e16:	28 89       	ldd	r18, Y+16	; 0x10
     e18:	82 2b       	or	r24, r18
     e1a:	f7 01       	movw	r30, r14
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
  *z = (((int)_buff[5]) << 8) | _buff[4];
     e20:	8b 89       	ldd	r24, Y+19	; 0x13
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	98 2f       	mov	r25, r24
     e26:	88 27       	eor	r24, r24
     e28:	2a 89       	ldd	r18, Y+18	; 0x12
     e2a:	82 2b       	or	r24, r18
     e2c:	f8 01       	movw	r30, r16
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	08 95       	ret

00000e44 <_ZN7ITG3200C1Ev>:
}

byte ITG3200::getClockSource() {  
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_CLK_SEL);
}
     e44:	fc 01       	movw	r30, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e8       	ldi	r26, 0x80	; 128
     e4c:	bf e3       	ldi	r27, 0x3F	; 63
     e4e:	80 83       	st	Z, r24
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	a2 83       	std	Z+2, r26	; 0x02
     e54:	b3 83       	std	Z+3, r27	; 0x03
     e56:	84 83       	std	Z+4, r24	; 0x04
     e58:	95 83       	std	Z+5, r25	; 0x05
     e5a:	a6 83       	std	Z+6, r26	; 0x06
     e5c:	b7 83       	std	Z+7, r27	; 0x07
     e5e:	80 87       	std	Z+8, r24	; 0x08
     e60:	91 87       	std	Z+9, r25	; 0x09
     e62:	a2 87       	std	Z+10, r26	; 0x0a
     e64:	b3 87       	std	Z+11, r27	; 0x0b
     e66:	15 86       	std	Z+13, r1	; 0x0d
     e68:	14 86       	std	Z+12, r1	; 0x0c
     e6a:	17 86       	std	Z+15, r1	; 0x0f
     e6c:	16 86       	std	Z+14, r1	; 0x0e
     e6e:	11 8a       	std	Z+17, r1	; 0x11
     e70:	10 8a       	std	Z+16, r1	; 0x10
     e72:	82 8b       	std	Z+18, r24	; 0x12
     e74:	93 8b       	std	Z+19, r25	; 0x13
     e76:	a4 8b       	std	Z+20, r26	; 0x14
     e78:	b5 8b       	std	Z+21, r27	; 0x15
     e7a:	86 8b       	std	Z+22, r24	; 0x16
     e7c:	97 8b       	std	Z+23, r25	; 0x17
     e7e:	a0 8f       	std	Z+24, r26	; 0x18
     e80:	b1 8f       	std	Z+25, r27	; 0x19
     e82:	82 8f       	std	Z+26, r24	; 0x1a
     e84:	93 8f       	std	Z+27, r25	; 0x1b
     e86:	a4 8f       	std	Z+28, r26	; 0x1c
     e88:	b5 8f       	std	Z+29, r27	; 0x1d
     e8a:	08 95       	ret

00000e8c <_ZN7ITG32008writememEhh>:
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	d6 2f       	mov	r29, r22
     e92:	c4 2f       	mov	r28, r20
     e94:	fc 01       	movw	r30, r24
     e96:	66 8d       	ldd	r22, Z+30	; 0x1e
     e98:	8e ec       	ldi	r24, 0xCE	; 206
     e9a:	96 e0       	ldi	r25, 0x06	; 6
     e9c:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN7TwoWire17beginTransmissionEh>
     ea0:	6d 2f       	mov	r22, r29
     ea2:	8e ec       	ldi	r24, 0xCE	; 206
     ea4:	96 e0       	ldi	r25, 0x06	; 6
     ea6:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN7TwoWire5writeEh>
     eaa:	6c 2f       	mov	r22, r28
     eac:	8e ec       	ldi	r24, 0xCE	; 206
     eae:	96 e0       	ldi	r25, 0x06	; 6
     eb0:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN7TwoWire5writeEh>
     eb4:	8e ec       	ldi	r24, 0xCE	; 206
     eb6:	96 e0       	ldi	r25, 0x06	; 6
     eb8:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <_ZN7ITG320016setSampleRateDivEh>:
     ec2:	46 2f       	mov	r20, r22
     ec4:	65 e1       	ldi	r22, 0x15	; 21
     ec6:	e2 cf       	rjmp	.-60     	; 0xe8c <_ZN7ITG32008writememEhh>
     ec8:	08 95       	ret

00000eca <_ZN7ITG32007readmemEhhPh>:
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	06 2f       	mov	r16, r22
     eda:	14 2f       	mov	r17, r20
     edc:	79 01       	movw	r14, r18
     ede:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ee0:	8e ec       	ldi	r24, 0xCE	; 206
     ee2:	96 e0       	ldi	r25, 0x06	; 6
     ee4:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN7TwoWire17beginTransmissionEh>
     ee8:	60 2f       	mov	r22, r16
     eea:	8e ec       	ldi	r24, 0xCE	; 206
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN7TwoWire5writeEh>
     ef2:	8e ec       	ldi	r24, 0xCE	; 206
     ef4:	96 e0       	ldi	r25, 0x06	; 6
     ef6:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
     efa:	6e 8d       	ldd	r22, Y+30	; 0x1e
     efc:	8e ec       	ldi	r24, 0xCE	; 206
     efe:	96 e0       	ldi	r25, 0x06	; 6
     f00:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN7TwoWire17beginTransmissionEh>
     f04:	41 2f       	mov	r20, r17
     f06:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f08:	8e ec       	ldi	r24, 0xCE	; 206
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN7TwoWire11requestFromEhh>
     f10:	c0 e0       	ldi	r28, 0x00	; 0
     f12:	0a c0       	rjmp	.+20     	; 0xf28 <_ZN7ITG32007readmemEhhPh+0x5e>
     f14:	87 01       	movw	r16, r14
     f16:	0c 0f       	add	r16, r28
     f18:	11 1d       	adc	r17, r1
     f1a:	8e ec       	ldi	r24, 0xCE	; 206
     f1c:	96 e0       	ldi	r25, 0x06	; 6
     f1e:	0e 94 4c 18 	call	0x3098	; 0x3098 <_ZN7TwoWire4readEv>
     f22:	f8 01       	movw	r30, r16
     f24:	80 83       	st	Z, r24
     f26:	cf 5f       	subi	r28, 0xFF	; 255
     f28:	8e ec       	ldi	r24, 0xCE	; 206
     f2a:	96 e0       	ldi	r25, 0x06	; 6
     f2c:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN7TwoWire9availableEv>
     f30:	89 2b       	or	r24, r25
     f32:	81 f7       	brne	.-32     	; 0xf14 <_ZN7ITG32007readmemEhhPh+0x4a>
     f34:	8e ec       	ldi	r24, 0xCE	; 206
     f36:	96 e0       	ldi	r25, 0x06	; 6
     f38:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	08 95       	ret

00000f4a <_ZN7ITG320010setFSRangeEh>:
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
     f52:	16 2f       	mov	r17, r22
     f54:	9c 01       	movw	r18, r24
     f56:	21 5e       	subi	r18, 0xE1	; 225
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	66 e1       	ldi	r22, 0x16	; 22
     f5e:	b5 df       	rcall	.-150    	; 0xeca <_ZN7ITG32007readmemEhhPh>
     f60:	41 2f       	mov	r20, r17
     f62:	44 0f       	add	r20, r20
     f64:	44 0f       	add	r20, r20
     f66:	44 0f       	add	r20, r20
     f68:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f6a:	97 7e       	andi	r25, 0xE7	; 231
     f6c:	49 2b       	or	r20, r25
     f6e:	66 e1       	ldi	r22, 0x16	; 22
     f70:	ce 01       	movw	r24, r28
     f72:	8c df       	rcall	.-232    	; 0xe8c <_ZN7ITG32008writememEhh>
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	08 95       	ret

00000f7c <_ZN7ITG320011setFilterBWEh>:
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	16 2f       	mov	r17, r22
     f86:	9c 01       	movw	r18, r24
     f88:	21 5e       	subi	r18, 0xE1	; 225
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	66 e1       	ldi	r22, 0x16	; 22
     f90:	9c df       	rcall	.-200    	; 0xeca <_ZN7ITG32007readmemEhhPh>
     f92:	4f 8d       	ldd	r20, Y+31	; 0x1f
     f94:	48 7f       	andi	r20, 0xF8	; 248
     f96:	41 2b       	or	r20, r17
     f98:	66 e1       	ldi	r22, 0x16	; 22
     f9a:	ce 01       	movw	r24, r28
     f9c:	77 df       	rcall	.-274    	; 0xe8c <_ZN7ITG32008writememEhh>
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	08 95       	ret

00000fa6 <_ZN7ITG320011setITGReadyEb>:
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
     fae:	16 2f       	mov	r17, r22
     fb0:	9c 01       	movw	r18, r24
     fb2:	21 5e       	subi	r18, 0xE1	; 225
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	67 e1       	ldi	r22, 0x17	; 23
     fba:	87 df       	rcall	.-242    	; 0xeca <_ZN7ITG32007readmemEhhPh>
     fbc:	41 2f       	mov	r20, r17
     fbe:	44 0f       	add	r20, r20
     fc0:	44 0f       	add	r20, r20
     fc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fc4:	9b 7f       	andi	r25, 0xFB	; 251
     fc6:	49 2b       	or	r20, r25
     fc8:	67 e1       	ldi	r22, 0x17	; 23
     fca:	ce 01       	movw	r24, r28
     fcc:	5f df       	rcall	.-322    	; 0xe8c <_ZN7ITG32008writememEhh>
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	08 95       	ret

00000fd6 <_ZN7ITG320015setRawDataReadyEb>:
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	16 2f       	mov	r17, r22
     fe0:	9c 01       	movw	r18, r24
     fe2:	21 5e       	subi	r18, 0xE1	; 225
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	67 e1       	ldi	r22, 0x17	; 23
     fea:	6f df       	rcall	.-290    	; 0xeca <_ZN7ITG32007readmemEhhPh>
     fec:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fee:	4e 7f       	andi	r20, 0xFE	; 254
     ff0:	41 2b       	or	r20, r17
     ff2:	67 e1       	ldi	r22, 0x17	; 23
     ff4:	ce 01       	movw	r24, r28
     ff6:	4a df       	rcall	.-364    	; 0xe8c <_ZN7ITG32008writememEhh>
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	08 95       	ret

00001000 <_ZN7ITG320011readGyroRawEPiS0_S0_>:
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	ec 01       	movw	r28, r24
    1012:	6b 01       	movw	r12, r22
    1014:	7a 01       	movw	r14, r20
    1016:	89 01       	movw	r16, r18
    1018:	9c 01       	movw	r18, r24
    101a:	21 5e       	subi	r18, 0xE1	; 225
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	46 e0       	ldi	r20, 0x06	; 6
    1020:	6d e1       	ldi	r22, 0x1D	; 29
    1022:	53 df       	rcall	.-346    	; 0xeca <_ZN7ITG32007readmemEhhPh>
    1024:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	98 2f       	mov	r25, r24
    102a:	88 27       	eor	r24, r24
    102c:	28 a1       	ldd	r18, Y+32	; 0x20
    102e:	82 2b       	or	r24, r18
    1030:	f6 01       	movw	r30, r12
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
    1036:	89 a1       	ldd	r24, Y+33	; 0x21
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	98 2f       	mov	r25, r24
    103c:	88 27       	eor	r24, r24
    103e:	2a a1       	ldd	r18, Y+34	; 0x22
    1040:	82 2b       	or	r24, r18
    1042:	f7 01       	movw	r30, r14
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	8b a1       	ldd	r24, Y+35	; 0x23
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	98 2f       	mov	r25, r24
    104e:	88 27       	eor	r24, r24
    1050:	2c a1       	ldd	r18, Y+36	; 0x24
    1052:	82 2b       	or	r24, r18
    1054:	f8 01       	movw	r30, r16
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	08 95       	ret

0000106c <_ZN7ITG320011readGyroRawEPi>:
    106c:	9b 01       	movw	r18, r22
    106e:	2c 5f       	subi	r18, 0xFC	; 252
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	ab 01       	movw	r20, r22
    1074:	4e 5f       	subi	r20, 0xFE	; 254
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	c3 cf       	rjmp	.-122    	; 0x1000 <_ZN7ITG320011readGyroRawEPiS0_S0_>
    107a:	08 95       	ret

0000107c <_ZN7ITG320013zeroCalibrateEjj>:
    107c:	2f 92       	push	r2
    107e:	3f 92       	push	r3
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	2e 97       	sbiw	r28, 0x0e	; 14
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	9c 87       	std	Y+12, r25	; 0x0c
    10b2:	8b 87       	std	Y+11, r24	; 0x0b
    10b4:	7e 87       	std	Y+14, r23	; 0x0e
    10b6:	6d 87       	std	Y+13, r22	; 0x0d
    10b8:	61 15       	cp	r22, r1
    10ba:	71 05       	cpc	r23, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <_ZN7ITG320013zeroCalibrateEjj+0x44>
    10be:	54 c0       	rjmp	.+168    	; 0x1168 <_ZN7ITG320013zeroCalibrateEjj+0xec>
    10c0:	1b 01       	movw	r2, r22
    10c2:	41 2c       	mov	r4, r1
    10c4:	51 2c       	mov	r5, r1
    10c6:	32 01       	movw	r6, r4
    10c8:	53 01       	movw	r10, r6
    10ca:	42 01       	movw	r8, r4
    10cc:	73 01       	movw	r14, r6
    10ce:	62 01       	movw	r12, r4
    10d0:	00 e0       	ldi	r16, 0x00	; 0
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	ca 01       	movw	r24, r20
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	8f 83       	std	Y+7, r24	; 0x07
    10dc:	98 87       	std	Y+8, r25	; 0x08
    10de:	a9 87       	std	Y+9, r26	; 0x09
    10e0:	ba 87       	std	Y+10, r27	; 0x0a
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	0e 94 90 19 	call	0x3320	; 0x3320 <delay>
    10ee:	be 01       	movw	r22, r28
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f8:	b9 df       	rcall	.-142    	; 0x106c <_ZN7ITG320011readGyroRawEPi>
    10fa:	69 81       	ldd	r22, Y+1	; 0x01
    10fc:	7a 81       	ldd	r23, Y+2	; 0x02
    10fe:	07 2e       	mov	r0, r23
    1100:	00 0c       	add	r0, r0
    1102:	88 0b       	sbc	r24, r24
    1104:	99 0b       	sbc	r25, r25
    1106:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	c3 01       	movw	r24, r6
    1110:	b2 01       	movw	r22, r4
    1112:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
    1116:	2b 01       	movw	r4, r22
    1118:	3c 01       	movw	r6, r24
    111a:	6b 81       	ldd	r22, Y+3	; 0x03
    111c:	7c 81       	ldd	r23, Y+4	; 0x04
    111e:	07 2e       	mov	r0, r23
    1120:	00 0c       	add	r0, r0
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	c5 01       	movw	r24, r10
    1130:	b4 01       	movw	r22, r8
    1132:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
    1136:	4b 01       	movw	r8, r22
    1138:	5c 01       	movw	r10, r24
    113a:	6d 81       	ldd	r22, Y+5	; 0x05
    113c:	7e 81       	ldd	r23, Y+6	; 0x06
    113e:	07 2e       	mov	r0, r23
    1140:	00 0c       	add	r0, r0
    1142:	88 0b       	sbc	r24, r24
    1144:	99 0b       	sbc	r25, r25
    1146:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 b5 1a 	call	0x356a	; 0x356a <__addsf3>
    1156:	6b 01       	movw	r12, r22
    1158:	7c 01       	movw	r14, r24
    115a:	0f 5f       	subi	r16, 0xFF	; 255
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	02 15       	cp	r16, r2
    1160:	13 05       	cpc	r17, r3
    1162:	09 f0       	breq	.+2      	; 0x1166 <_ZN7ITG320013zeroCalibrateEjj+0xea>
    1164:	be cf       	rjmp	.-132    	; 0x10e2 <_ZN7ITG320013zeroCalibrateEjj+0x66>
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <_ZN7ITG320013zeroCalibrateEjj+0xfa>
    1168:	41 2c       	mov	r4, r1
    116a:	51 2c       	mov	r5, r1
    116c:	32 01       	movw	r6, r4
    116e:	53 01       	movw	r10, r6
    1170:	42 01       	movw	r8, r4
    1172:	73 01       	movw	r14, r6
    1174:	62 01       	movw	r12, r4
    1176:	ad 85       	ldd	r26, Y+13	; 0x0d
    1178:	be 85       	ldd	r27, Y+14	; 0x0e
    117a:	bd 01       	movw	r22, r26
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 18 1c 	call	0x3830	; 0x3830 <__floatunsisf>
    1184:	6f 83       	std	Y+7, r22	; 0x07
    1186:	78 87       	std	Y+8, r23	; 0x08
    1188:	89 87       	std	Y+9, r24	; 0x09
    118a:	9a 87       	std	Y+10, r25	; 0x0a
    118c:	c3 01       	movw	r24, r6
    118e:	b2 01       	movw	r22, r4
    1190:	90 58       	subi	r25, 0x80	; 128
    1192:	2f 81       	ldd	r18, Y+7	; 0x07
    1194:	38 85       	ldd	r19, Y+8	; 0x08
    1196:	49 85       	ldd	r20, Y+9	; 0x09
    1198:	5a 85       	ldd	r21, Y+10	; 0x0a
    119a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
    119e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
    11a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    11a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    11a6:	75 87       	std	Z+13, r23	; 0x0d
    11a8:	64 87       	std	Z+12, r22	; 0x0c
    11aa:	c5 01       	movw	r24, r10
    11ac:	b4 01       	movw	r22, r8
    11ae:	90 58       	subi	r25, 0x80	; 128
    11b0:	2f 81       	ldd	r18, Y+7	; 0x07
    11b2:	38 85       	ldd	r19, Y+8	; 0x08
    11b4:	49 85       	ldd	r20, Y+9	; 0x09
    11b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    11b8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
    11bc:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
    11c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    11c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    11c4:	1f 96       	adiw	r26, 0x0f	; 15
    11c6:	7c 93       	st	X, r23
    11c8:	6e 93       	st	-X, r22
    11ca:	1e 97       	sbiw	r26, 0x0e	; 14
    11cc:	c7 01       	movw	r24, r14
    11ce:	b6 01       	movw	r22, r12
    11d0:	90 58       	subi	r25, 0x80	; 128
    11d2:	2f 81       	ldd	r18, Y+7	; 0x07
    11d4:	38 85       	ldd	r19, Y+8	; 0x08
    11d6:	49 85       	ldd	r20, Y+9	; 0x09
    11d8:	5a 85       	ldd	r21, Y+10	; 0x0a
    11da:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
    11de:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
    11e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    11e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    11e6:	71 8b       	std	Z+17, r23	; 0x11
    11e8:	60 8b       	std	Z+16, r22	; 0x10
    11ea:	2e 96       	adiw	r28, 0x0e	; 14
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	5f 90       	pop	r5
    1214:	4f 90       	pop	r4
    1216:	3f 90       	pop	r3
    1218:	2f 90       	pop	r2
    121a:	08 95       	ret

0000121c <_ZN7ITG320014readGyroRawCalEPiS0_S0_>:
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
    122e:	6b 01       	movw	r12, r22
    1230:	7a 01       	movw	r14, r20
    1232:	89 01       	movw	r16, r18
    1234:	e5 de       	rcall	.-566    	; 0x1000 <_ZN7ITG320011readGyroRawEPiS0_S0_>
    1236:	f6 01       	movw	r30, r12
    1238:	20 81       	ld	r18, Z
    123a:	31 81       	ldd	r19, Z+1	; 0x01
    123c:	8c 85       	ldd	r24, Y+12	; 0x0c
    123e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1240:	82 0f       	add	r24, r18
    1242:	93 1f       	adc	r25, r19
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
    1248:	f7 01       	movw	r30, r14
    124a:	20 81       	ld	r18, Z
    124c:	31 81       	ldd	r19, Z+1	; 0x01
    124e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1250:	9f 85       	ldd	r25, Y+15	; 0x0f
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	f8 01       	movw	r30, r16
    125c:	20 81       	ld	r18, Z
    125e:	31 81       	ldd	r19, Z+1	; 0x01
    1260:	88 89       	ldd	r24, Y+16	; 0x10
    1262:	99 89       	ldd	r25, Y+17	; 0x11
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	80 83       	st	Z, r24
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	08 95       	ret

0000127e <_ZN7ITG32008readGyroEPfS0_S0_>:
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	00 d0       	rcall	.+0      	; 0x1294 <_ZN7ITG32008readGyroEPfS0_S0_+0x16>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <_ZN7ITG32008readGyroEPfS0_S0_+0x18>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8c 01       	movw	r16, r24
    129c:	5b 01       	movw	r10, r22
    129e:	6a 01       	movw	r12, r20
    12a0:	79 01       	movw	r14, r18
    12a2:	9e 01       	movw	r18, r28
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	ae 01       	movw	r20, r28
    12aa:	4d 5f       	subi	r20, 0xFD	; 253
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	be 01       	movw	r22, r28
    12b0:	6b 5f       	subi	r22, 0xFB	; 251
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	b3 df       	rcall	.-154    	; 0x121c <_ZN7ITG320014readGyroRawCalEPiS0_S0_>
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	07 2e       	mov	r0, r23
    12bc:	00 0c       	add	r0, r0
    12be:	88 0b       	sbc	r24, r24
    12c0:	99 0b       	sbc	r25, r25
    12c2:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	46 e6       	ldi	r20, 0x66	; 102
    12cc:	51 e4       	ldi	r21, 0x41	; 65
    12ce:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
    12d2:	f8 01       	movw	r30, r16
    12d4:	22 89       	ldd	r18, Z+18	; 0x12
    12d6:	33 89       	ldd	r19, Z+19	; 0x13
    12d8:	44 89       	ldd	r20, Z+20	; 0x14
    12da:	55 89       	ldd	r21, Z+21	; 0x15
    12dc:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    12e0:	f8 01       	movw	r30, r16
    12e2:	20 81       	ld	r18, Z
    12e4:	31 81       	ldd	r19, Z+1	; 0x01
    12e6:	42 81       	ldd	r20, Z+2	; 0x02
    12e8:	53 81       	ldd	r21, Z+3	; 0x03
    12ea:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    12ee:	f5 01       	movw	r30, r10
    12f0:	60 83       	st	Z, r22
    12f2:	71 83       	std	Z+1, r23	; 0x01
    12f4:	82 83       	std	Z+2, r24	; 0x02
    12f6:	93 83       	std	Z+3, r25	; 0x03
    12f8:	6b 81       	ldd	r22, Y+3	; 0x03
    12fa:	7c 81       	ldd	r23, Y+4	; 0x04
    12fc:	07 2e       	mov	r0, r23
    12fe:	00 0c       	add	r0, r0
    1300:	88 0b       	sbc	r24, r24
    1302:	99 0b       	sbc	r25, r25
    1304:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	46 e6       	ldi	r20, 0x66	; 102
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
    1314:	f8 01       	movw	r30, r16
    1316:	26 89       	ldd	r18, Z+22	; 0x16
    1318:	37 89       	ldd	r19, Z+23	; 0x17
    131a:	40 8d       	ldd	r20, Z+24	; 0x18
    131c:	51 8d       	ldd	r21, Z+25	; 0x19
    131e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    1322:	f8 01       	movw	r30, r16
    1324:	24 81       	ldd	r18, Z+4	; 0x04
    1326:	35 81       	ldd	r19, Z+5	; 0x05
    1328:	46 81       	ldd	r20, Z+6	; 0x06
    132a:	57 81       	ldd	r21, Z+7	; 0x07
    132c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    1330:	f6 01       	movw	r30, r12
    1332:	60 83       	st	Z, r22
    1334:	71 83       	std	Z+1, r23	; 0x01
    1336:	82 83       	std	Z+2, r24	; 0x02
    1338:	93 83       	std	Z+3, r25	; 0x03
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	07 2e       	mov	r0, r23
    1340:	00 0c       	add	r0, r0
    1342:	88 0b       	sbc	r24, r24
    1344:	99 0b       	sbc	r25, r25
    1346:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	46 e6       	ldi	r20, 0x66	; 102
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
    1356:	f8 01       	movw	r30, r16
    1358:	22 8d       	ldd	r18, Z+26	; 0x1a
    135a:	33 8d       	ldd	r19, Z+27	; 0x1b
    135c:	44 8d       	ldd	r20, Z+28	; 0x1c
    135e:	55 8d       	ldd	r21, Z+29	; 0x1d
    1360:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    1364:	f8 01       	movw	r30, r16
    1366:	20 85       	ldd	r18, Z+8	; 0x08
    1368:	31 85       	ldd	r19, Z+9	; 0x09
    136a:	42 85       	ldd	r20, Z+10	; 0x0a
    136c:	53 85       	ldd	r21, Z+11	; 0x0b
    136e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    1372:	f7 01       	movw	r30, r14
    1374:	60 83       	st	Z, r22
    1376:	71 83       	std	Z+1, r23	; 0x01
    1378:	82 83       	std	Z+2, r24	; 0x02
    137a:	93 83       	std	Z+3, r25	; 0x03
    137c:	26 96       	adiw	r28, 0x06	; 6
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	08 95       	ret

0000139e <_ZN7ITG320014setClockSourceEh>:

void ITG3200::setClockSource(byte _CLKsource) {   
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
    13a6:	16 2f       	mov	r17, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    13a8:	9c 01       	movw	r18, r24
    13aa:	21 5e       	subi	r18, 0xE1	; 225
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	6e e3       	ldi	r22, 0x3E	; 62
    13b2:	8b dd       	rcall	.-1258   	; 0xeca <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_CLK_SEL) | _CLKsource)); 
    13b4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    13b6:	48 7f       	andi	r20, 0xF8	; 248
    13b8:	41 2b       	or	r20, r17
    13ba:	6e e3       	ldi	r22, 0x3E	; 62
    13bc:	ce 01       	movw	r24, r28
    13be:	66 dd       	rcall	.-1332   	; 0xe8c <_ZN7ITG32008writememEhh>
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	08 95       	ret

000013c8 <_ZN7ITG32004initEjhhhhbb>:
  
  // slow sample rate 32Khz external clock - divisor = 0  filter = 1,2,3,4,5, or 6  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW010_SR1, PLL_EXTERNAL32, true, true);
}

void ITG3200::init(unsigned int address, byte _SRateDiv, byte _Range, byte _filterBW, byte _ClockSrc, bool _ITGReady, bool _INTRawDataReady) {
    13c8:	af 92       	push	r10
    13ca:	cf 92       	push	r12
    13cc:	ef 92       	push	r14
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    13d8:	12 2f       	mov	r17, r18
  _dev_address = address;
    13da:	6e 8f       	std	Y+30, r22	; 0x1e
  setSampleRateDiv(_SRateDiv);
    13dc:	64 2f       	mov	r22, r20
    13de:	71 dd       	rcall	.-1310   	; 0xec2 <_ZN7ITG320016setSampleRateDivEh>
  setFSRange(_Range);
    13e0:	61 2f       	mov	r22, r17
    13e2:	ce 01       	movw	r24, r28
    13e4:	b2 dd       	rcall	.-1180   	; 0xf4a <_ZN7ITG320010setFSRangeEh>
  setFilterBW(_filterBW);
    13e6:	60 2f       	mov	r22, r16
    13e8:	ce 01       	movw	r24, r28
    13ea:	c8 dd       	rcall	.-1136   	; 0xf7c <_ZN7ITG320011setFilterBWEh>
  setClockSource(_ClockSrc);
    13ec:	6e 2d       	mov	r22, r14
    13ee:	ce 01       	movw	r24, r28
    13f0:	d6 df       	rcall	.-84     	; 0x139e <_ZN7ITG320014setClockSourceEh>
  setITGReady(_ITGReady);
    13f2:	6c 2d       	mov	r22, r12
    13f4:	ce 01       	movw	r24, r28
    13f6:	d7 dd       	rcall	.-1106   	; 0xfa6 <_ZN7ITG320011setITGReadyEb>
  setRawDataReady(_INTRawDataReady);  
    13f8:	6a 2d       	mov	r22, r10
    13fa:	ce 01       	movw	r24, r28
    13fc:	ec dd       	rcall	.-1064   	; 0xfd6 <_ZN7ITG320015setRawDataReadyEb>
  delay(GYROSTART_UP_DELAY);  // startup 
    13fe:	66 e4       	ldi	r22, 0x46	; 70
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 90 19 	call	0x3320	; 0x3320 <delay>
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ef 90       	pop	r14
    1414:	cf 90       	pop	r12
    1416:	af 90       	pop	r10
    1418:	08 95       	ret

0000141a <_ZN7ITG32004initEj>:
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}

void ITG3200::init(unsigned int  address) {
    141a:	af 92       	push	r10
    141c:	cf 92       	push	r12
    141e:	ef 92       	push	r14
    1420:	0f 93       	push	r16
  // Uncomment or change your default ITG3200 initialization
  
  // fast sample rate - divisor = 0 filter = 0 clocksrc = 0, 1, 2, or 3  (raw values)
  init(address, NOSRDIVIDER, RANGE2000, BW256_SR8, PLL_XGYRO_REF, true, true);
    1422:	aa 24       	eor	r10, r10
    1424:	a3 94       	inc	r10
    1426:	cc 24       	eor	r12, r12
    1428:	c3 94       	inc	r12
    142a:	ee 24       	eor	r14, r14
    142c:	e3 94       	inc	r14
    142e:	00 e0       	ldi	r16, 0x00	; 0
    1430:	23 e0       	ldi	r18, 0x03	; 3
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	c9 df       	rcall	.-110    	; 0x13c8 <_ZN7ITG32004initEjhhhhbb>
  // fast sample rate 32Khz external clock - divisor = 0  filter = 0  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW256_SR8, PLL_EXTERNAL32, true, true);
  
  // slow sample rate 32Khz external clock - divisor = 0  filter = 1,2,3,4,5, or 6  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW010_SR1, PLL_EXTERNAL32, true, true);
}
    1436:	0f 91       	pop	r16
    1438:	ef 90       	pop	r14
    143a:	cf 90       	pop	r12
    143c:	af 90       	pop	r10
    143e:	08 95       	ret

00001440 <_ZN10FreeSixIMUC1Ev>:
void FreeSixIMU::getRawValues(int * raw_values) {
  acc.readAccel(&raw_values[0], &raw_values[1], &raw_values[2]);
  gyro.readGyroRaw(&raw_values[3], &raw_values[4], &raw_values[5]);
  //magn.getValues(&raw_values[6], &raw_values[7], &raw_values[8]);
  
}
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	eb 97       	sbiw	r28, 0x3b	; 59
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	8c 01       	movw	r16, r24
    145e:	27 dc       	rcall	.-1970   	; 0xcae <_ZN7ADXL345C1Ev>
    1460:	78 01       	movw	r14, r16
    1462:	86 e1       	ldi	r24, 0x16	; 22
    1464:	e8 0e       	add	r14, r24
    1466:	f1 1c       	adc	r15, r1
    1468:	c7 01       	movw	r24, r14
    146a:	ec dc       	rcall	.-1576   	; 0xe44 <_ZN7ITG3200C1Ev>
    146c:	ce 01       	movw	r24, r28
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	1e dc       	rcall	.-1988   	; 0xcae <_ZN7ADXL345C1Ev>
    1472:	86 e1       	ldi	r24, 0x16	; 22
    1474:	fe 01       	movw	r30, r28
    1476:	31 96       	adiw	r30, 0x01	; 1
    1478:	d8 01       	movw	r26, r16
    147a:	01 90       	ld	r0, Z+
    147c:	0d 92       	st	X+, r0
    147e:	8a 95       	dec	r24
    1480:	e1 f7       	brne	.-8      	; 0x147a <_ZN10FreeSixIMUC1Ev+0x3a>
    1482:	ce 01       	movw	r24, r28
    1484:	47 96       	adiw	r24, 0x17	; 23
    1486:	de dc       	rcall	.-1604   	; 0xe44 <_ZN7ITG3200C1Ev>
    1488:	95 e2       	ldi	r25, 0x25	; 37
    148a:	fe 01       	movw	r30, r28
    148c:	77 96       	adiw	r30, 0x17	; 23
    148e:	d7 01       	movw	r26, r14
    1490:	01 90       	ld	r0, Z+
    1492:	0d 92       	st	X+, r0
    1494:	9a 95       	dec	r25
    1496:	e1 f7       	brne	.-8      	; 0x1490 <_ZN10FreeSixIMUC1Ev+0x50>
    1498:	f8 01       	movw	r30, r16
    149a:	eb 59       	subi	r30, 0x9B	; 155
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e8       	ldi	r26, 0x80	; 128
    14a4:	bf e3       	ldi	r27, 0x3F	; 63
    14a6:	80 83       	st	Z, r24
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	a2 83       	std	Z+2, r26	; 0x02
    14ac:	b3 83       	std	Z+3, r27	; 0x03
    14ae:	34 96       	adiw	r30, 0x04	; 4
    14b0:	10 82       	st	Z, r1
    14b2:	11 82       	std	Z+1, r1	; 0x01
    14b4:	12 82       	std	Z+2, r1	; 0x02
    14b6:	13 82       	std	Z+3, r1	; 0x03
    14b8:	34 96       	adiw	r30, 0x04	; 4
    14ba:	10 82       	st	Z, r1
    14bc:	11 82       	std	Z+1, r1	; 0x01
    14be:	12 82       	std	Z+2, r1	; 0x02
    14c0:	13 82       	std	Z+3, r1	; 0x03
    14c2:	34 96       	adiw	r30, 0x04	; 4
    14c4:	10 82       	st	Z, r1
    14c6:	11 82       	std	Z+1, r1	; 0x01
    14c8:	12 82       	std	Z+2, r1	; 0x02
    14ca:	13 82       	std	Z+3, r1	; 0x03
    14cc:	b0 97       	sbiw	r30, 0x20	; 32
    14ce:	10 82       	st	Z, r1
    14d0:	11 82       	std	Z+1, r1	; 0x01
    14d2:	12 82       	std	Z+2, r1	; 0x02
    14d4:	13 82       	std	Z+3, r1	; 0x03
    14d6:	34 96       	adiw	r30, 0x04	; 4
    14d8:	10 82       	st	Z, r1
    14da:	11 82       	std	Z+1, r1	; 0x01
    14dc:	12 82       	std	Z+2, r1	; 0x02
    14de:	13 82       	std	Z+3, r1	; 0x03
    14e0:	34 96       	adiw	r30, 0x04	; 4
    14e2:	10 82       	st	Z, r1
    14e4:	11 82       	std	Z+1, r1	; 0x01
    14e6:	12 82       	std	Z+2, r1	; 0x02
    14e8:	13 82       	std	Z+3, r1	; 0x03
    14ea:	34 96       	adiw	r30, 0x04	; 4
    14ec:	80 83       	st	Z, r24
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	a2 83       	std	Z+2, r26	; 0x02
    14f2:	b3 83       	std	Z+3, r27	; 0x03
    14f4:	34 96       	adiw	r30, 0x04	; 4
    14f6:	8d ec       	ldi	r24, 0xCD	; 205
    14f8:	9c ec       	ldi	r25, 0xCC	; 204
    14fa:	ac e4       	ldi	r26, 0x4C	; 76
    14fc:	be e3       	ldi	r27, 0x3E	; 62
    14fe:	80 83       	st	Z, r24
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	a2 83       	std	Z+2, r26	; 0x02
    1504:	b3 83       	std	Z+3, r27	; 0x03
    1506:	74 96       	adiw	r30, 0x14	; 20
    1508:	10 82       	st	Z, r1
    150a:	11 82       	std	Z+1, r1	; 0x01
    150c:	12 82       	std	Z+2, r1	; 0x02
    150e:	13 82       	std	Z+3, r1	; 0x03
    1510:	34 96       	adiw	r30, 0x04	; 4
    1512:	10 82       	st	Z, r1
    1514:	11 82       	std	Z+1, r1	; 0x01
    1516:	12 82       	std	Z+2, r1	; 0x02
    1518:	13 82       	std	Z+3, r1	; 0x03
    151a:	34 96       	adiw	r30, 0x04	; 4
    151c:	10 82       	st	Z, r1
    151e:	11 82       	std	Z+1, r1	; 0x01
    1520:	12 82       	std	Z+2, r1	; 0x02
    1522:	13 82       	std	Z+3, r1	; 0x03
    1524:	34 96       	adiw	r30, 0x04	; 4
    1526:	10 82       	st	Z, r1
    1528:	11 82       	std	Z+1, r1	; 0x01
    152a:	12 82       	std	Z+2, r1	; 0x02
    152c:	13 82       	std	Z+3, r1	; 0x03
    152e:	34 96       	adiw	r30, 0x04	; 4
    1530:	10 82       	st	Z, r1
    1532:	11 82       	std	Z+1, r1	; 0x01
    1534:	12 82       	std	Z+2, r1	; 0x02
    1536:	13 82       	std	Z+3, r1	; 0x03
    1538:	eb 96       	adiw	r28, 0x3b	; 59
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	08 95       	ret

00001552 <_ZN10FreeSixIMU4initEiib>:
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	7b 01       	movw	r14, r22
    1564:	8a 01       	movw	r16, r20
    1566:	d2 2e       	mov	r13, r18
    1568:	65 e0       	ldi	r22, 0x05	; 5
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 90 19 	call	0x3320	; 0x3320 <delay>
    1574:	58 98       	cbi	0x0b, 0	; 11
    1576:	59 98       	cbi	0x0b, 1	; 11
    1578:	dd 20       	and	r13, r13
    157a:	19 f0       	breq	.+6      	; 0x1582 <_ZN10FreeSixIMU4initEiib+0x30>
    157c:	8c e0       	ldi	r24, 0x0C	; 12
    157e:	80 93 b8 00 	sts	0x00B8, r24
    1582:	b7 01       	movw	r22, r14
    1584:	ce 01       	movw	r24, r28
    1586:	d0 db       	rcall	.-2144   	; 0xd28 <_ZN7ADXL3454initEi>
    1588:	66 96       	adiw	r28, 0x16	; 22
    158a:	b8 01       	movw	r22, r16
    158c:	ce 01       	movw	r24, r28
    158e:	45 df       	rcall	.-374    	; 0x141a <_ZN7ITG32004initEj>
    1590:	68 ee       	ldi	r22, 0xE8	; 232
    1592:	73 e0       	ldi	r23, 0x03	; 3
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 90 19 	call	0x3320	; 0x3320 <delay>
    159c:	45 e0       	ldi	r20, 0x05	; 5
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	60 e8       	ldi	r22, 0x80	; 128
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	ce 01       	movw	r24, r28
    15a6:	6a dd       	rcall	.-1324   	; 0x107c <_ZN7ITG320013zeroCalibrateEjj>
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	08 95       	ret

000015b8 <_ZN10FreeSixIMU4initEv>:
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	48 e6       	ldi	r20, 0x68	; 104
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	63 e5       	ldi	r22, 0x53	; 83
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	c7 cf       	rjmp	.-114    	; 0x1552 <_ZN10FreeSixIMU4initEiib>
    15c4:	08 95       	ret

000015c6 <_ZN10FreeSixIMU9getValuesEPf>:


void FreeSixIMU::getValues(float * values) {  
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <_ZN10FreeSixIMU9getValuesEPf+0xa>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <_ZN10FreeSixIMU9getValuesEPf+0xc>
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	8b 01       	movw	r16, r22
  int accval[3];
  acc.readAccel(&accval[0], &accval[1], &accval[2]);
    15d8:	9e 01       	movw	r18, r28
    15da:	2b 5f       	subi	r18, 0xFB	; 251
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	ae 01       	movw	r20, r28
    15e0:	4d 5f       	subi	r20, 0xFD	; 253
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	be 01       	movw	r22, r28
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	f5 db       	rcall	.-2070   	; 0xdd6 <_ZN7ADXL3459readAccelEPiS0_S0_>
   values[0] = ((float) accval[0]);
    15ec:	69 81       	ldd	r22, Y+1	; 0x01
    15ee:	7a 81       	ldd	r23, Y+2	; 0x02
    15f0:	07 2e       	mov	r0, r23
    15f2:	00 0c       	add	r0, r0
    15f4:	88 0b       	sbc	r24, r24
    15f6:	99 0b       	sbc	r25, r25
    15f8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    15fc:	f8 01       	movw	r30, r16
    15fe:	60 83       	st	Z, r22
    1600:	71 83       	std	Z+1, r23	; 0x01
    1602:	82 83       	std	Z+2, r24	; 0x02
    1604:	93 83       	std	Z+3, r25	; 0x03
   values[1] = ((float) accval[1]);
    1606:	6b 81       	ldd	r22, Y+3	; 0x03
    1608:	7c 81       	ldd	r23, Y+4	; 0x04
    160a:	07 2e       	mov	r0, r23
    160c:	00 0c       	add	r0, r0
    160e:	88 0b       	sbc	r24, r24
    1610:	99 0b       	sbc	r25, r25
    1612:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    1616:	f8 01       	movw	r30, r16
    1618:	64 83       	std	Z+4, r22	; 0x04
    161a:	75 83       	std	Z+5, r23	; 0x05
    161c:	86 83       	std	Z+6, r24	; 0x06
    161e:	97 83       	std	Z+7, r25	; 0x07
   values[2] = ((float) accval[2]);
    1620:	6d 81       	ldd	r22, Y+5	; 0x05
    1622:	7e 81       	ldd	r23, Y+6	; 0x06
    1624:	07 2e       	mov	r0, r23
    1626:	00 0c       	add	r0, r0
    1628:	88 0b       	sbc	r24, r24
    162a:	99 0b       	sbc	r25, r25
    162c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    1630:	f8 01       	movw	r30, r16
    1632:	60 87       	std	Z+8, r22	; 0x08
    1634:	71 87       	std	Z+9, r23	; 0x09
    1636:	82 87       	std	Z+10, r24	; 0x0a
    1638:	93 87       	std	Z+11, r25	; 0x0b
  */
  
  //gyro.readGyro(&values[3]);
  
  //magn.getValues(&values[6]);
}
    163a:	26 96       	adiw	r28, 0x06	; 6
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	08 95       	ret

00001650 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1650:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1652:	91 8d       	ldd	r25, Z+25	; 0x19
    1654:	22 8d       	ldd	r18, Z+26	; 0x1a
    1656:	89 2f       	mov	r24, r25
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	80 5c       	subi	r24, 0xC0	; 192
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	82 1b       	sub	r24, r18
    1660:	91 09       	sbc	r25, r1
}
    1662:	8f 73       	andi	r24, 0x3F	; 63
    1664:	99 27       	eor	r25, r25
    1666:	08 95       	ret

00001668 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1668:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    166a:	91 8d       	ldd	r25, Z+25	; 0x19
    166c:	82 8d       	ldd	r24, Z+26	; 0x1a
    166e:	98 17       	cp	r25, r24
    1670:	31 f0       	breq	.+12     	; 0x167e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1672:	82 8d       	ldd	r24, Z+26	; 0x1a
    1674:	e8 0f       	add	r30, r24
    1676:	f1 1d       	adc	r31, r1
    1678:	85 8d       	ldd	r24, Z+29	; 0x1d
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1682:	08 95       	ret

00001684 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1684:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1686:	91 8d       	ldd	r25, Z+25	; 0x19
    1688:	82 8d       	ldd	r24, Z+26	; 0x1a
    168a:	98 17       	cp	r25, r24
    168c:	61 f0       	breq	.+24     	; 0x16a6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    168e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1690:	df 01       	movw	r26, r30
    1692:	a8 0f       	add	r26, r24
    1694:	b1 1d       	adc	r27, r1
    1696:	5d 96       	adiw	r26, 0x1d	; 29
    1698:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    169a:	92 8d       	ldd	r25, Z+26	; 0x1a
    169c:	9f 5f       	subi	r25, 0xFF	; 255
    169e:	9f 73       	andi	r25, 0x3F	; 63
    16a0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    16aa:	08 95       	ret

000016ac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    16ac:	8e ee       	ldi	r24, 0xEE	; 238
    16ae:	9c e0       	ldi	r25, 0x0C	; 12
    16b0:	89 2b       	or	r24, r25
    16b2:	41 f0       	breq	.+16     	; 0x16c4 <_Z14serialEventRunv+0x18>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	89 2b       	or	r24, r25
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <_Z14serialEventRunv+0x18>
    16bc:	8f d1       	rcall	.+798    	; 0x19dc <_Z17Serial0_availablev>
    16be:	81 11       	cpse	r24, r1
    16c0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    16c4:	89 e8       	ldi	r24, 0x89	; 137
    16c6:	9d e0       	ldi	r25, 0x0D	; 13
    16c8:	89 2b       	or	r24, r25
    16ca:	41 f0       	breq	.+16     	; 0x16dc <_Z14serialEventRunv+0x30>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	89 2b       	or	r24, r25
    16d2:	21 f0       	breq	.+8      	; 0x16dc <_Z14serialEventRunv+0x30>
    16d4:	1e d2       	rcall	.+1084   	; 0x1b12 <_Z17Serial1_availablev>
    16d6:	81 11       	cpse	r24, r1
    16d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    16dc:	84 e2       	ldi	r24, 0x24	; 36
    16de:	9e e0       	ldi	r25, 0x0E	; 14
    16e0:	89 2b       	or	r24, r25
    16e2:	41 f0       	breq	.+16     	; 0x16f4 <_Z14serialEventRunv+0x48>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	89 2b       	or	r24, r25
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <_Z14serialEventRunv+0x48>
    16ec:	ad d2       	rcall	.+1370   	; 0x1c48 <_Z17Serial2_availablev>
    16ee:	81 11       	cpse	r24, r1
    16f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    16f4:	8f eb       	ldi	r24, 0xBF	; 191
    16f6:	9e e0       	ldi	r25, 0x0E	; 14
    16f8:	89 2b       	or	r24, r25
    16fa:	41 f0       	breq	.+16     	; 0x170c <_Z14serialEventRunv+0x60>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	89 2b       	or	r24, r25
    1702:	21 f0       	breq	.+8      	; 0x170c <_Z14serialEventRunv+0x60>
    1704:	3c d3       	rcall	.+1656   	; 0x1d7e <_Z17Serial3_availablev>
    1706:	81 11       	cpse	r24, r1
    1708:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    170c:	08 95       	ret

0000170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    170e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1710:	84 8d       	ldd	r24, Z+28	; 0x1c
    1712:	df 01       	movw	r26, r30
    1714:	a8 0f       	add	r26, r24
    1716:	b1 1d       	adc	r27, r1
    1718:	a3 5a       	subi	r26, 0xA3	; 163
    171a:	bf 4f       	sbci	r27, 0xFF	; 255
    171c:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    171e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	2f 5f       	subi	r18, 0xFF	; 255
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	2f 73       	andi	r18, 0x3F	; 63
    1728:	30 78       	andi	r19, 0x80	; 128
    172a:	33 23       	and	r19, r19
    172c:	34 f4       	brge	.+12     	; 0x173a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    172e:	21 50       	subi	r18, 0x01	; 1
    1730:	31 09       	sbc	r19, r1
    1732:	20 6c       	ori	r18, 0xC0	; 192
    1734:	3f 6f       	ori	r19, 0xFF	; 255
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    173c:	a6 89       	ldd	r26, Z+22	; 0x16
    173e:	b7 89       	ldd	r27, Z+23	; 0x17
    1740:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1742:	a0 89       	ldd	r26, Z+16	; 0x10
    1744:	b1 89       	ldd	r27, Z+17	; 0x11
    1746:	8c 91       	ld	r24, X
    1748:	80 64       	ori	r24, 0x40	; 64
    174a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    174c:	93 8d       	ldd	r25, Z+27	; 0x1b
    174e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1750:	98 13       	cpse	r25, r24
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1754:	02 88       	ldd	r0, Z+18	; 0x12
    1756:	f3 89       	ldd	r31, Z+19	; 0x13
    1758:	e0 2d       	mov	r30, r0
    175a:	80 81       	ld	r24, Z
    175c:	8f 7d       	andi	r24, 0xDF	; 223
    175e:	80 83       	st	Z, r24
    1760:	08 95       	ret

00001762 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1768:	88 8d       	ldd	r24, Y+24	; 0x18
    176a:	81 11       	cpse	r24, r1
    176c:	0e c0       	rjmp	.+28     	; 0x178a <_ZN14HardwareSerial5flushEv+0x28>
    176e:	17 c0       	rjmp	.+46     	; 0x179e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	07 fc       	sbrc	r0, 7
    1774:	0c c0       	rjmp	.+24     	; 0x178e <_ZN14HardwareSerial5flushEv+0x2c>
    1776:	90 81       	ld	r25, Z
    1778:	95 ff       	sbrs	r25, 5
    177a:	09 c0       	rjmp	.+18     	; 0x178e <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    177c:	a8 89       	ldd	r26, Y+16	; 0x10
    177e:	b9 89       	ldd	r27, Y+17	; 0x11
    1780:	8c 91       	ld	r24, X
    1782:	85 ff       	sbrs	r24, 5
    1784:	04 c0       	rjmp	.+8      	; 0x178e <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
    1786:	ce 01       	movw	r24, r28
    1788:	c2 df       	rcall	.-124    	; 0x170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    178a:	ea 89       	ldd	r30, Y+18	; 0x12
    178c:	fb 89       	ldd	r31, Y+19	; 0x13
    178e:	90 81       	ld	r25, Z
    1790:	95 fd       	sbrc	r25, 5
    1792:	ee cf       	rjmp	.-36     	; 0x1770 <_ZN14HardwareSerial5flushEv+0xe>
    1794:	a8 89       	ldd	r26, Y+16	; 0x10
    1796:	b9 89       	ldd	r27, Y+17	; 0x11
    1798:	8c 91       	ld	r24, X
    179a:	86 ff       	sbrs	r24, 6
    179c:	e9 cf       	rjmp	.-46     	; 0x1770 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    17ae:	93 8d       	ldd	r25, Z+27	; 0x1b
    17b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    17b2:	98 13       	cpse	r25, r24
    17b4:	23 c0       	rjmp	.+70     	; 0x17fc <_ZN14HardwareSerial5writeEh+0x58>
    17b6:	a0 89       	ldd	r26, Z+16	; 0x10
    17b8:	b1 89       	ldd	r27, Z+17	; 0x11
    17ba:	8c 91       	ld	r24, X
    17bc:	85 fd       	sbrc	r24, 5
    17be:	30 c0       	rjmp	.+96     	; 0x1820 <_ZN14HardwareSerial5writeEh+0x7c>
    17c0:	1d c0       	rjmp	.+58     	; 0x17fc <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	07 fc       	sbrc	r0, 7
    17c6:	07 c0       	rjmp	.+14     	; 0x17d6 <_ZN14HardwareSerial5writeEh+0x32>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    17c8:	e8 89       	ldd	r30, Y+16	; 0x10
    17ca:	f9 89       	ldd	r31, Y+17	; 0x11
    17cc:	80 81       	ld	r24, Z
    17ce:	85 ff       	sbrs	r24, 5
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <_ZN14HardwareSerial5writeEh+0x32>
	_tx_udr_empty_irq();
    17d2:	ce 01       	movw	r24, r28
    17d4:	9c df       	rcall	.-200    	; 0x170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    17d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d8:	09 17       	cp	r16, r25
    17da:	99 f3       	breq	.-26     	; 0x17c2 <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    17dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17de:	fe 01       	movw	r30, r28
    17e0:	e8 0f       	add	r30, r24
    17e2:	f1 1d       	adc	r31, r1
    17e4:	e3 5a       	subi	r30, 0xA3	; 163
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    17ea:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    17ec:	ea 89       	ldd	r30, Y+18	; 0x12
    17ee:	fb 89       	ldd	r31, Y+19	; 0x13
    17f0:	80 81       	ld	r24, Z
    17f2:	80 62       	ori	r24, 0x20	; 32
    17f4:	80 83       	st	Z, r24
  _written = true;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
    17fa:	1b c0       	rjmp	.+54     	; 0x1832 <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    17fc:	23 8d       	ldd	r18, Z+27	; 0x1b
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	2f 5f       	subi	r18, 0xFF	; 255
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	2f 73       	andi	r18, 0x3F	; 63
    1806:	30 78       	andi	r19, 0x80	; 128
    1808:	33 23       	and	r19, r19
    180a:	34 f4       	brge	.+12     	; 0x1818 <_ZN14HardwareSerial5writeEh+0x74>
    180c:	21 50       	subi	r18, 0x01	; 1
    180e:	31 09       	sbc	r19, r1
    1810:	20 6c       	ori	r18, 0xC0	; 192
    1812:	3f 6f       	ori	r19, 0xFF	; 255
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	16 2f       	mov	r17, r22
    181a:	ef 01       	movw	r28, r30
    181c:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    181e:	db cf       	rjmp	.-74     	; 0x17d6 <_ZN14HardwareSerial5writeEh+0x32>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1820:	a6 89       	ldd	r26, Z+22	; 0x16
    1822:	b7 89       	ldd	r27, Z+23	; 0x17
    1824:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    1826:	00 88       	ldd	r0, Z+16	; 0x10
    1828:	f1 89       	ldd	r31, Z+17	; 0x11
    182a:	e0 2d       	mov	r30, r0
    182c:	80 81       	ld	r24, Z
    182e:	80 64       	ori	r24, 0x40	; 64
    1830:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1840:	bf 92       	push	r11
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	6a 01       	movw	r12, r20
    1856:	7b 01       	movw	r14, r22
    1858:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    185a:	e8 89       	ldd	r30, Y+16	; 0x10
    185c:	f9 89       	ldd	r31, Y+17	; 0x11
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1862:	41 15       	cp	r20, r1
    1864:	51 4e       	sbci	r21, 0xE1	; 225
    1866:	61 05       	cpc	r22, r1
    1868:	71 05       	cpc	r23, r1
    186a:	b1 f0       	breq	.+44     	; 0x1898 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	79 e0       	ldi	r23, 0x09	; 9
    1870:	8d e3       	ldi	r24, 0x3D	; 61
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a7 01       	movw	r20, r14
    1876:	96 01       	movw	r18, r12
    1878:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__udivmodsi4>
    187c:	89 01       	movw	r16, r18
    187e:	9a 01       	movw	r18, r20
    1880:	01 50       	subi	r16, 0x01	; 1
    1882:	11 09       	sbc	r17, r1
    1884:	21 09       	sbc	r18, r1
    1886:	31 09       	sbc	r19, r1
    1888:	36 95       	lsr	r19
    188a:	27 95       	ror	r18
    188c:	17 95       	ror	r17
    188e:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1890:	01 15       	cp	r16, r1
    1892:	80 e1       	ldi	r24, 0x10	; 16
    1894:	18 07       	cpc	r17, r24
    1896:	a8 f0       	brcs	.+42     	; 0x18c2 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    1898:	e8 89       	ldd	r30, Y+16	; 0x10
    189a:	f9 89       	ldd	r31, Y+17	; 0x11
    189c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    189e:	60 e8       	ldi	r22, 0x80	; 128
    18a0:	74 e8       	ldi	r23, 0x84	; 132
    18a2:	8e e1       	ldi	r24, 0x1E	; 30
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a7 01       	movw	r20, r14
    18a8:	96 01       	movw	r18, r12
    18aa:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__udivmodsi4>
    18ae:	da 01       	movw	r26, r20
    18b0:	c9 01       	movw	r24, r18
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	a1 09       	sbc	r26, r1
    18b6:	b1 09       	sbc	r27, r1
    18b8:	b6 95       	lsr	r27
    18ba:	a7 95       	ror	r26
    18bc:	97 95       	ror	r25
    18be:	87 95       	ror	r24
    18c0:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    18c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    18c4:	fd 85       	ldd	r31, Y+13	; 0x0d
    18c6:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    18c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    18ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    18cc:	00 83       	st	Z, r16

  _written = false;
    18ce:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    18d0:	ec 89       	ldd	r30, Y+20	; 0x14
    18d2:	fd 89       	ldd	r31, Y+21	; 0x15
    18d4:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    18d6:	ea 89       	ldd	r30, Y+18	; 0x12
    18d8:	fb 89       	ldd	r31, Y+19	; 0x13
    18da:	80 81       	ld	r24, Z
    18dc:	80 61       	ori	r24, 0x10	; 16
    18de:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    18e0:	ea 89       	ldd	r30, Y+18	; 0x12
    18e2:	fb 89       	ldd	r31, Y+19	; 0x13
    18e4:	80 81       	ld	r24, Z
    18e6:	88 60       	ori	r24, 0x08	; 8
    18e8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    18ea:	ea 89       	ldd	r30, Y+18	; 0x12
    18ec:	fb 89       	ldd	r31, Y+19	; 0x13
    18ee:	80 81       	ld	r24, Z
    18f0:	80 68       	ori	r24, 0x80	; 128
    18f2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    18f4:	ea 89       	ldd	r30, Y+18	; 0x12
    18f6:	fb 89       	ldd	r31, Y+19	; 0x13
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7d       	andi	r24, 0xDF	; 223
    18fc:	80 83       	st	Z, r24
}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	df 90       	pop	r13
    190c:	cf 90       	pop	r12
    190e:	bf 90       	pop	r11
    1910:	08 95       	ret

00001912 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	0b b6       	in	r0, 0x3b	; 59
    191e:	0f 92       	push	r0
    1920:	2f 93       	push	r18
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    192e:	e0 91 da 03 	lds	r30, 0x03DA
    1932:	f0 91 db 03 	lds	r31, 0x03DB
    1936:	80 81       	ld	r24, Z
    1938:	82 fd       	sbrc	r24, 2
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    193c:	ea ec       	ldi	r30, 0xCA	; 202
    193e:	f3 e0       	ldi	r31, 0x03	; 3
    1940:	a6 89       	ldd	r26, Z+22	; 0x16
    1942:	b7 89       	ldd	r27, Z+23	; 0x17
    1944:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1946:	81 8d       	ldd	r24, Z+25	; 0x19
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    194c:	92 8d       	ldd	r25, Z+26	; 0x1a
    194e:	89 17       	cp	r24, r25
    1950:	71 f0       	breq	.+28     	; 0x196e <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1952:	df 01       	movw	r26, r30
    1954:	e1 8d       	ldd	r30, Z+25	; 0x19
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	e6 53       	subi	r30, 0x36	; 54
    195a:	fc 4f       	sbci	r31, 0xFC	; 252
    195c:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    195e:	59 96       	adiw	r26, 0x19	; 25
    1960:	8c 93       	st	X, r24
    1962:	05 c0       	rjmp	.+10     	; 0x196e <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1964:	e0 91 e0 03 	lds	r30, 0x03E0
    1968:	f0 91 e1 03 	lds	r31, 0x03E1
    196c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    196e:	ff 91       	pop	r31
    1970:	ef 91       	pop	r30
    1972:	bf 91       	pop	r27
    1974:	af 91       	pop	r26
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0b be       	out	0x3b, r0	; 59
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	0b b6       	in	r0, 0x3b	; 59
    1996:	0f 92       	push	r0
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    19b0:	8a ec       	ldi	r24, 0xCA	; 202
    19b2:	93 e0       	ldi	r25, 0x03	; 3
    19b4:	ac de       	rcall	.-680    	; 0x170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0b be       	out	0x3b, r0	; 59
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	0f 90       	pop	r0
    19d8:	1f 90       	pop	r1
    19da:	18 95       	reti

000019dc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    19dc:	8a ec       	ldi	r24, 0xCA	; 202
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	37 de       	rcall	.-914    	; 0x1650 <_ZN14HardwareSerial9availableEv>
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	89 2b       	or	r24, r25
    19e6:	09 f4       	brne	.+2      	; 0x19ea <_Z17Serial0_availablev+0xe>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
}
    19ea:	82 2f       	mov	r24, r18
    19ec:	08 95       	ret

000019ee <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    19ee:	ea ec       	ldi	r30, 0xCA	; 202
    19f0:	f3 e0       	ldi	r31, 0x03	; 3
    19f2:	13 82       	std	Z+3, r1	; 0x03
    19f4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    19f6:	88 ee       	ldi	r24, 0xE8	; 232
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	a0 e0       	ldi	r26, 0x00	; 0
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	84 83       	std	Z+4, r24	; 0x04
    1a00:	95 83       	std	Z+5, r25	; 0x05
    1a02:	a6 83       	std	Z+6, r26	; 0x06
    1a04:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1a06:	82 e4       	ldi	r24, 0x42	; 66
    1a08:	92 e0       	ldi	r25, 0x02	; 2
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	80 83       	st	Z, r24
    1a0e:	85 ec       	ldi	r24, 0xC5	; 197
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	95 87       	std	Z+13, r25	; 0x0d
    1a14:	84 87       	std	Z+12, r24	; 0x0c
    1a16:	84 ec       	ldi	r24, 0xC4	; 196
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	97 87       	std	Z+15, r25	; 0x0f
    1a1c:	86 87       	std	Z+14, r24	; 0x0e
    1a1e:	80 ec       	ldi	r24, 0xC0	; 192
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	91 8b       	std	Z+17, r25	; 0x11
    1a24:	80 8b       	std	Z+16, r24	; 0x10
    1a26:	81 ec       	ldi	r24, 0xC1	; 193
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	93 8b       	std	Z+19, r25	; 0x13
    1a2c:	82 8b       	std	Z+18, r24	; 0x12
    1a2e:	82 ec       	ldi	r24, 0xC2	; 194
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	95 8b       	std	Z+21, r25	; 0x15
    1a34:	84 8b       	std	Z+20, r24	; 0x14
    1a36:	86 ec       	ldi	r24, 0xC6	; 198
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	97 8b       	std	Z+23, r25	; 0x17
    1a3c:	86 8b       	std	Z+22, r24	; 0x16
    1a3e:	11 8e       	std	Z+25, r1	; 0x19
    1a40:	12 8e       	std	Z+26, r1	; 0x1a
    1a42:	13 8e       	std	Z+27, r1	; 0x1b
    1a44:	14 8e       	std	Z+28, r1	; 0x1c
    1a46:	08 95       	ret

00001a48 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	0b b6       	in	r0, 0x3b	; 59
    1a54:	0f 92       	push	r0
    1a56:	2f 93       	push	r18
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1a64:	e0 91 77 04 	lds	r30, 0x0477
    1a68:	f0 91 78 04 	lds	r31, 0x0478
    1a6c:	80 81       	ld	r24, Z
    1a6e:	82 fd       	sbrc	r24, 2
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1a72:	e7 e6       	ldi	r30, 0x67	; 103
    1a74:	f4 e0       	ldi	r31, 0x04	; 4
    1a76:	a6 89       	ldd	r26, Z+22	; 0x16
    1a78:	b7 89       	ldd	r27, Z+23	; 0x17
    1a7a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1a7c:	81 8d       	ldd	r24, Z+25	; 0x19
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1a82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a84:	89 17       	cp	r24, r25
    1a86:	71 f0       	breq	.+28     	; 0x1aa4 <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1a88:	df 01       	movw	r26, r30
    1a8a:	e1 8d       	ldd	r30, Z+25	; 0x19
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	e9 59       	subi	r30, 0x99	; 153
    1a90:	fb 4f       	sbci	r31, 0xFB	; 251
    1a92:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1a94:	59 96       	adiw	r26, 0x19	; 25
    1a96:	8c 93       	st	X, r24
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1a9a:	e0 91 7d 04 	lds	r30, 0x047D
    1a9e:	f0 91 7e 04 	lds	r31, 0x047E
    1aa2:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	bf 91       	pop	r27
    1aaa:	af 91       	pop	r26
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	2f 91       	pop	r18
    1ab2:	0f 90       	pop	r0
    1ab4:	0b be       	out	0x3b, r0	; 59
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	0f 90       	pop	r0
    1abc:	1f 90       	pop	r1
    1abe:	18 95       	reti

00001ac0 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	0b b6       	in	r0, 0x3b	; 59
    1acc:	0f 92       	push	r0
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1ae6:	87 e6       	ldi	r24, 0x67	; 103
    1ae8:	94 e0       	ldi	r25, 0x04	; 4
    1aea:	11 de       	rcall	.-990    	; 0x170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	bf 91       	pop	r27
    1af2:	af 91       	pop	r26
    1af4:	9f 91       	pop	r25
    1af6:	8f 91       	pop	r24
    1af8:	7f 91       	pop	r23
    1afa:	6f 91       	pop	r22
    1afc:	5f 91       	pop	r21
    1afe:	4f 91       	pop	r20
    1b00:	3f 91       	pop	r19
    1b02:	2f 91       	pop	r18
    1b04:	0f 90       	pop	r0
    1b06:	0b be       	out	0x3b, r0	; 59
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1b12:	87 e6       	ldi	r24, 0x67	; 103
    1b14:	94 e0       	ldi	r25, 0x04	; 4
    1b16:	9c dd       	rcall	.-1224   	; 0x1650 <_ZN14HardwareSerial9availableEv>
    1b18:	21 e0       	ldi	r18, 0x01	; 1
    1b1a:	89 2b       	or	r24, r25
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <_Z17Serial1_availablev+0xe>
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
}
    1b20:	82 2f       	mov	r24, r18
    1b22:	08 95       	ret

00001b24 <_GLOBAL__sub_I___vector_36>:
    1b24:	e7 e6       	ldi	r30, 0x67	; 103
    1b26:	f4 e0       	ldi	r31, 0x04	; 4
    1b28:	13 82       	std	Z+3, r1	; 0x03
    1b2a:	12 82       	std	Z+2, r1	; 0x02
    1b2c:	88 ee       	ldi	r24, 0xE8	; 232
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	84 83       	std	Z+4, r24	; 0x04
    1b36:	95 83       	std	Z+5, r25	; 0x05
    1b38:	a6 83       	std	Z+6, r26	; 0x06
    1b3a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b3c:	82 e4       	ldi	r24, 0x42	; 66
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
    1b44:	8d ec       	ldi	r24, 0xCD	; 205
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	95 87       	std	Z+13, r25	; 0x0d
    1b4a:	84 87       	std	Z+12, r24	; 0x0c
    1b4c:	8c ec       	ldi	r24, 0xCC	; 204
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	97 87       	std	Z+15, r25	; 0x0f
    1b52:	86 87       	std	Z+14, r24	; 0x0e
    1b54:	88 ec       	ldi	r24, 0xC8	; 200
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	91 8b       	std	Z+17, r25	; 0x11
    1b5a:	80 8b       	std	Z+16, r24	; 0x10
    1b5c:	89 ec       	ldi	r24, 0xC9	; 201
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	93 8b       	std	Z+19, r25	; 0x13
    1b62:	82 8b       	std	Z+18, r24	; 0x12
    1b64:	8a ec       	ldi	r24, 0xCA	; 202
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	95 8b       	std	Z+21, r25	; 0x15
    1b6a:	84 8b       	std	Z+20, r24	; 0x14
    1b6c:	8e ec       	ldi	r24, 0xCE	; 206
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	97 8b       	std	Z+23, r25	; 0x17
    1b72:	86 8b       	std	Z+22, r24	; 0x16
    1b74:	11 8e       	std	Z+25, r1	; 0x19
    1b76:	12 8e       	std	Z+26, r1	; 0x1a
    1b78:	13 8e       	std	Z+27, r1	; 0x1b
    1b7a:	14 8e       	std	Z+28, r1	; 0x1c
    1b7c:	08 95       	ret

00001b7e <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	0b b6       	in	r0, 0x3b	; 59
    1b8a:	0f 92       	push	r0
    1b8c:	2f 93       	push	r18
    1b8e:	8f 93       	push	r24
    1b90:	9f 93       	push	r25
    1b92:	af 93       	push	r26
    1b94:	bf 93       	push	r27
    1b96:	ef 93       	push	r30
    1b98:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b9a:	e0 91 14 05 	lds	r30, 0x0514
    1b9e:	f0 91 15 05 	lds	r31, 0x0515
    1ba2:	80 81       	ld	r24, Z
    1ba4:	82 fd       	sbrc	r24, 2
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1ba8:	e4 e0       	ldi	r30, 0x04	; 4
    1baa:	f5 e0       	ldi	r31, 0x05	; 5
    1bac:	a6 89       	ldd	r26, Z+22	; 0x16
    1bae:	b7 89       	ldd	r27, Z+23	; 0x17
    1bb0:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1bb2:	81 8d       	ldd	r24, Z+25	; 0x19
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1bb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bba:	89 17       	cp	r24, r25
    1bbc:	71 f0       	breq	.+28     	; 0x1bda <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1bbe:	df 01       	movw	r26, r30
    1bc0:	e1 8d       	ldd	r30, Z+25	; 0x19
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	ec 5f       	subi	r30, 0xFC	; 252
    1bc6:	fa 4f       	sbci	r31, 0xFA	; 250
    1bc8:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1bca:	59 96       	adiw	r26, 0x19	; 25
    1bcc:	8c 93       	st	X, r24
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1bd0:	e0 91 1a 05 	lds	r30, 0x051A
    1bd4:	f0 91 1b 05 	lds	r31, 0x051B
    1bd8:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0b be       	out	0x3b, r0	; 59
    1bec:	0f 90       	pop	r0
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	0f 90       	pop	r0
    1bf2:	1f 90       	pop	r1
    1bf4:	18 95       	reti

00001bf6 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	0b b6       	in	r0, 0x3b	; 59
    1c02:	0f 92       	push	r0
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	95 e0       	ldi	r25, 0x05	; 5
    1c20:	76 dd       	rcall	.-1300   	; 0x170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	0b be       	out	0x3b, r0	; 59
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    1c48:	84 e0       	ldi	r24, 0x04	; 4
    1c4a:	95 e0       	ldi	r25, 0x05	; 5
    1c4c:	01 dd       	rcall	.-1534   	; 0x1650 <_ZN14HardwareSerial9availableEv>
    1c4e:	21 e0       	ldi	r18, 0x01	; 1
    1c50:	89 2b       	or	r24, r25
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_Z17Serial2_availablev+0xe>
    1c54:	20 e0       	ldi	r18, 0x00	; 0
}
    1c56:	82 2f       	mov	r24, r18
    1c58:	08 95       	ret

00001c5a <_GLOBAL__sub_I___vector_51>:
    1c5a:	e4 e0       	ldi	r30, 0x04	; 4
    1c5c:	f5 e0       	ldi	r31, 0x05	; 5
    1c5e:	13 82       	std	Z+3, r1	; 0x03
    1c60:	12 82       	std	Z+2, r1	; 0x02
    1c62:	88 ee       	ldi	r24, 0xE8	; 232
    1c64:	93 e0       	ldi	r25, 0x03	; 3
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	84 83       	std	Z+4, r24	; 0x04
    1c6c:	95 83       	std	Z+5, r25	; 0x05
    1c6e:	a6 83       	std	Z+6, r26	; 0x06
    1c70:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c72:	82 e4       	ldi	r24, 0x42	; 66
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	85 ed       	ldi	r24, 0xD5	; 213
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	95 87       	std	Z+13, r25	; 0x0d
    1c80:	84 87       	std	Z+12, r24	; 0x0c
    1c82:	84 ed       	ldi	r24, 0xD4	; 212
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	97 87       	std	Z+15, r25	; 0x0f
    1c88:	86 87       	std	Z+14, r24	; 0x0e
    1c8a:	80 ed       	ldi	r24, 0xD0	; 208
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	91 8b       	std	Z+17, r25	; 0x11
    1c90:	80 8b       	std	Z+16, r24	; 0x10
    1c92:	81 ed       	ldi	r24, 0xD1	; 209
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	93 8b       	std	Z+19, r25	; 0x13
    1c98:	82 8b       	std	Z+18, r24	; 0x12
    1c9a:	82 ed       	ldi	r24, 0xD2	; 210
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	95 8b       	std	Z+21, r25	; 0x15
    1ca0:	84 8b       	std	Z+20, r24	; 0x14
    1ca2:	86 ed       	ldi	r24, 0xD6	; 214
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	97 8b       	std	Z+23, r25	; 0x17
    1ca8:	86 8b       	std	Z+22, r24	; 0x16
    1caa:	11 8e       	std	Z+25, r1	; 0x19
    1cac:	12 8e       	std	Z+26, r1	; 0x1a
    1cae:	13 8e       	std	Z+27, r1	; 0x1b
    1cb0:	14 8e       	std	Z+28, r1	; 0x1c
    1cb2:	08 95       	ret

00001cb4 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    1cb4:	1f 92       	push	r1
    1cb6:	0f 92       	push	r0
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	0f 92       	push	r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	0b b6       	in	r0, 0x3b	; 59
    1cc0:	0f 92       	push	r0
    1cc2:	2f 93       	push	r18
    1cc4:	8f 93       	push	r24
    1cc6:	9f 93       	push	r25
    1cc8:	af 93       	push	r26
    1cca:	bf 93       	push	r27
    1ccc:	ef 93       	push	r30
    1cce:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1cd0:	e0 91 b1 05 	lds	r30, 0x05B1
    1cd4:	f0 91 b2 05 	lds	r31, 0x05B2
    1cd8:	80 81       	ld	r24, Z
    1cda:	82 fd       	sbrc	r24, 2
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1cde:	e1 ea       	ldi	r30, 0xA1	; 161
    1ce0:	f5 e0       	ldi	r31, 0x05	; 5
    1ce2:	a6 89       	ldd	r26, Z+22	; 0x16
    1ce4:	b7 89       	ldd	r27, Z+23	; 0x17
    1ce6:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1ce8:	81 8d       	ldd	r24, Z+25	; 0x19
    1cea:	8f 5f       	subi	r24, 0xFF	; 255
    1cec:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1cee:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cf0:	89 17       	cp	r24, r25
    1cf2:	71 f0       	breq	.+28     	; 0x1d10 <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1cf4:	df 01       	movw	r26, r30
    1cf6:	e1 8d       	ldd	r30, Z+25	; 0x19
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	ef 55       	subi	r30, 0x5F	; 95
    1cfc:	fa 4f       	sbci	r31, 0xFA	; 250
    1cfe:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1d00:	59 96       	adiw	r26, 0x19	; 25
    1d02:	8c 93       	st	X, r24
    1d04:	05 c0       	rjmp	.+10     	; 0x1d10 <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1d06:	e0 91 b7 05 	lds	r30, 0x05B7
    1d0a:	f0 91 b8 05 	lds	r31, 0x05B8
    1d0e:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    1d10:	ff 91       	pop	r31
    1d12:	ef 91       	pop	r30
    1d14:	bf 91       	pop	r27
    1d16:	af 91       	pop	r26
    1d18:	9f 91       	pop	r25
    1d1a:	8f 91       	pop	r24
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0b be       	out	0x3b, r0	; 59
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <__vector_55>:

ISR(USART3_UDRE_vect)
{
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	0b b6       	in	r0, 0x3b	; 59
    1d38:	0f 92       	push	r0
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    1d52:	81 ea       	ldi	r24, 0xA1	; 161
    1d54:	95 e0       	ldi	r25, 0x05	; 5
    1d56:	db dc       	rcall	.-1610   	; 0x170e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1d58:	ff 91       	pop	r31
    1d5a:	ef 91       	pop	r30
    1d5c:	bf 91       	pop	r27
    1d5e:	af 91       	pop	r26
    1d60:	9f 91       	pop	r25
    1d62:	8f 91       	pop	r24
    1d64:	7f 91       	pop	r23
    1d66:	6f 91       	pop	r22
    1d68:	5f 91       	pop	r21
    1d6a:	4f 91       	pop	r20
    1d6c:	3f 91       	pop	r19
    1d6e:	2f 91       	pop	r18
    1d70:	0f 90       	pop	r0
    1d72:	0b be       	out	0x3b, r0	; 59
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    1d7e:	81 ea       	ldi	r24, 0xA1	; 161
    1d80:	95 e0       	ldi	r25, 0x05	; 5
    1d82:	66 dc       	rcall	.-1844   	; 0x1650 <_ZN14HardwareSerial9availableEv>
    1d84:	21 e0       	ldi	r18, 0x01	; 1
    1d86:	89 2b       	or	r24, r25
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <_Z17Serial3_availablev+0xe>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
}
    1d8c:	82 2f       	mov	r24, r18
    1d8e:	08 95       	ret

00001d90 <_GLOBAL__sub_I___vector_54>:
    1d90:	e1 ea       	ldi	r30, 0xA1	; 161
    1d92:	f5 e0       	ldi	r31, 0x05	; 5
    1d94:	13 82       	std	Z+3, r1	; 0x03
    1d96:	12 82       	std	Z+2, r1	; 0x02
    1d98:	88 ee       	ldi	r24, 0xE8	; 232
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	84 83       	std	Z+4, r24	; 0x04
    1da2:	95 83       	std	Z+5, r25	; 0x05
    1da4:	a6 83       	std	Z+6, r26	; 0x06
    1da6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1da8:	82 e4       	ldi	r24, 0x42	; 66
    1daa:	92 e0       	ldi	r25, 0x02	; 2
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	85 e3       	ldi	r24, 0x35	; 53
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	95 87       	std	Z+13, r25	; 0x0d
    1db6:	84 87       	std	Z+12, r24	; 0x0c
    1db8:	84 e3       	ldi	r24, 0x34	; 52
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	97 87       	std	Z+15, r25	; 0x0f
    1dbe:	86 87       	std	Z+14, r24	; 0x0e
    1dc0:	80 e3       	ldi	r24, 0x30	; 48
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	91 8b       	std	Z+17, r25	; 0x11
    1dc6:	80 8b       	std	Z+16, r24	; 0x10
    1dc8:	81 e3       	ldi	r24, 0x31	; 49
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	93 8b       	std	Z+19, r25	; 0x13
    1dce:	82 8b       	std	Z+18, r24	; 0x12
    1dd0:	82 e3       	ldi	r24, 0x32	; 50
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	95 8b       	std	Z+21, r25	; 0x15
    1dd6:	84 8b       	std	Z+20, r24	; 0x14
    1dd8:	86 e3       	ldi	r24, 0x36	; 54
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	97 8b       	std	Z+23, r25	; 0x17
    1dde:	86 8b       	std	Z+22, r24	; 0x16
    1de0:	11 8e       	std	Z+25, r1	; 0x19
    1de2:	12 8e       	std	Z+26, r1	; 0x1a
    1de4:	13 8e       	std	Z+27, r1	; 0x1b
    1de6:	14 8e       	std	Z+28, r1	; 0x1c
    1de8:	08 95       	ret

00001dea <_ZN8HMC5883LC1Ev>:

#include "HMC5883L.h"

HMC5883L::HMC5883L()
{
  m_Scale = 1;
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	60 e8       	ldi	r22, 0x80	; 128
    1df0:	7f e3       	ldi	r23, 0x3F	; 63
    1df2:	fc 01       	movw	r30, r24
    1df4:	41 83       	std	Z+1, r20	; 0x01
    1df6:	52 83       	std	Z+2, r21	; 0x02
    1df8:	63 83       	std	Z+3, r22	; 0x03
    1dfa:	74 83       	std	Z+4, r23	; 0x04
    1dfc:	08 95       	ret

00001dfe <_ZN8HMC5883L5WriteEii>:

	return IsConnected;
}

void HMC5883L::Write(int address, int data)
{
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	06 2f       	mov	r16, r22
    1e08:	14 2f       	mov	r17, r20
  Wire.beginTransmission(HMC5883L_Address);
    1e0a:	6e e1       	ldi	r22, 0x1E	; 30
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	8e ec       	ldi	r24, 0xCE	; 206
    1e10:	96 e0       	ldi	r25, 0x06	; 6
    1e12:	0e 94 05 19 	call	0x320a	; 0x320a <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1e16:	ce ec       	ldi	r28, 0xCE	; 206
    1e18:	d6 e0       	ldi	r29, 0x06	; 6
    1e1a:	e8 81       	ld	r30, Y
    1e1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e1e:	01 90       	ld	r0, Z+
    1e20:	f0 81       	ld	r31, Z
    1e22:	e0 2d       	mov	r30, r0
    1e24:	60 2f       	mov	r22, r16
    1e26:	ce 01       	movw	r24, r28
    1e28:	19 95       	eicall
    1e2a:	e8 81       	ld	r30, Y
    1e2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2e:	01 90       	ld	r0, Z+
    1e30:	f0 81       	ld	r31, Z
    1e32:	e0 2d       	mov	r30, r0
    1e34:	61 2f       	mov	r22, r17
    1e36:	ce 01       	movw	r24, r28
    1e38:	19 95       	eicall
  write_I2C(address);
  write_I2C(data);
  Wire.endTransmission();
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <_ZN8HMC5883L8SetScaleEf>:
  scaled.YAxis = raw.YAxis * m_Scale;
  return scaled;
}

int HMC5883L::SetScale(float gauss)
{
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	ec 01       	movw	r28, r24
    1e58:	6a 01       	movw	r12, r20
    1e5a:	7b 01       	movw	r14, r22
	uint8_t regValue = 0x00;
	if(gauss == 0.88)
    1e5c:	2e ea       	ldi	r18, 0xAE	; 174
    1e5e:	37 e4       	ldi	r19, 0x47	; 71
    1e60:	41 e6       	ldi	r20, 0x61	; 97
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	c7 01       	movw	r24, r14
    1e66:	b6 01       	movw	r22, r12
    1e68:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <_ZN8HMC5883L8SetScaleEf+0x3a>
	{
		regValue = 0x00;
		m_Scale = 0.73;
    1e70:	88 e4       	ldi	r24, 0x48	; 72
    1e72:	91 ee       	ldi	r25, 0xE1	; 225
    1e74:	aa e3       	ldi	r26, 0x3A	; 58
    1e76:	bf e3       	ldi	r27, 0x3F	; 63
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	ab 83       	std	Y+3, r26	; 0x03
    1e7e:	bc 83       	std	Y+4, r27	; 0x04
int HMC5883L::SetScale(float gauss)
{
	uint8_t regValue = 0x00;
	if(gauss == 0.88)
	{
		regValue = 0x00;
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	8f c0       	rjmp	.+286    	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 0.73;
	}
	else if(gauss == 1.3)
    1e84:	26 e6       	ldi	r18, 0x66	; 102
    1e86:	36 e6       	ldi	r19, 0x66	; 102
    1e88:	46 ea       	ldi	r20, 0xA6	; 166
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	c7 01       	movw	r24, r14
    1e8e:	b6 01       	movw	r22, r12
    1e90:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1e94:	81 11       	cpse	r24, r1
    1e96:	0a c0       	rjmp	.+20     	; 0x1eac <_ZN8HMC5883L8SetScaleEf+0x62>
	{
		regValue = 0x01;
		m_Scale = 0.92;
    1e98:	8f e1       	ldi	r24, 0x1F	; 31
    1e9a:	95 e8       	ldi	r25, 0x85	; 133
    1e9c:	ab e6       	ldi	r26, 0x6B	; 107
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	ab 83       	std	Y+3, r26	; 0x03
    1ea6:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x00;
		m_Scale = 0.73;
	}
	else if(gauss == 1.3)
	{
		regValue = 0x01;
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	7b c0       	rjmp	.+246    	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 0.92;
	}
	else if(gauss == 1.9)
    1eac:	23 e3       	ldi	r18, 0x33	; 51
    1eae:	33 e3       	ldi	r19, 0x33	; 51
    1eb0:	43 ef       	ldi	r20, 0xF3	; 243
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	c7 01       	movw	r24, r14
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	0a c0       	rjmp	.+20     	; 0x1ed4 <_ZN8HMC5883L8SetScaleEf+0x8a>
	{
		regValue = 0x02;
		m_Scale = 1.22;
    1ec0:	86 ef       	ldi	r24, 0xF6	; 246
    1ec2:	98 e2       	ldi	r25, 0x28	; 40
    1ec4:	ac e9       	ldi	r26, 0x9C	; 156
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	ab 83       	std	Y+3, r26	; 0x03
    1ece:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x01;
		m_Scale = 0.92;
	}
	else if(gauss == 1.9)
	{
		regValue = 0x02;
    1ed0:	42 e0       	ldi	r20, 0x02	; 2
    1ed2:	67 c0       	rjmp	.+206    	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 1.22;
	}
	else if(gauss == 2.5)
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	50 e4       	ldi	r21, 0x40	; 64
    1edc:	c7 01       	movw	r24, r14
    1ede:	b6 01       	movw	r22, r12
    1ee0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	0a c0       	rjmp	.+20     	; 0x1efc <_ZN8HMC5883L8SetScaleEf+0xb2>
	{
		regValue = 0x03;
		m_Scale = 1.52;
    1ee8:	8c e5       	ldi	r24, 0x5C	; 92
    1eea:	9f e8       	ldi	r25, 0x8F	; 143
    1eec:	a2 ec       	ldi	r26, 0xC2	; 194
    1eee:	bf e3       	ldi	r27, 0x3F	; 63
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	ab 83       	std	Y+3, r26	; 0x03
    1ef6:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x02;
		m_Scale = 1.22;
	}
	else if(gauss == 2.5)
	{
		regValue = 0x03;
    1ef8:	43 e0       	ldi	r20, 0x03	; 3
    1efa:	53 c0       	rjmp	.+166    	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 1.52;
	}
	else if(gauss == 4.0)
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	50 e4       	ldi	r21, 0x40	; 64
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	0a c0       	rjmp	.+20     	; 0x1f24 <_ZN8HMC5883L8SetScaleEf+0xda>
	{
		regValue = 0x04;
		m_Scale = 2.27;
    1f10:	8e ea       	ldi	r24, 0xAE	; 174
    1f12:	97 e4       	ldi	r25, 0x47	; 71
    1f14:	a1 e1       	ldi	r26, 0x11	; 17
    1f16:	b0 e4       	ldi	r27, 0x40	; 64
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	ab 83       	std	Y+3, r26	; 0x03
    1f1e:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x03;
		m_Scale = 1.52;
	}
	else if(gauss == 4.0)
	{
		regValue = 0x04;
    1f20:	44 e0       	ldi	r20, 0x04	; 4
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 2.27;
	}
	else if(gauss == 4.7)
    1f24:	26 e6       	ldi	r18, 0x66	; 102
    1f26:	36 e6       	ldi	r19, 0x66	; 102
    1f28:	46 e9       	ldi	r20, 0x96	; 150
    1f2a:	50 e4       	ldi	r21, 0x40	; 64
    1f2c:	c7 01       	movw	r24, r14
    1f2e:	b6 01       	movw	r22, r12
    1f30:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1f34:	81 11       	cpse	r24, r1
    1f36:	0a c0       	rjmp	.+20     	; 0x1f4c <_ZN8HMC5883L8SetScaleEf+0x102>
	{
		regValue = 0x05;
		m_Scale = 2.56;
    1f38:	8a e0       	ldi	r24, 0x0A	; 10
    1f3a:	97 ed       	ldi	r25, 0xD7	; 215
    1f3c:	a3 e2       	ldi	r26, 0x23	; 35
    1f3e:	b0 e4       	ldi	r27, 0x40	; 64
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	ab 83       	std	Y+3, r26	; 0x03
    1f46:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x04;
		m_Scale = 2.27;
	}
	else if(gauss == 4.7)
	{
		regValue = 0x05;
    1f48:	45 e0       	ldi	r20, 0x05	; 5
    1f4a:	2b c0       	rjmp	.+86     	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 2.56;
	}
	else if(gauss == 5.6)
    1f4c:	23 e3       	ldi	r18, 0x33	; 51
    1f4e:	33 e3       	ldi	r19, 0x33	; 51
    1f50:	43 eb       	ldi	r20, 0xB3	; 179
    1f52:	50 e4       	ldi	r21, 0x40	; 64
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	0a c0       	rjmp	.+20     	; 0x1f74 <_ZN8HMC5883L8SetScaleEf+0x12a>
	{
		regValue = 0x06;
		m_Scale = 3.03;
    1f60:	85 e8       	ldi	r24, 0x85	; 133
    1f62:	9b ee       	ldi	r25, 0xEB	; 235
    1f64:	a1 e4       	ldi	r26, 0x41	; 65
    1f66:	b0 e4       	ldi	r27, 0x40	; 64
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	ab 83       	std	Y+3, r26	; 0x03
    1f6e:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x05;
		m_Scale = 2.56;
	}
	else if(gauss == 5.6)
	{
		regValue = 0x06;
    1f70:	46 e0       	ldi	r20, 0x06	; 6
    1f72:	17 c0       	rjmp	.+46     	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 3.03;
	}
	else if(gauss == 8.1)
    1f74:	2a e9       	ldi	r18, 0x9A	; 154
    1f76:	39 e9       	ldi	r19, 0x99	; 153
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	c7 01       	movw	r24, r14
    1f7e:	b6 01       	movw	r22, r12
    1f80:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    1f84:	81 11       	cpse	r24, r1
    1f86:	0a c0       	rjmp	.+20     	; 0x1f9c <_ZN8HMC5883L8SetScaleEf+0x152>
	{
		regValue = 0x07;
		m_Scale = 4.35;
    1f88:	83 e3       	ldi	r24, 0x33	; 51
    1f8a:	93 e3       	ldi	r25, 0x33	; 51
    1f8c:	ab e8       	ldi	r26, 0x8B	; 139
    1f8e:	b0 e4       	ldi	r27, 0x40	; 64
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	ab 83       	std	Y+3, r26	; 0x03
    1f96:	bc 83       	std	Y+4, r27	; 0x04
		regValue = 0x06;
		m_Scale = 3.03;
	}
	else if(gauss == 8.1)
	{
		regValue = 0x07;
    1f98:	47 e0       	ldi	r20, 0x07	; 7
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <_ZN8HMC5883L8SetScaleEf+0x158>
		m_Scale = 4.35;
	}
	else
		return ErrorCode_1_Num;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	08 c0       	rjmp	.+16     	; 0x1fb2 <_ZN8HMC5883L8SetScaleEf+0x168>
	
	// Setting is in the top 3 bits of the register.
	regValue = regValue << 5;
    1fa2:	42 95       	swap	r20
    1fa4:	44 0f       	add	r20, r20
    1fa6:	40 7e       	andi	r20, 0xE0	; 224
	Write(ConfigurationRegisterB, regValue);
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	ce 01       	movw	r24, r28
    1fb0:	26 df       	rcall	.-436    	; 0x1dfe <_ZN8HMC5883L5WriteEii>
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	08 95       	ret

00001fc0 <_ZN8HMC5883L18SetMeasurementModeEh>:

int HMC5883L::SetMeasurementMode(uint8_t mode)
{
	Write(ModeRegister, mode);
    1fc0:	46 2f       	mov	r20, r22
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	1a cf       	rjmp	.-460    	; 0x1dfe <_ZN8HMC5883L5WriteEii>
}
    1fca:	08 95       	ret

00001fcc <_ZN8HMC5883L12GetErrorTextEi>:
{
	if(ErrorCode_1_Num == 1)
		return ErrorCode_1;
	
	return "Error not defined.";
    1fcc:	8e e4       	ldi	r24, 0x4E	; 78
    1fce:	92 e0       	ldi	r25, 0x02	; 2
    1fd0:	08 95       	ret

00001fd2 <_ZN8HMC5883L4ReadEii>:
  write_I2C(data);
  Wire.endTransmission();
}

uint8_t* HMC5883L::Read(int address, int length)
{
    1fd2:	7f 92       	push	r7
    1fd4:	8f 92       	push	r8
    1fd6:	9f 92       	push	r9
    1fd8:	af 92       	push	r10
    1fda:	bf 92       	push	r11
    1fdc:	cf 92       	push	r12
    1fde:	df 92       	push	r13
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	16 2f       	mov	r17, r22
    1ff2:	7a 01       	movw	r14, r20
	  }
  }
  Wire.endTransmission();

  return buffer;
}
    1ff4:	8d b6       	in	r8, 0x3d	; 61
    1ff6:	9e b6       	in	r9, 0x3e	; 62
  Wire.endTransmission();
}

uint8_t* HMC5883L::Read(int address, int length)
{
  Wire.beginTransmission(HMC5883L_Address);
    1ff8:	6e e1       	ldi	r22, 0x1E	; 30
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	8e ec       	ldi	r24, 0xCE	; 206
    1ffe:	96 e0       	ldi	r25, 0x06	; 6
    2000:	0e 94 05 19 	call	0x320a	; 0x320a <_ZN7TwoWire17beginTransmissionEi>
    2004:	e0 91 ce 06 	lds	r30, 0x06CE
    2008:	f0 91 cf 06 	lds	r31, 0x06CF
    200c:	01 90       	ld	r0, Z+
    200e:	f0 81       	ld	r31, Z
    2010:	e0 2d       	mov	r30, r0
    2012:	61 2f       	mov	r22, r17
    2014:	8e ec       	ldi	r24, 0xCE	; 206
    2016:	96 e0       	ldi	r25, 0x06	; 6
    2018:	19 95       	eicall
  write_I2C(address);
  Wire.endTransmission();
    201a:	8e ec       	ldi	r24, 0xCE	; 206
    201c:	96 e0       	ldi	r25, 0x06	; 6
    201e:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(HMC5883L_Address);
    2022:	6e e1       	ldi	r22, 0x1E	; 30
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	8e ec       	ldi	r24, 0xCE	; 206
    2028:	96 e0       	ldi	r25, 0x06	; 6
    202a:	0e 94 05 19 	call	0x320a	; 0x320a <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(HMC5883L_Address, length);
    202e:	a7 01       	movw	r20, r14
    2030:	6e e1       	ldi	r22, 0x1E	; 30
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	8e ec       	ldi	r24, 0xCE	; 206
    2036:	96 e0       	ldi	r25, 0x06	; 6
    2038:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN7TwoWire11requestFromEii>

  uint8_t buffer[length];
    203c:	8d b7       	in	r24, 0x3d	; 61
    203e:	9e b7       	in	r25, 0x3e	; 62
    2040:	8e 19       	sub	r24, r14
    2042:	9f 09       	sbc	r25, r15
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	9e bf       	out	0x3e, r25	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	8d bf       	out	0x3d, r24	; 61
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	6c 01       	movw	r12, r24
    2052:	5c 01       	movw	r10, r24
  if(Wire.available() == length)
    2054:	8e ec       	ldi	r24, 0xCE	; 206
    2056:	96 e0       	ldi	r25, 0x06	; 6
    2058:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN7TwoWire9availableEv>
    205c:	e8 16       	cp	r14, r24
    205e:	f9 06       	cpc	r15, r25
    2060:	a1 f4       	brne	.+40     	; 0x208a <_ZN8HMC5883L4ReadEii+0xb8>
  {
	  for(uint8_t i = 0; i < length; i++)
    2062:	1e 14       	cp	r1, r14
    2064:	1f 04       	cpc	r1, r15
    2066:	8c f4       	brge	.+34     	; 0x208a <_ZN8HMC5883L4ReadEii+0xb8>
    2068:	00 e0       	ldi	r16, 0x00	; 0
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	71 2c       	mov	r7, r1
	  {
		  buffer[i] = read_I2C();
    206e:	8e ec       	ldi	r24, 0xCE	; 206
    2070:	96 e0       	ldi	r25, 0x06	; 6
    2072:	0e 94 4c 18 	call	0x3098	; 0x3098 <_ZN7TwoWire4readEv>
    2076:	f5 01       	movw	r30, r10
    2078:	e0 0f       	add	r30, r16
    207a:	f1 1f       	adc	r31, r17
    207c:	80 83       	st	Z, r24
  Wire.requestFrom(HMC5883L_Address, length);

  uint8_t buffer[length];
  if(Wire.available() == length)
  {
	  for(uint8_t i = 0; i < length; i++)
    207e:	73 94       	inc	r7
    2080:	07 2d       	mov	r16, r7
    2082:	10 e0       	ldi	r17, 0x00	; 0
    2084:	0e 15       	cp	r16, r14
    2086:	1f 05       	cpc	r17, r15
    2088:	94 f3       	brlt	.-28     	; 0x206e <_ZN8HMC5883L4ReadEii+0x9c>
	  {
		  buffer[i] = read_I2C();
	  }
  }
  Wire.endTransmission();
    208a:	8e ec       	ldi	r24, 0xCE	; 206
    208c:	96 e0       	ldi	r25, 0x06	; 6
    208e:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN7TwoWire15endTransmissionEv>

  return buffer;
}
    2092:	c6 01       	movw	r24, r12
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	9e be       	out	0x3e, r9	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	8d be       	out	0x3d, r8	; 61
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	bf 90       	pop	r11
    20b0:	af 90       	pop	r10
    20b2:	9f 90       	pop	r9
    20b4:	8f 90       	pop	r8
    20b6:	7f 90       	pop	r7
    20b8:	08 95       	ret

000020ba <_ZN8HMC5883L11ReadRawAxisEv>:
{
  m_Scale = 1;
}

MagnetometerRaw HMC5883L::ReadRawAxis()
{
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <_ZN8HMC5883L11ReadRawAxisEv+0x6>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <_ZN8HMC5883L11ReadRawAxisEv+0x8>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
  uint8_t* buffer = Read(DataRegisterBegin, 6);
    20c6:	46 e0       	ldi	r20, 0x06	; 6
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	63 e0       	ldi	r22, 0x03	; 3
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	81 df       	rcall	.-254    	; 0x1fd2 <_ZN8HMC5883L4ReadEii>
    20d0:	fc 01       	movw	r30, r24
  MagnetometerRaw raw = MagnetometerRaw();
  raw.XAxis = (buffer[0] << 8) | buffer[1];
  raw.ZAxis = (buffer[2] << 8) | buffer[3];
    20d2:	62 81       	ldd	r22, Z+2	; 0x02
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	76 2f       	mov	r23, r22
    20d8:	66 27       	eor	r22, r22
    20da:	83 81       	ldd	r24, Z+3	; 0x03
    20dc:	68 2b       	or	r22, r24
  raw.YAxis = (buffer[4] << 8) | buffer[5];
    20de:	44 81       	ldd	r20, Z+4	; 0x04
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	54 2f       	mov	r21, r20
    20e4:	44 27       	eor	r20, r20
    20e6:	85 81       	ldd	r24, Z+5	; 0x05
    20e8:	48 2b       	or	r20, r24

MagnetometerRaw HMC5883L::ReadRawAxis()
{
  uint8_t* buffer = Read(DataRegisterBegin, 6);
  MagnetometerRaw raw = MagnetometerRaw();
  raw.XAxis = (buffer[0] << 8) | buffer[1];
    20ea:	20 81       	ld	r18, Z
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	32 2f       	mov	r19, r18
    20f0:	22 27       	eor	r18, r18
    20f2:	81 81       	ldd	r24, Z+1	; 0x01
    20f4:	28 2b       	or	r18, r24
  raw.ZAxis = (buffer[2] << 8) | buffer[3];
  raw.YAxis = (buffer[4] << 8) | buffer[5];
  return raw;
    20f6:	3a 83       	std	Y+2, r19	; 0x02
    20f8:	29 83       	std	Y+1, r18	; 0x01
    20fa:	5c 83       	std	Y+4, r21	; 0x04
    20fc:	4b 83       	std	Y+3, r20	; 0x03
    20fe:	7e 83       	std	Y+6, r23	; 0x06
    2100:	6d 83       	std	Y+5, r22	; 0x05
    2102:	3a 81       	ldd	r19, Y+2	; 0x02
    2104:	5c 81       	ldd	r21, Y+4	; 0x04
    2106:	7e 81       	ldd	r23, Y+6	; 0x06
}
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	26 96       	adiw	r28, 0x06	; 6
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <_ZN8HMC5883L14ReadScaledAxisEv>:

MagnetometerScaled HMC5883L::ReadScaledAxis()
{
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	00 d0       	rcall	.+0      	; 0x2130 <_ZN8HMC5883L14ReadScaledAxisEv+0x12>
    2130:	00 d0       	rcall	.+0      	; 0x2132 <_ZN8HMC5883L14ReadScaledAxisEv+0x14>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8c 01       	movw	r16, r24
    2138:	7b 01       	movw	r14, r22
  MagnetometerRaw raw = ReadRawAxis();
    213a:	cb 01       	movw	r24, r22
    213c:	be df       	rcall	.-132    	; 0x20ba <_ZN8HMC5883L11ReadRawAxisEv>
    213e:	29 83       	std	Y+1, r18	; 0x01
    2140:	3a 83       	std	Y+2, r19	; 0x02
    2142:	4b 83       	std	Y+3, r20	; 0x03
    2144:	5c 83       	std	Y+4, r21	; 0x04
    2146:	6d 83       	std	Y+5, r22	; 0x05
    2148:	7e 83       	std	Y+6, r23	; 0x06
  MagnetometerScaled scaled = MagnetometerScaled();
  scaled.XAxis = raw.XAxis * m_Scale;
    214a:	f7 01       	movw	r30, r14
    214c:	c1 80       	ldd	r12, Z+1	; 0x01
    214e:	d2 80       	ldd	r13, Z+2	; 0x02
    2150:	e3 80       	ldd	r14, Z+3	; 0x03
    2152:	f4 80       	ldd	r15, Z+4	; 0x04
    2154:	69 81       	ldd	r22, Y+1	; 0x01
    2156:	7a 81       	ldd	r23, Y+2	; 0x02
    2158:	07 2e       	mov	r0, r23
    215a:	00 0c       	add	r0, r0
    215c:	88 0b       	sbc	r24, r24
    215e:	99 0b       	sbc	r25, r25
    2160:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    2164:	a7 01       	movw	r20, r14
    2166:	96 01       	movw	r18, r12
    2168:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    216c:	f8 01       	movw	r30, r16
    216e:	60 83       	st	Z, r22
    2170:	71 83       	std	Z+1, r23	; 0x01
    2172:	82 83       	std	Z+2, r24	; 0x02
    2174:	93 83       	std	Z+3, r25	; 0x03
  scaled.ZAxis = raw.ZAxis * m_Scale;
    2176:	6d 81       	ldd	r22, Y+5	; 0x05
    2178:	7e 81       	ldd	r23, Y+6	; 0x06
    217a:	07 2e       	mov	r0, r23
    217c:	00 0c       	add	r0, r0
    217e:	88 0b       	sbc	r24, r24
    2180:	99 0b       	sbc	r25, r25
    2182:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	c7 01       	movw	r24, r14
    218c:	b6 01       	movw	r22, r12
    218e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    2192:	f8 01       	movw	r30, r16
    2194:	60 87       	std	Z+8, r22	; 0x08
    2196:	71 87       	std	Z+9, r23	; 0x09
    2198:	82 87       	std	Z+10, r24	; 0x0a
    219a:	93 87       	std	Z+11, r25	; 0x0b
  scaled.YAxis = raw.YAxis * m_Scale;
    219c:	6b 81       	ldd	r22, Y+3	; 0x03
    219e:	7c 81       	ldd	r23, Y+4	; 0x04
    21a0:	07 2e       	mov	r0, r23
    21a2:	00 0c       	add	r0, r0
    21a4:	88 0b       	sbc	r24, r24
    21a6:	99 0b       	sbc	r25, r25
    21a8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    21ac:	9b 01       	movw	r18, r22
    21ae:	ac 01       	movw	r20, r24
    21b0:	c7 01       	movw	r24, r14
    21b2:	b6 01       	movw	r22, r12
    21b4:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    21b8:	f8 01       	movw	r30, r16
    21ba:	64 83       	std	Z+4, r22	; 0x04
    21bc:	75 83       	std	Z+5, r23	; 0x05
    21be:	86 83       	std	Z+6, r24	; 0x06
    21c0:	97 83       	std	Z+7, r25	; 0x07
  return scaled;
}
    21c2:	c8 01       	movw	r24, r16
    21c4:	26 96       	adiw	r28, 0x06	; 6
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	08 95       	ret

000021e2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21e2:	08 95       	ret

000021e4 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    21e4:	8f 92       	push	r8
    21e6:	9f 92       	push	r9
    21e8:	af 92       	push	r10
    21ea:	bf 92       	push	r11
    21ec:	cf 92       	push	r12
    21ee:	df 92       	push	r13
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	5c 01       	movw	r10, r24
    21fe:	7b 01       	movw	r14, r22
    2200:	4c 01       	movw	r8, r24
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	88 0e       	add	r8, r24
    2206:	91 1c       	adc	r9, r1
    2208:	65 01       	movw	r12, r10
    220a:	e5 e0       	ldi	r30, 0x05	; 5
    220c:	ce 0e       	add	r12, r30
    220e:	d1 1c       	adc	r13, r1
    2210:	00 e0       	ldi	r16, 0x00	; 0
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	f4 01       	movw	r30, r8
    2216:	61 91       	ld	r22, Z+
    2218:	4f 01       	movw	r8, r30
    221a:	4a e0       	ldi	r20, 0x0A	; 10
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	c7 01       	movw	r24, r14
    2220:	5f d1       	rcall	.+702    	; 0x24e0 <_ZN5Print5printEhi>
    2222:	ec 01       	movw	r28, r24
    2224:	6e e2       	ldi	r22, 0x2E	; 46
    2226:	c7 01       	movw	r24, r14
    2228:	78 d0       	rcall	.+240    	; 0x231a <_ZN5Print5printEc>
    222a:	8c 0f       	add	r24, r28
    222c:	9d 1f       	adc	r25, r29
    222e:	08 0f       	add	r16, r24
    2230:	19 1f       	adc	r17, r25
    2232:	8c 14       	cp	r8, r12
    2234:	9d 04       	cpc	r9, r13
    2236:	71 f7       	brne	.-36     	; 0x2214 <__stack+0x15>
    2238:	4a e0       	ldi	r20, 0x0A	; 10
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	f5 01       	movw	r30, r10
    223e:	65 81       	ldd	r22, Z+5	; 0x05
    2240:	c7 01       	movw	r24, r14
    2242:	4e d1       	rcall	.+668    	; 0x24e0 <_ZN5Print5printEhi>
    2244:	80 0f       	add	r24, r16
    2246:	91 1f       	adc	r25, r17
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	8f 90       	pop	r8
    2260:	08 95       	ret

00002262 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2262:	ee e3       	ldi	r30, 0x3E	; 62
    2264:	f6 e0       	ldi	r31, 0x06	; 6
    2266:	8f ea       	ldi	r24, 0xAF	; 175
    2268:	92 e0       	ldi	r25, 0x02	; 2
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    226e:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    2270:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    2272:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    2274:	15 82       	std	Z+5, r1	; 0x05
    2276:	08 95       	ret

00002278 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2278:	08 95       	ret

0000227a <main>:

int main(void)
{
	init();
    227a:	0e 94 ba 19 	call	0x3374	; 0x3374 <init>

	initVariant();
    227e:	fc df       	rcall	.-8      	; 0x2278 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2280:	0e 94 92 05 	call	0xb24	; 0xb24 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2284:	c6 e5       	ldi	r28, 0x56	; 86
    2286:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
    2288:	0e 94 bd 05 	call	0xb7a	; 0xb7a <loop>
		if (serialEventRun) serialEventRun();
    228c:	20 97       	sbiw	r28, 0x00	; 0
    228e:	e1 f3       	breq	.-8      	; 0x2288 <main+0xe>
    2290:	0d da       	rcall	.-3046   	; 0x16ac <_Z14serialEventRunv>
    2292:	fa cf       	rjmp	.-12     	; 0x2288 <main+0xe>

00002294 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	41 15       	cp	r20, r1
    22a6:	51 05       	cpc	r21, r1
    22a8:	b1 f0       	breq	.+44     	; 0x22d6 <_ZN5Print5writeEPKhj+0x42>
    22aa:	8c 01       	movw	r16, r24
    22ac:	e6 2e       	mov	r14, r22
    22ae:	f7 2e       	mov	r15, r23
    22b0:	ea 01       	movw	r28, r20
    22b2:	c1 2c       	mov	r12, r1
    22b4:	d1 2c       	mov	r13, r1
    22b6:	d7 01       	movw	r26, r14
    22b8:	6d 91       	ld	r22, X+
    22ba:	7d 01       	movw	r14, r26
    22bc:	d8 01       	movw	r26, r16
    22be:	ed 91       	ld	r30, X+
    22c0:	fc 91       	ld	r31, X
    22c2:	01 90       	ld	r0, Z+
    22c4:	f0 81       	ld	r31, Z
    22c6:	e0 2d       	mov	r30, r0
    22c8:	c8 01       	movw	r24, r16
    22ca:	19 95       	eicall
    22cc:	c8 0e       	add	r12, r24
    22ce:	d9 1e       	adc	r13, r25
    22d0:	21 97       	sbiw	r28, 0x01	; 1
    22d2:	89 f7       	brne	.-30     	; 0x22b6 <_ZN5Print5writeEPKhj+0x22>
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <_ZN5Print5writeEPKhj+0x46>
    22d6:	c1 2c       	mov	r12, r1
    22d8:	d1 2c       	mov	r13, r1
    22da:	c6 01       	movw	r24, r12
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	08 95       	ret

000022ee <_ZN5Print5printEPKc>:
    22ee:	61 15       	cp	r22, r1
    22f0:	71 05       	cpc	r23, r1
    22f2:	81 f0       	breq	.+32     	; 0x2314 <_ZN5Print5printEPKc+0x26>
    22f4:	fb 01       	movw	r30, r22
    22f6:	01 90       	ld	r0, Z+
    22f8:	00 20       	and	r0, r0
    22fa:	e9 f7       	brne	.-6      	; 0x22f6 <_ZN5Print5printEPKc+0x8>
    22fc:	31 97       	sbiw	r30, 0x01	; 1
    22fe:	af 01       	movw	r20, r30
    2300:	46 1b       	sub	r20, r22
    2302:	57 0b       	sbc	r21, r23
    2304:	dc 01       	movw	r26, r24
    2306:	ed 91       	ld	r30, X+
    2308:	fc 91       	ld	r31, X
    230a:	02 80       	ldd	r0, Z+2	; 0x02
    230c:	f3 81       	ldd	r31, Z+3	; 0x03
    230e:	e0 2d       	mov	r30, r0
    2310:	19 95       	eicall
    2312:	08 95       	ret
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	08 95       	ret

0000231a <_ZN5Print5printEc>:
    231a:	dc 01       	movw	r26, r24
    231c:	ed 91       	ld	r30, X+
    231e:	fc 91       	ld	r31, X
    2320:	01 90       	ld	r0, Z+
    2322:	f0 81       	ld	r31, Z
    2324:	e0 2d       	mov	r30, r0
    2326:	19 95       	eicall
    2328:	08 95       	ret

0000232a <_ZN5Print7printlnEv>:
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	ec 01       	movw	r28, r24
    2334:	6d e0       	ldi	r22, 0x0D	; 13
    2336:	f1 df       	rcall	.-30     	; 0x231a <_ZN5Print5printEc>
    2338:	8c 01       	movw	r16, r24
    233a:	6a e0       	ldi	r22, 0x0A	; 10
    233c:	ce 01       	movw	r24, r28
    233e:	ed df       	rcall	.-38     	; 0x231a <_ZN5Print5printEc>
    2340:	80 0f       	add	r24, r16
    2342:	91 1f       	adc	r25, r17
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	08 95       	ret

0000234e <_ZN5Print7printlnEPKc>:
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	ec 01       	movw	r28, r24
    2358:	ca df       	rcall	.-108    	; 0x22ee <_ZN5Print5printEPKc>
    235a:	8c 01       	movw	r16, r24
    235c:	ce 01       	movw	r24, r28
    235e:	e5 df       	rcall	.-54     	; 0x232a <_ZN5Print7printlnEv>
    2360:	80 0f       	add	r24, r16
    2362:	91 1f       	adc	r25, r17
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <_ZN5Print11printNumberEmh>:
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	9f 92       	push	r9
    2378:	af 92       	push	r10
    237a:	bf 92       	push	r11
    237c:	cf 92       	push	r12
    237e:	df 92       	push	r13
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	a1 97       	sbiw	r28, 0x21	; 33
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	5c 01       	movw	r10, r24
    239e:	6a 01       	movw	r12, r20
    23a0:	7b 01       	movw	r14, r22
    23a2:	92 2e       	mov	r9, r18
    23a4:	19 a2       	std	Y+33, r1	; 0x21
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	82 17       	cp	r24, r18
    23aa:	20 f0       	brcs	.+8      	; 0x23b4 <_ZN5Print11printNumberEmh+0x46>
    23ac:	0f 2e       	mov	r0, r31
    23ae:	fa e0       	ldi	r31, 0x0A	; 10
    23b0:	9f 2e       	mov	r9, r31
    23b2:	f0 2d       	mov	r31, r0
    23b4:	8e 01       	movw	r16, r28
    23b6:	0f 5d       	subi	r16, 0xDF	; 223
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	49 2c       	mov	r4, r9
    23bc:	51 2c       	mov	r5, r1
    23be:	61 2c       	mov	r6, r1
    23c0:	71 2c       	mov	r7, r1
    23c2:	c7 01       	movw	r24, r14
    23c4:	b6 01       	movw	r22, r12
    23c6:	a3 01       	movw	r20, r6
    23c8:	92 01       	movw	r18, r4
    23ca:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__udivmodsi4>
    23ce:	8c 2d       	mov	r24, r12
    23d0:	92 9e       	mul	r9, r18
    23d2:	80 19       	sub	r24, r0
    23d4:	11 24       	eor	r1, r1
    23d6:	01 50       	subi	r16, 0x01	; 1
    23d8:	11 09       	sbc	r17, r1
    23da:	8a 30       	cpi	r24, 0x0A	; 10
    23dc:	10 f4       	brcc	.+4      	; 0x23e2 <_ZN5Print11printNumberEmh+0x74>
    23de:	80 5d       	subi	r24, 0xD0	; 208
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <_ZN5Print11printNumberEmh+0x76>
    23e2:	89 5c       	subi	r24, 0xC9	; 201
    23e4:	d8 01       	movw	r26, r16
    23e6:	8c 93       	st	X, r24
    23e8:	c2 2e       	mov	r12, r18
    23ea:	d3 2e       	mov	r13, r19
    23ec:	e4 2e       	mov	r14, r20
    23ee:	f5 2e       	mov	r15, r21
    23f0:	c1 14       	cp	r12, r1
    23f2:	d1 04       	cpc	r13, r1
    23f4:	e1 04       	cpc	r14, r1
    23f6:	f1 04       	cpc	r15, r1
    23f8:	21 f7       	brne	.-56     	; 0x23c2 <_ZN5Print11printNumberEmh+0x54>
    23fa:	01 15       	cp	r16, r1
    23fc:	11 05       	cpc	r17, r1
    23fe:	91 f0       	breq	.+36     	; 0x2424 <_ZN5Print11printNumberEmh+0xb6>
    2400:	f8 01       	movw	r30, r16
    2402:	01 90       	ld	r0, Z+
    2404:	00 20       	and	r0, r0
    2406:	e9 f7       	brne	.-6      	; 0x2402 <_ZN5Print11printNumberEmh+0x94>
    2408:	31 97       	sbiw	r30, 0x01	; 1
    240a:	af 01       	movw	r20, r30
    240c:	40 1b       	sub	r20, r16
    240e:	51 0b       	sbc	r21, r17
    2410:	d5 01       	movw	r26, r10
    2412:	ed 91       	ld	r30, X+
    2414:	fc 91       	ld	r31, X
    2416:	02 80       	ldd	r0, Z+2	; 0x02
    2418:	f3 81       	ldd	r31, Z+3	; 0x03
    241a:	e0 2d       	mov	r30, r0
    241c:	b8 01       	movw	r22, r16
    241e:	c5 01       	movw	r24, r10
    2420:	19 95       	eicall
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <_ZN5Print11printNumberEmh+0xba>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a1 96       	adiw	r28, 0x21	; 33
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	7f 90       	pop	r7
    244c:	6f 90       	pop	r6
    244e:	5f 90       	pop	r5
    2450:	4f 90       	pop	r4
    2452:	08 95       	ret

00002454 <_ZN5Print5printEli>:
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	ec 01       	movw	r28, r24
    2466:	6a 01       	movw	r12, r20
    2468:	7b 01       	movw	r14, r22
    246a:	21 15       	cp	r18, r1
    246c:	31 05       	cpc	r19, r1
    246e:	41 f4       	brne	.+16     	; 0x2480 <_ZN5Print5printEli+0x2c>
    2470:	e8 81       	ld	r30, Y
    2472:	f9 81       	ldd	r31, Y+1	; 0x01
    2474:	01 90       	ld	r0, Z+
    2476:	f0 81       	ld	r31, Z
    2478:	e0 2d       	mov	r30, r0
    247a:	64 2f       	mov	r22, r20
    247c:	19 95       	eicall
    247e:	19 c0       	rjmp	.+50     	; 0x24b2 <_ZN5Print5printEli+0x5e>
    2480:	2a 30       	cpi	r18, 0x0A	; 10
    2482:	31 05       	cpc	r19, r1
    2484:	a9 f4       	brne	.+42     	; 0x24b0 <_ZN5Print5printEli+0x5c>
    2486:	77 23       	and	r23, r23
    2488:	84 f4       	brge	.+32     	; 0x24aa <_ZN5Print5printEli+0x56>
    248a:	6d e2       	ldi	r22, 0x2D	; 45
    248c:	46 df       	rcall	.-372    	; 0x231a <_ZN5Print5printEc>
    248e:	8c 01       	movw	r16, r24
    2490:	44 27       	eor	r20, r20
    2492:	55 27       	eor	r21, r21
    2494:	ba 01       	movw	r22, r20
    2496:	4c 19       	sub	r20, r12
    2498:	5d 09       	sbc	r21, r13
    249a:	6e 09       	sbc	r22, r14
    249c:	7f 09       	sbc	r23, r15
    249e:	2a e0       	ldi	r18, 0x0A	; 10
    24a0:	ce 01       	movw	r24, r28
    24a2:	65 df       	rcall	.-310    	; 0x236e <_ZN5Print11printNumberEmh>
    24a4:	80 0f       	add	r24, r16
    24a6:	91 1f       	adc	r25, r17
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <_ZN5Print5printEli+0x5e>
    24aa:	2a e0       	ldi	r18, 0x0A	; 10
    24ac:	60 df       	rcall	.-320    	; 0x236e <_ZN5Print11printNumberEmh>
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <_ZN5Print5printEli+0x5e>
    24b0:	5e df       	rcall	.-324    	; 0x236e <_ZN5Print11printNumberEmh>
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	df 90       	pop	r13
    24c0:	cf 90       	pop	r12
    24c2:	08 95       	ret

000024c4 <_ZN5Print5printEmi>:
    24c4:	21 15       	cp	r18, r1
    24c6:	31 05       	cpc	r19, r1
    24c8:	49 f4       	brne	.+18     	; 0x24dc <_ZN5Print5printEmi+0x18>
    24ca:	dc 01       	movw	r26, r24
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	01 90       	ld	r0, Z+
    24d2:	f0 81       	ld	r31, Z
    24d4:	e0 2d       	mov	r30, r0
    24d6:	64 2f       	mov	r22, r20
    24d8:	19 95       	eicall
    24da:	08 95       	ret
    24dc:	48 cf       	rjmp	.-368    	; 0x236e <_ZN5Print11printNumberEmh>
    24de:	08 95       	ret

000024e0 <_ZN5Print5printEhi>:
    24e0:	9a 01       	movw	r18, r20
    24e2:	46 2f       	mov	r20, r22
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	ec cf       	rjmp	.-40     	; 0x24c4 <_ZN5Print5printEmi>
    24ec:	08 95       	ret

000024ee <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    24ee:	4f 92       	push	r4
    24f0:	5f 92       	push	r5
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	00 d0       	rcall	.+0      	; 0x250e <_ZN5Print10printFloatEdh+0x20>
    250e:	1f 92       	push	r1
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	8c 01       	movw	r16, r24
    2516:	4a 01       	movw	r8, r20
    2518:	5b 01       	movw	r10, r22
    251a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    251c:	9a 01       	movw	r18, r20
    251e:	ab 01       	movw	r20, r22
    2520:	c5 01       	movw	r24, r10
    2522:	b4 01       	movw	r22, r8
    2524:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__unordsf2>
    2528:	88 23       	and	r24, r24
    252a:	29 f0       	breq	.+10     	; 0x2536 <_ZN5Print10printFloatEdh+0x48>
    252c:	61 eb       	ldi	r22, 0xB1	; 177
    252e:	72 e0       	ldi	r23, 0x02	; 2
    2530:	c8 01       	movw	r24, r16
    2532:	dd de       	rcall	.-582    	; 0x22ee <_ZN5Print5printEPKc>
    2534:	c6 c0       	rjmp	.+396    	; 0x26c2 <_ZN5Print10printFloatEdh+0x1d4>
  if (isinf(number)) return print("inf");
    2536:	75 01       	movw	r14, r10
    2538:	64 01       	movw	r12, r8
    253a:	e8 94       	clt
    253c:	f7 f8       	bld	r15, 7
    253e:	2f ef       	ldi	r18, 0xFF	; 255
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	5f e7       	ldi	r21, 0x7F	; 127
    2546:	c7 01       	movw	r24, r14
    2548:	b6 01       	movw	r22, r12
    254a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__unordsf2>
    254e:	81 11       	cpse	r24, r1
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <_ZN5Print10printFloatEdh+0x82>
    2552:	2f ef       	ldi	r18, 0xFF	; 255
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	5f e7       	ldi	r21, 0x7F	; 127
    255a:	c7 01       	movw	r24, r14
    255c:	b6 01       	movw	r22, r12
    255e:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    2562:	18 16       	cp	r1, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <_ZN5Print10printFloatEdh+0x82>
    2566:	65 eb       	ldi	r22, 0xB5	; 181
    2568:	72 e0       	ldi	r23, 0x02	; 2
    256a:	c8 01       	movw	r24, r16
    256c:	c0 de       	rcall	.-640    	; 0x22ee <_ZN5Print5printEPKc>
    256e:	a9 c0       	rjmp	.+338    	; 0x26c2 <_ZN5Print10printFloatEdh+0x1d4>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2570:	2f ef       	ldi	r18, 0xFF	; 255
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	5f e4       	ldi	r21, 0x4F	; 79
    2578:	c5 01       	movw	r24, r10
    257a:	b4 01       	movw	r22, r8
    257c:	0e 94 ef 1c 	call	0x39de	; 0x39de <__gesf2>
    2580:	18 16       	cp	r1, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <_ZN5Print10printFloatEdh+0xa0>
    2584:	69 eb       	ldi	r22, 0xB9	; 185
    2586:	72 e0       	ldi	r23, 0x02	; 2
    2588:	c8 01       	movw	r24, r16
    258a:	b1 de       	rcall	.-670    	; 0x22ee <_ZN5Print5printEPKc>
    258c:	9a c0       	rjmp	.+308    	; 0x26c2 <_ZN5Print10printFloatEdh+0x1d4>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    258e:	2f ef       	ldi	r18, 0xFF	; 255
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	5f ec       	ldi	r21, 0xCF	; 207
    2596:	c5 01       	movw	r24, r10
    2598:	b4 01       	movw	r22, r8
    259a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <_ZN5Print10printFloatEdh+0xbe>
    25a2:	69 eb       	ldi	r22, 0xB9	; 185
    25a4:	72 e0       	ldi	r23, 0x02	; 2
    25a6:	c8 01       	movw	r24, r16
    25a8:	a2 de       	rcall	.-700    	; 0x22ee <_ZN5Print5printEPKc>
    25aa:	8b c0       	rjmp	.+278    	; 0x26c2 <_ZN5Print10printFloatEdh+0x1d4>
  
  // Handle negative numbers
  if (number < 0.0)
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	a9 01       	movw	r20, r18
    25b2:	c5 01       	movw	r24, r10
    25b4:	b4 01       	movw	r22, r8
    25b6:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__cmpsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	4c f4       	brge	.+18     	; 0x25d0 <_ZN5Print10printFloatEdh+0xe2>
  {
     n += print('-');
    25be:	6d e2       	ldi	r22, 0x2D	; 45
    25c0:	c8 01       	movw	r24, r16
    25c2:	ab de       	rcall	.-682    	; 0x231a <_ZN5Print5printEc>
    25c4:	7c 01       	movw	r14, r24
     number = -number;
    25c6:	b7 fa       	bst	r11, 7
    25c8:	b0 94       	com	r11
    25ca:	b7 f8       	bld	r11, 7
    25cc:	b0 94       	com	r11
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <_ZN5Print10printFloatEdh+0xe6>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    25d0:	e1 2c       	mov	r14, r1
    25d2:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    25d4:	77 20       	and	r7, r7
    25d6:	09 f4       	brne	.+2      	; 0x25da <_ZN5Print10printFloatEdh+0xec>
    25d8:	61 c0       	rjmp	.+194    	; 0x269c <_ZN5Print10printFloatEdh+0x1ae>
    25da:	d1 2c       	mov	r13, r1
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e2       	ldi	r20, 0x20	; 32
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    25f0:	d3 94       	inc	r13
    25f2:	d7 10       	cpse	r13, r7
    25f4:	f7 cf       	rjmp	.-18     	; 0x25e4 <_ZN5Print10printFloatEdh+0xf6>
    25f6:	29 c0       	rjmp	.+82     	; 0x264a <_ZN5Print10printFloatEdh+0x15c>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	c5 01       	movw	r24, r10
    2602:	b4 01       	movw	r22, r8
    2604:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsf3>
    2608:	4b 01       	movw	r8, r22
    260a:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    260c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    2610:	6b 01       	movw	r12, r22
    2612:	77 0f       	add	r23, r23
    2614:	ee 08       	sbc	r14, r14
    2616:	ff 08       	sbc	r15, r15
    2618:	2a e0       	ldi	r18, 0x0A	; 10
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	b7 01       	movw	r22, r14
    261e:	a6 01       	movw	r20, r12
    2620:	c8 01       	movw	r24, r16
    2622:	18 df       	rcall	.-464    	; 0x2454 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    2624:	48 0e       	add	r4, r24
    2626:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    2628:	c7 01       	movw	r24, r14
    262a:	b6 01       	movw	r22, r12
    262c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatsisf>
    2630:	9b 01       	movw	r18, r22
    2632:	ac 01       	movw	r20, r24
    2634:	c5 01       	movw	r24, r10
    2636:	b4 01       	movw	r22, r8
    2638:	97 d7       	rcall	.+3886   	; 0x3568 <__subsf3>
    263a:	4b 01       	movw	r8, r22
    263c:	5c 01       	movw	r10, r24
    263e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2640:	71 10       	cpse	r7, r1
    2642:	da cf       	rjmp	.-76     	; 0x25f8 <_ZN5Print10printFloatEdh+0x10a>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    2644:	84 2d       	mov	r24, r4
    2646:	95 2d       	mov	r25, r5
    2648:	3c c0       	rjmp	.+120    	; 0x26c2 <_ZN5Print10printFloatEdh+0x1d4>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    264a:	9b 01       	movw	r18, r22
    264c:	ac 01       	movw	r20, r24
    264e:	c5 01       	movw	r24, r10
    2650:	b4 01       	movw	r22, r8
    2652:	8b d7       	rcall	.+3862   	; 0x356a <__addsf3>
    2654:	4b 01       	movw	r8, r22
    2656:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2658:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__fixunssfsi>
    265c:	69 83       	std	Y+1, r22	; 0x01
    265e:	7a 83       	std	Y+2, r23	; 0x02
    2660:	8b 83       	std	Y+3, r24	; 0x03
    2662:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    2664:	0e 94 18 1c 	call	0x3830	; 0x3830 <__floatunsisf>
    2668:	9b 01       	movw	r18, r22
    266a:	ac 01       	movw	r20, r24
    266c:	c5 01       	movw	r24, r10
    266e:	b4 01       	movw	r22, r8
    2670:	7b d7       	rcall	.+3830   	; 0x3568 <__subsf3>
    2672:	4b 01       	movw	r8, r22
    2674:	5c 01       	movw	r10, r24
  n += print(int_part);
    2676:	2a e0       	ldi	r18, 0x0A	; 10
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	49 81       	ldd	r20, Y+1	; 0x01
    267c:	5a 81       	ldd	r21, Y+2	; 0x02
    267e:	6b 81       	ldd	r22, Y+3	; 0x03
    2680:	7c 81       	ldd	r23, Y+4	; 0x04
    2682:	c8 01       	movw	r24, r16
    2684:	1f df       	rcall	.-450    	; 0x24c4 <_ZN5Print5printEmi>
    2686:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    2688:	6d eb       	ldi	r22, 0xBD	; 189
    268a:	72 e0       	ldi	r23, 0x02	; 2
    268c:	c8 01       	movw	r24, r16
    268e:	2f de       	rcall	.-930    	; 0x22ee <_ZN5Print5printEPKc>
    2690:	8c 0d       	add	r24, r12
    2692:	9d 1d       	adc	r25, r13
    2694:	2c 01       	movw	r4, r24
    2696:	4e 0c       	add	r4, r14
    2698:	5f 1c       	adc	r5, r15
    269a:	ae cf       	rjmp	.-164    	; 0x25f8 <_ZN5Print10printFloatEdh+0x10a>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	c5 01       	movw	r24, r10
    26a6:	b4 01       	movw	r22, r8
    26a8:	60 d7       	rcall	.+3776   	; 0x356a <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    26aa:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__fixunssfsi>
    26ae:	ab 01       	movw	r20, r22
    26b0:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    26b2:	2a e0       	ldi	r18, 0x0A	; 10
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	c8 01       	movw	r24, r16
    26b8:	05 df       	rcall	.-502    	; 0x24c4 <_ZN5Print5printEmi>
    26ba:	2c 01       	movw	r4, r24
    26bc:	4e 0c       	add	r4, r14
    26be:	5f 1c       	adc	r5, r15
    26c0:	c1 cf       	rjmp	.-126    	; 0x2644 <_ZN5Print10printFloatEdh+0x156>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	ff 90       	pop	r15
    26d4:	ef 90       	pop	r14
    26d6:	df 90       	pop	r13
    26d8:	cf 90       	pop	r12
    26da:	bf 90       	pop	r11
    26dc:	af 90       	pop	r10
    26de:	9f 90       	pop	r9
    26e0:	8f 90       	pop	r8
    26e2:	7f 90       	pop	r7
    26e4:	5f 90       	pop	r5
    26e6:	4f 90       	pop	r4
    26e8:	08 95       	ret

000026ea <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    26ea:	01 cf       	rjmp	.-510    	; 0x24ee <_ZN5Print10printFloatEdh>
}
    26ec:	08 95       	ret

000026ee <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    26f8:	fa de       	rcall	.-524    	; 0x24ee <_ZN5Print10printFloatEdh>
    26fa:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    26fc:	ce 01       	movw	r24, r28
    26fe:	15 de       	rcall	.-982    	; 0x232a <_ZN5Print7printlnEv>
  return n;
}
    2700:	80 0f       	add	r24, r16
    2702:	91 1f       	adc	r25, r17
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	08 95       	ret

0000270e <__vector_35>:
  if(pin == 5) { DDRE |= _BV(PORTE3); TCCR3A |= _BV(COM3A1); }
  if(pin == 2) { DDRE |= _BV(PORTE4); TCCR3A |= _BV(COM3B1); }
  if(pin == 3) { DDRE |= _BV(PORTE5); TCCR3A |= _BV(COM3C1); }
  setPwmDuty(pin, duty);
  start();
}
    270e:	1f 92       	push	r1
    2710:	0f 92       	push	r0
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	0f 92       	push	r0
    2716:	11 24       	eor	r1, r1
    2718:	0b b6       	in	r0, 0x3b	; 59
    271a:	0f 92       	push	r0
    271c:	2f 93       	push	r18
    271e:	3f 93       	push	r19
    2720:	4f 93       	push	r20
    2722:	5f 93       	push	r21
    2724:	6f 93       	push	r22
    2726:	7f 93       	push	r23
    2728:	8f 93       	push	r24
    272a:	9f 93       	push	r25
    272c:	af 93       	push	r26
    272e:	bf 93       	push	r27
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	e0 91 47 06 	lds	r30, 0x0647
    2738:	f0 91 48 06 	lds	r31, 0x0648
    273c:	19 95       	eicall
    273e:	ff 91       	pop	r31
    2740:	ef 91       	pop	r30
    2742:	bf 91       	pop	r27
    2744:	af 91       	pop	r26
    2746:	9f 91       	pop	r25
    2748:	8f 91       	pop	r24
    274a:	7f 91       	pop	r23
    274c:	6f 91       	pop	r22
    274e:	5f 91       	pop	r21
    2750:	4f 91       	pop	r20
    2752:	3f 91       	pop	r19
    2754:	2f 91       	pop	r18
    2756:	0f 90       	pop	r0
    2758:	0b be       	out	0x3b, r0	; 59
    275a:	0f 90       	pop	r0
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	0f 90       	pop	r0
    2760:	1f 90       	pop	r1
    2762:	18 95       	reti

00002764 <_ZN10TimerThree9setPeriodEl>:
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	ec 01       	movw	r28, r24
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	9a 01       	movw	r18, r20
    2770:	ab 01       	movw	r20, r22
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	74 e2       	ldi	r23, 0x24	; 36
    2776:	84 ef       	ldi	r24, 0xF4	; 244
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__mulsi3>
    277e:	20 e8       	ldi	r18, 0x80	; 128
    2780:	34 e8       	ldi	r19, 0x84	; 132
    2782:	4e e1       	ldi	r20, 0x1E	; 30
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__divmodsi4>
    278a:	39 83       	std	Y+1, r19	; 0x01
    278c:	28 83       	st	Y, r18
    278e:	30 93 97 00 	sts	0x0097, r19
    2792:	20 93 96 00 	sts	0x0096, r18
    2796:	e1 e9       	ldi	r30, 0x91	; 145
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 7f       	andi	r24, 0xF8	; 248
    279e:	80 83       	st	Z, r24
    27a0:	90 81       	ld	r25, Z
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	89 2b       	or	r24, r25
    27a6:	80 83       	st	Z, r24
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	08 95       	ret

000027ae <_ZN10TimerThree10initializeEl>:
    27ae:	10 92 90 00 	sts	0x0090, r1
    27b2:	20 e1       	ldi	r18, 0x10	; 16
    27b4:	20 93 91 00 	sts	0x0091, r18
    27b8:	d5 cf       	rjmp	.-86     	; 0x2764 <_ZN10TimerThree9setPeriodEl>
    27ba:	08 95       	ret

000027bc <_ZN10TimerThree5startEv>:
    27bc:	e1 e9       	ldi	r30, 0x91	; 145
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	20 81       	ld	r18, Z
    27c2:	dc 01       	movw	r26, r24
    27c4:	12 96       	adiw	r26, 0x02	; 2
    27c6:	8c 91       	ld	r24, X
    27c8:	82 2b       	or	r24, r18
    27ca:	80 83       	st	Z, r24
    27cc:	08 95       	ret

000027ce <_ZN10TimerThree15attachInterruptEPFvvEl>:
  if(pin == 2) TCCR3A &= ~_BV(COM3B1);   // clear the bit that enables pwm on PE4
  if(pin == 3) TCCR3A &= ~_BV(COM3C1);   // clear the bit that enables pwm on PE5
}

void TimerThree::attachInterrupt(void (*isr)(), long microseconds)
{
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	ec 01       	movw	r28, r24
    27d8:	8b 01       	movw	r16, r22
  if(microseconds > 0) setPeriod(microseconds);
    27da:	12 16       	cp	r1, r18
    27dc:	13 06       	cpc	r1, r19
    27de:	14 06       	cpc	r1, r20
    27e0:	15 06       	cpc	r1, r21
    27e2:	1c f4       	brge	.+6      	; 0x27ea <_ZN10TimerThree15attachInterruptEPFvvEl+0x1c>
    27e4:	ba 01       	movw	r22, r20
    27e6:	a9 01       	movw	r20, r18
    27e8:	bd df       	rcall	.-134    	; 0x2764 <_ZN10TimerThree9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    27ea:	1c 83       	std	Y+4, r17	; 0x04
    27ec:	0b 83       	std	Y+3, r16	; 0x03
  TIMSK3 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	80 93 71 00 	sts	0x0071, r24
  sei();                                                   // ensures that interrupts are globally enabled
    27f4:	78 94       	sei
  start();
    27f6:	ce 01       	movw	r24, r28
    27f8:	e1 df       	rcall	.-62     	; 0x27bc <_ZN10TimerThree5startEv>
}
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	a9 f0       	breq	.+42     	; 0x2832 <_Z12disableTimerh+0x2e>
    2808:	28 f4       	brcc	.+10     	; 0x2814 <_Z12disableTimerh+0x10>
    280a:	88 23       	and	r24, r24
    280c:	49 f0       	breq	.+18     	; 0x2820 <_Z12disableTimerh+0x1c>
    280e:	81 30       	cpi	r24, 0x01	; 1
    2810:	51 f0       	breq	.+20     	; 0x2826 <_Z12disableTimerh+0x22>
    2812:	08 95       	ret
    2814:	84 30       	cpi	r24, 0x04	; 4
    2816:	09 f1       	breq	.+66     	; 0x285a <_Z12disableTimerh+0x56>
    2818:	e8 f0       	brcs	.+58     	; 0x2854 <_Z12disableTimerh+0x50>
    281a:	85 30       	cpi	r24, 0x05	; 5
    281c:	09 f1       	breq	.+66     	; 0x2860 <_Z12disableTimerh+0x5c>
    281e:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    2820:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2824:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2826:	ef e6       	ldi	r30, 0x6F	; 111
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	8d 7f       	andi	r24, 0xFD	; 253
    282e:	80 83       	st	Z, r24
      break;
    2830:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2832:	e0 e7       	ldi	r30, 0x70	; 112
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	8d 7f       	andi	r24, 0xFD	; 253
    283a:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2842:	e1 eb       	ldi	r30, 0xB1	; 177
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	88 7f       	andi	r24, 0xF8	; 248
    284a:	84 60       	ori	r24, 0x04	; 4
    284c:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    284e:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    2852:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    2854:	10 92 71 00 	sts	0x0071, r1
      break;
    2858:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    285a:	10 92 72 00 	sts	0x0072, r1
      break;
    285e:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    2860:	10 92 73 00 	sts	0x0073, r1
    2864:	08 95       	ret

00002866 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    2866:	cf 93       	push	r28
    2868:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    286a:	80 91 00 02 	lds	r24, 0x0200
    286e:	8c 13       	cpse	r24, r28
    2870:	08 c0       	rjmp	.+16     	; 0x2882 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2872:	e8 ec       	ldi	r30, 0xC8	; 200
    2874:	f2 e0       	ldi	r31, 0x02	; 2
    2876:	e4 91       	lpm	r30, Z
    2878:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    287a:	9f ef       	ldi	r25, 0xFF	; 255
    287c:	90 93 00 02 	sts	0x0200, r25
    2880:	01 c0       	rjmp	.+2      	; 0x2884 <_Z6noToneh+0x1e>
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    2884:	bf df       	rcall	.-130    	; 0x2804 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	8c 2f       	mov	r24, r28
    288a:	3e d6       	rcall	.+3196   	; 0x3508 <digitalWrite>
}
    288c:	cf 91       	pop	r28
    288e:	08 95       	ret

00002890 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    2890:	1f 92       	push	r1
    2892:	0f 92       	push	r0
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	0f 92       	push	r0
    2898:	11 24       	eor	r1, r1
    289a:	0b b6       	in	r0, 0x3b	; 59
    289c:	0f 92       	push	r0
    289e:	2f 93       	push	r18
    28a0:	3f 93       	push	r19
    28a2:	4f 93       	push	r20
    28a4:	5f 93       	push	r21
    28a6:	6f 93       	push	r22
    28a8:	7f 93       	push	r23
    28aa:	8f 93       	push	r24
    28ac:	9f 93       	push	r25
    28ae:	af 93       	push	r26
    28b0:	bf 93       	push	r27
    28b2:	ef 93       	push	r30
    28b4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    28b6:	80 91 4c 06 	lds	r24, 0x064C
    28ba:	90 91 4d 06 	lds	r25, 0x064D
    28be:	a0 91 4e 06 	lds	r26, 0x064E
    28c2:	b0 91 4f 06 	lds	r27, 0x064F
    28c6:	89 2b       	or	r24, r25
    28c8:	8a 2b       	or	r24, r26
    28ca:	8b 2b       	or	r24, r27
    28cc:	51 f1       	breq	.+84     	; 0x2922 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    28ce:	80 91 49 06 	lds	r24, 0x0649
    28d2:	e0 91 4a 06 	lds	r30, 0x064A
    28d6:	f0 91 4b 06 	lds	r31, 0x064B
    28da:	90 81       	ld	r25, Z
    28dc:	89 27       	eor	r24, r25
    28de:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    28e0:	80 91 4c 06 	lds	r24, 0x064C
    28e4:	90 91 4d 06 	lds	r25, 0x064D
    28e8:	a0 91 4e 06 	lds	r26, 0x064E
    28ec:	b0 91 4f 06 	lds	r27, 0x064F
    28f0:	18 16       	cp	r1, r24
    28f2:	19 06       	cpc	r1, r25
    28f4:	1a 06       	cpc	r1, r26
    28f6:	1b 06       	cpc	r1, r27
    28f8:	bc f4       	brge	.+46     	; 0x2928 <__vector_13+0x98>
      timer2_toggle_count--;
    28fa:	80 91 4c 06 	lds	r24, 0x064C
    28fe:	90 91 4d 06 	lds	r25, 0x064D
    2902:	a0 91 4e 06 	lds	r26, 0x064E
    2906:	b0 91 4f 06 	lds	r27, 0x064F
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	a1 09       	sbc	r26, r1
    290e:	b1 09       	sbc	r27, r1
    2910:	80 93 4c 06 	sts	0x064C, r24
    2914:	90 93 4d 06 	sts	0x064D, r25
    2918:	a0 93 4e 06 	sts	0x064E, r26
    291c:	b0 93 4f 06 	sts	0x064F, r27
    2920:	03 c0       	rjmp	.+6      	; 0x2928 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2922:	80 91 00 02 	lds	r24, 0x0200
    2926:	9f df       	rcall	.-194    	; 0x2866 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2928:	ff 91       	pop	r31
    292a:	ef 91       	pop	r30
    292c:	bf 91       	pop	r27
    292e:	af 91       	pop	r26
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	7f 91       	pop	r23
    2936:	6f 91       	pop	r22
    2938:	5f 91       	pop	r21
    293a:	4f 91       	pop	r20
    293c:	3f 91       	pop	r19
    293e:	2f 91       	pop	r18
    2940:	0f 90       	pop	r0
    2942:	0b be       	out	0x3b, r0	; 59
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0
    294a:	1f 90       	pop	r1
    294c:	18 95       	reti

0000294e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    294e:	10 92 bd 06 	sts	0x06BD, r1
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	80 93 bb 06 	sts	0x06BB, r24
    2958:	10 92 ba 06 	sts	0x06BA, r1
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	84 e1       	ldi	r24, 0x14	; 20
    2960:	d3 d5       	rcall	.+2982   	; 0x3508 <digitalWrite>
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	85 e1       	ldi	r24, 0x15	; 21
    2966:	d0 d5       	rcall	.+2976   	; 0x3508 <digitalWrite>
    2968:	e9 eb       	ldi	r30, 0xB9	; 185
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	8e 7f       	andi	r24, 0xFE	; 254
    2970:	80 83       	st	Z, r24
    2972:	80 81       	ld	r24, Z
    2974:	8d 7f       	andi	r24, 0xFD	; 253
    2976:	80 83       	st	Z, r24
    2978:	88 e4       	ldi	r24, 0x48	; 72
    297a:	80 93 b8 00 	sts	0x00B8, r24
    297e:	85 e4       	ldi	r24, 0x45	; 69
    2980:	80 93 bc 00 	sts	0x00BC, r24
    2984:	08 95       	ret

00002986 <twi_readFrom>:
    2986:	41 32       	cpi	r20, 0x21	; 33
    2988:	08 f0       	brcs	.+2      	; 0x298c <twi_readFrom+0x6>
    298a:	46 c0       	rjmp	.+140    	; 0x2a18 <twi_readFrom+0x92>
    298c:	90 91 bd 06 	lds	r25, 0x06BD
    2990:	91 11       	cpse	r25, r1
    2992:	fc cf       	rjmp	.-8      	; 0x298c <twi_readFrom+0x6>
    2994:	31 e0       	ldi	r19, 0x01	; 1
    2996:	30 93 bd 06 	sts	0x06BD, r19
    299a:	20 93 bb 06 	sts	0x06BB, r18
    299e:	2f ef       	ldi	r18, 0xFF	; 255
    29a0:	20 93 50 06 	sts	0x0650, r18
    29a4:	10 92 95 06 	sts	0x0695, r1
    29a8:	24 0f       	add	r18, r20
    29aa:	20 93 94 06 	sts	0x0694, r18
    29ae:	30 93 bc 06 	sts	0x06BC, r19
    29b2:	20 91 bc 06 	lds	r18, 0x06BC
    29b6:	88 0f       	add	r24, r24
    29b8:	82 2b       	or	r24, r18
    29ba:	80 93 bc 06 	sts	0x06BC, r24
    29be:	80 91 ba 06 	lds	r24, 0x06BA
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	51 f4       	brne	.+20     	; 0x29da <twi_readFrom+0x54>
    29c6:	10 92 ba 06 	sts	0x06BA, r1
    29ca:	80 91 bc 06 	lds	r24, 0x06BC
    29ce:	80 93 bb 00 	sts	0x00BB, r24
    29d2:	85 ec       	ldi	r24, 0xC5	; 197
    29d4:	80 93 bc 00 	sts	0x00BC, r24
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <twi_readFrom+0x5a>
    29da:	85 ee       	ldi	r24, 0xE5	; 229
    29dc:	80 93 bc 00 	sts	0x00BC, r24
    29e0:	80 91 bd 06 	lds	r24, 0x06BD
    29e4:	81 30       	cpi	r24, 0x01	; 1
    29e6:	e1 f3       	breq	.-8      	; 0x29e0 <twi_readFrom+0x5a>
    29e8:	80 91 95 06 	lds	r24, 0x0695
    29ec:	84 17       	cp	r24, r20
    29ee:	10 f4       	brcc	.+4      	; 0x29f4 <twi_readFrom+0x6e>
    29f0:	40 91 95 06 	lds	r20, 0x0695
    29f4:	44 23       	and	r20, r20
    29f6:	89 f0       	breq	.+34     	; 0x2a1a <twi_readFrom+0x94>
    29f8:	a6 e9       	ldi	r26, 0x96	; 150
    29fa:	b6 e0       	ldi	r27, 0x06	; 6
    29fc:	fb 01       	movw	r30, r22
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	84 0f       	add	r24, r20
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	68 0f       	add	r22, r24
    2a08:	79 1f       	adc	r23, r25
    2a0a:	8d 91       	ld	r24, X+
    2a0c:	81 93       	st	Z+, r24
    2a0e:	e6 17       	cp	r30, r22
    2a10:	f7 07       	cpc	r31, r23
    2a12:	d9 f7       	brne	.-10     	; 0x2a0a <twi_readFrom+0x84>
    2a14:	94 2f       	mov	r25, r20
    2a16:	01 c0       	rjmp	.+2      	; 0x2a1a <twi_readFrom+0x94>
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	89 2f       	mov	r24, r25
    2a1c:	08 95       	ret

00002a1e <twi_writeTo>:
    2a1e:	0f 93       	push	r16
    2a20:	41 32       	cpi	r20, 0x21	; 33
    2a22:	08 f0       	brcs	.+2      	; 0x2a26 <twi_writeTo+0x8>
    2a24:	51 c0       	rjmp	.+162    	; 0x2ac8 <twi_writeTo+0xaa>
    2a26:	30 91 bd 06 	lds	r19, 0x06BD
    2a2a:	31 11       	cpse	r19, r1
    2a2c:	fc cf       	rjmp	.-8      	; 0x2a26 <twi_writeTo+0x8>
    2a2e:	92 e0       	ldi	r25, 0x02	; 2
    2a30:	90 93 bd 06 	sts	0x06BD, r25
    2a34:	00 93 bb 06 	sts	0x06BB, r16
    2a38:	9f ef       	ldi	r25, 0xFF	; 255
    2a3a:	90 93 50 06 	sts	0x0650, r25
    2a3e:	10 92 95 06 	sts	0x0695, r1
    2a42:	40 93 94 06 	sts	0x0694, r20
    2a46:	44 23       	and	r20, r20
    2a48:	71 f0       	breq	.+28     	; 0x2a66 <twi_writeTo+0x48>
    2a4a:	fb 01       	movw	r30, r22
    2a4c:	a6 e9       	ldi	r26, 0x96	; 150
    2a4e:	b6 e0       	ldi	r27, 0x06	; 6
    2a50:	41 50       	subi	r20, 0x01	; 1
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	4f 5f       	subi	r20, 0xFF	; 255
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	64 0f       	add	r22, r20
    2a5a:	75 1f       	adc	r23, r21
    2a5c:	91 91       	ld	r25, Z+
    2a5e:	9d 93       	st	X+, r25
    2a60:	e6 17       	cp	r30, r22
    2a62:	f7 07       	cpc	r31, r23
    2a64:	d9 f7       	brne	.-10     	; 0x2a5c <twi_writeTo+0x3e>
    2a66:	10 92 bc 06 	sts	0x06BC, r1
    2a6a:	90 91 bc 06 	lds	r25, 0x06BC
    2a6e:	88 0f       	add	r24, r24
    2a70:	89 2b       	or	r24, r25
    2a72:	80 93 bc 06 	sts	0x06BC, r24
    2a76:	80 91 ba 06 	lds	r24, 0x06BA
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	51 f4       	brne	.+20     	; 0x2a92 <twi_writeTo+0x74>
    2a7e:	10 92 ba 06 	sts	0x06BA, r1
    2a82:	80 91 bc 06 	lds	r24, 0x06BC
    2a86:	80 93 bb 00 	sts	0x00BB, r24
    2a8a:	85 ec       	ldi	r24, 0xC5	; 197
    2a8c:	80 93 bc 00 	sts	0x00BC, r24
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <twi_writeTo+0x7a>
    2a92:	85 ee       	ldi	r24, 0xE5	; 229
    2a94:	80 93 bc 00 	sts	0x00BC, r24
    2a98:	22 23       	and	r18, r18
    2a9a:	41 f0       	breq	.+16     	; 0x2aac <twi_writeTo+0x8e>
    2a9c:	80 91 bd 06 	lds	r24, 0x06BD
    2aa0:	82 30       	cpi	r24, 0x02	; 2
    2aa2:	21 f4       	brne	.+8      	; 0x2aac <twi_writeTo+0x8e>
    2aa4:	80 91 bd 06 	lds	r24, 0x06BD
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	e1 f3       	breq	.-8      	; 0x2aa4 <twi_writeTo+0x86>
    2aac:	80 91 50 06 	lds	r24, 0x0650
    2ab0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab2:	79 f0       	breq	.+30     	; 0x2ad2 <twi_writeTo+0xb4>
    2ab4:	80 91 50 06 	lds	r24, 0x0650
    2ab8:	80 32       	cpi	r24, 0x20	; 32
    2aba:	41 f0       	breq	.+16     	; 0x2acc <twi_writeTo+0xae>
    2abc:	80 91 50 06 	lds	r24, 0x0650
    2ac0:	80 33       	cpi	r24, 0x30	; 48
    2ac2:	31 f0       	breq	.+12     	; 0x2ad0 <twi_writeTo+0xb2>
    2ac4:	34 e0       	ldi	r19, 0x04	; 4
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <twi_writeTo+0xb4>
    2ac8:	31 e0       	ldi	r19, 0x01	; 1
    2aca:	03 c0       	rjmp	.+6      	; 0x2ad2 <twi_writeTo+0xb4>
    2acc:	32 e0       	ldi	r19, 0x02	; 2
    2ace:	01 c0       	rjmp	.+2      	; 0x2ad2 <twi_writeTo+0xb4>
    2ad0:	33 e0       	ldi	r19, 0x03	; 3
    2ad2:	83 2f       	mov	r24, r19
    2ad4:	0f 91       	pop	r16
    2ad6:	08 95       	ret

00002ad8 <twi_transmit>:
    2ad8:	61 32       	cpi	r22, 0x21	; 33
    2ada:	c8 f4       	brcc	.+50     	; 0x2b0e <twi_transmit+0x36>
    2adc:	20 91 bd 06 	lds	r18, 0x06BD
    2ae0:	24 30       	cpi	r18, 0x04	; 4
    2ae2:	b9 f4       	brne	.+46     	; 0x2b12 <twi_transmit+0x3a>
    2ae4:	60 93 72 06 	sts	0x0672, r22
    2ae8:	66 23       	and	r22, r22
    2aea:	a9 f0       	breq	.+42     	; 0x2b16 <twi_transmit+0x3e>
    2aec:	fc 01       	movw	r30, r24
    2aee:	a4 e7       	ldi	r26, 0x74	; 116
    2af0:	b6 e0       	ldi	r27, 0x06	; 6
    2af2:	61 50       	subi	r22, 0x01	; 1
    2af4:	26 2f       	mov	r18, r22
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	2f 5f       	subi	r18, 0xFF	; 255
    2afa:	3f 4f       	sbci	r19, 0xFF	; 255
    2afc:	28 0f       	add	r18, r24
    2afe:	39 1f       	adc	r19, r25
    2b00:	91 91       	ld	r25, Z+
    2b02:	9d 93       	st	X+, r25
    2b04:	e2 17       	cp	r30, r18
    2b06:	f3 07       	cpc	r31, r19
    2b08:	d9 f7       	brne	.-10     	; 0x2b00 <twi_transmit+0x28>
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	08 95       	ret
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	08 95       	ret
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	08 95       	ret
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	08 95       	ret

00002b1a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b1a:	85 ed       	ldi	r24, 0xD5	; 213
    2b1c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b20:	ec eb       	ldi	r30, 0xBC	; 188
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	84 fd       	sbrc	r24, 4
    2b28:	fd cf       	rjmp	.-6      	; 0x2b24 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b2a:	10 92 bd 06 	sts	0x06BD, r1
    2b2e:	08 95       	ret

00002b30 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b30:	85 ec       	ldi	r24, 0xC5	; 197
    2b32:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    2b36:	10 92 bd 06 	sts	0x06BD, r1
    2b3a:	08 95       	ret

00002b3c <__vector_39>:
}

SIGNAL(TWI_vect)
{
    2b3c:	1f 92       	push	r1
    2b3e:	0f 92       	push	r0
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	0f 92       	push	r0
    2b44:	11 24       	eor	r1, r1
    2b46:	0b b6       	in	r0, 0x3b	; 59
    2b48:	0f 92       	push	r0
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	ef 93       	push	r30
    2b60:	ff 93       	push	r31
  switch(TW_STATUS){
    2b62:	80 91 b9 00 	lds	r24, 0x00B9
    2b66:	88 7f       	andi	r24, 0xF8	; 248
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	89 3c       	cpi	r24, 0xC9	; 201
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	08 f0       	brcs	.+2      	; 0x2b72 <__vector_39+0x36>
    2b70:	f0 c0       	rjmp	.+480    	; 0x2d52 <__vector_39+0x216>
    2b72:	fc 01       	movw	r30, r24
    2b74:	88 27       	eor	r24, r24
    2b76:	ee 58       	subi	r30, 0x8E	; 142
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7c:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2b80:	80 91 bc 06 	lds	r24, 0x06BC
    2b84:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2b88:	85 ec       	ldi	r24, 0xC5	; 197
    2b8a:	80 93 bc 00 	sts	0x00BC, r24
    2b8e:	e1 c0       	rjmp	.+450    	; 0x2d52 <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2b90:	90 91 95 06 	lds	r25, 0x0695
    2b94:	80 91 94 06 	lds	r24, 0x0694
    2b98:	98 17       	cp	r25, r24
    2b9a:	80 f4       	brcc	.+32     	; 0x2bbc <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2b9c:	e0 91 95 06 	lds	r30, 0x0695
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	8e 0f       	add	r24, r30
    2ba4:	80 93 95 06 	sts	0x0695, r24
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	ea 56       	subi	r30, 0x6A	; 106
    2bac:	f9 4f       	sbci	r31, 0xF9	; 249
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bb4:	85 ec       	ldi	r24, 0xC5	; 197
    2bb6:	80 93 bc 00 	sts	0x00BC, r24
    2bba:	cb c0       	rjmp	.+406    	; 0x2d52 <__vector_39+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2bbc:	80 91 bb 06 	lds	r24, 0x06BB
    2bc0:	88 23       	and	r24, r24
    2bc2:	11 f0       	breq	.+4      	; 0x2bc8 <__vector_39+0x8c>
          twi_stop();
    2bc4:	aa df       	rcall	.-172    	; 0x2b1a <twi_stop>
    2bc6:	c5 c0       	rjmp	.+394    	; 0x2d52 <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 93 ba 06 	sts	0x06BA, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2bce:	84 ea       	ldi	r24, 0xA4	; 164
    2bd0:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2bd4:	10 92 bd 06 	sts	0x06BD, r1
    2bd8:	bc c0       	rjmp	.+376    	; 0x2d52 <__vector_39+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2bda:	80 e2       	ldi	r24, 0x20	; 32
    2bdc:	80 93 50 06 	sts	0x0650, r24
      twi_stop();
    2be0:	9c df       	rcall	.-200    	; 0x2b1a <twi_stop>
      break;
    2be2:	b7 c0       	rjmp	.+366    	; 0x2d52 <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2be4:	80 e3       	ldi	r24, 0x30	; 48
    2be6:	80 93 50 06 	sts	0x0650, r24
      twi_stop();
    2bea:	97 df       	rcall	.-210    	; 0x2b1a <twi_stop>
      break;
    2bec:	b2 c0       	rjmp	.+356    	; 0x2d52 <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bee:	88 e3       	ldi	r24, 0x38	; 56
    2bf0:	80 93 50 06 	sts	0x0650, r24
      twi_releaseBus();
    2bf4:	9d df       	rcall	.-198    	; 0x2b30 <twi_releaseBus>
      break;
    2bf6:	ad c0       	rjmp	.+346    	; 0x2d52 <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2bf8:	e0 91 95 06 	lds	r30, 0x0695
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	8e 0f       	add	r24, r30
    2c00:	80 93 95 06 	sts	0x0695, r24
    2c04:	80 91 bb 00 	lds	r24, 0x00BB
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	ea 56       	subi	r30, 0x6A	; 106
    2c0c:	f9 4f       	sbci	r31, 0xF9	; 249
    2c0e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c10:	90 91 95 06 	lds	r25, 0x0695
    2c14:	80 91 94 06 	lds	r24, 0x0694
    2c18:	98 17       	cp	r25, r24
    2c1a:	20 f4       	brcc	.+8      	; 0x2c24 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c1c:	85 ec       	ldi	r24, 0xC5	; 197
    2c1e:	80 93 bc 00 	sts	0x00BC, r24
    2c22:	97 c0       	rjmp	.+302    	; 0x2d52 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c24:	85 e8       	ldi	r24, 0x85	; 133
    2c26:	80 93 bc 00 	sts	0x00BC, r24
    2c2a:	93 c0       	rjmp	.+294    	; 0x2d52 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c2c:	e0 91 95 06 	lds	r30, 0x0695
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	8e 0f       	add	r24, r30
    2c34:	80 93 95 06 	sts	0x0695, r24
    2c38:	80 91 bb 00 	lds	r24, 0x00BB
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	ea 56       	subi	r30, 0x6A	; 106
    2c40:	f9 4f       	sbci	r31, 0xF9	; 249
    2c42:	80 83       	st	Z, r24
	if (twi_sendStop)
    2c44:	80 91 bb 06 	lds	r24, 0x06BB
    2c48:	88 23       	and	r24, r24
    2c4a:	11 f0       	breq	.+4      	; 0x2c50 <__vector_39+0x114>
          twi_stop();
    2c4c:	66 df       	rcall	.-308    	; 0x2b1a <twi_stop>
    2c4e:	81 c0       	rjmp	.+258    	; 0x2d52 <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	80 93 ba 06 	sts	0x06BA, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2c56:	84 ea       	ldi	r24, 0xA4	; 164
    2c58:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2c5c:	10 92 bd 06 	sts	0x06BD, r1
    2c60:	78 c0       	rjmp	.+240    	; 0x2d52 <__vector_39+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2c62:	5b df       	rcall	.-330    	; 0x2b1a <twi_stop>
      break;
    2c64:	76 c0       	rjmp	.+236    	; 0x2d52 <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	80 93 bd 06 	sts	0x06BD, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2c6c:	10 92 51 06 	sts	0x0651, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c70:	85 ec       	ldi	r24, 0xC5	; 197
    2c72:	80 93 bc 00 	sts	0x00BC, r24
    2c76:	6d c0       	rjmp	.+218    	; 0x2d52 <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2c78:	80 91 51 06 	lds	r24, 0x0651
    2c7c:	80 32       	cpi	r24, 0x20	; 32
    2c7e:	80 f4       	brcc	.+32     	; 0x2ca0 <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2c80:	e0 91 51 06 	lds	r30, 0x0651
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8e 0f       	add	r24, r30
    2c88:	80 93 51 06 	sts	0x0651, r24
    2c8c:	80 91 bb 00 	lds	r24, 0x00BB
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	ee 5a       	subi	r30, 0xAE	; 174
    2c94:	f9 4f       	sbci	r31, 0xF9	; 249
    2c96:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c98:	85 ec       	ldi	r24, 0xC5	; 197
    2c9a:	80 93 bc 00 	sts	0x00BC, r24
    2c9e:	59 c0       	rjmp	.+178    	; 0x2d52 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2ca0:	85 e8       	ldi	r24, 0x85	; 133
    2ca2:	80 93 bc 00 	sts	0x00BC, r24
    2ca6:	55 c0       	rjmp	.+170    	; 0x2d52 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2ca8:	80 91 51 06 	lds	r24, 0x0651
    2cac:	80 32       	cpi	r24, 0x20	; 32
    2cae:	30 f4       	brcc	.+12     	; 0x2cbc <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2cb0:	e0 91 51 06 	lds	r30, 0x0651
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	ee 5a       	subi	r30, 0xAE	; 174
    2cb8:	f9 4f       	sbci	r31, 0xF9	; 249
    2cba:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    2cbc:	2e df       	rcall	.-420    	; 0x2b1a <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2cbe:	60 91 51 06 	lds	r22, 0x0651
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	e0 91 b6 06 	lds	r30, 0x06B6
    2cc8:	f0 91 b7 06 	lds	r31, 0x06B7
    2ccc:	82 e5       	ldi	r24, 0x52	; 82
    2cce:	96 e0       	ldi	r25, 0x06	; 6
    2cd0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2cd2:	10 92 51 06 	sts	0x0651, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2cd6:	2c df       	rcall	.-424    	; 0x2b30 <twi_releaseBus>
      break;
    2cd8:	3c c0       	rjmp	.+120    	; 0x2d52 <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cda:	85 e8       	ldi	r24, 0x85	; 133
    2cdc:	80 93 bc 00 	sts	0x00BC, r24
    2ce0:	38 c0       	rjmp	.+112    	; 0x2d52 <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2ce2:	84 e0       	ldi	r24, 0x04	; 4
    2ce4:	80 93 bd 06 	sts	0x06BD, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2ce8:	10 92 73 06 	sts	0x0673, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2cec:	10 92 72 06 	sts	0x0672, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2cf0:	e0 91 b8 06 	lds	r30, 0x06B8
    2cf4:	f0 91 b9 06 	lds	r31, 0x06B9
    2cf8:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2cfa:	80 91 72 06 	lds	r24, 0x0672
    2cfe:	81 11       	cpse	r24, r1
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	80 93 72 06 	sts	0x0672, r24
        twi_txBuffer[0] = 0x00;
    2d08:	10 92 74 06 	sts	0x0674, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d0c:	e0 91 73 06 	lds	r30, 0x0673
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	8e 0f       	add	r24, r30
    2d14:	80 93 73 06 	sts	0x0673, r24
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	ec 58       	subi	r30, 0x8C	; 140
    2d1c:	f9 4f       	sbci	r31, 0xF9	; 249
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d24:	90 91 73 06 	lds	r25, 0x0673
    2d28:	80 91 72 06 	lds	r24, 0x0672
    2d2c:	98 17       	cp	r25, r24
    2d2e:	20 f4       	brcc	.+8      	; 0x2d38 <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d30:	85 ec       	ldi	r24, 0xC5	; 197
    2d32:	80 93 bc 00 	sts	0x00BC, r24
    2d36:	0d c0       	rjmp	.+26     	; 0x2d52 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d38:	85 e8       	ldi	r24, 0x85	; 133
    2d3a:	80 93 bc 00 	sts	0x00BC, r24
    2d3e:	09 c0       	rjmp	.+18     	; 0x2d52 <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d40:	85 ec       	ldi	r24, 0xC5	; 197
    2d42:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d46:	10 92 bd 06 	sts	0x06BD, r1
      break;
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <__vector_39+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d4c:	10 92 50 06 	sts	0x0650, r1
      twi_stop();
    2d50:	e4 de       	rcall	.-568    	; 0x2b1a <twi_stop>
      break;
  }
}
    2d52:	ff 91       	pop	r31
    2d54:	ef 91       	pop	r30
    2d56:	bf 91       	pop	r27
    2d58:	af 91       	pop	r26
    2d5a:	9f 91       	pop	r25
    2d5c:	8f 91       	pop	r24
    2d5e:	7f 91       	pop	r23
    2d60:	6f 91       	pop	r22
    2d62:	5f 91       	pop	r21
    2d64:	4f 91       	pop	r20
    2d66:	3f 91       	pop	r19
    2d68:	2f 91       	pop	r18
    2d6a:	0f 90       	pop	r0
    2d6c:	0b be       	out	0x3b, r0	; 59
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	0f 90       	pop	r0
    2d74:	1f 90       	pop	r1
    2d76:	18 95       	reti

00002d78 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    2d78:	1f 92       	push	r1
    2d7a:	0f 92       	push	r0
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	0f 92       	push	r0
    2d80:	11 24       	eor	r1, r1
    2d82:	0b b6       	in	r0, 0x3b	; 59
    2d84:	0f 92       	push	r0
    2d86:	2f 93       	push	r18
    2d88:	3f 93       	push	r19
    2d8a:	4f 93       	push	r20
    2d8c:	5f 93       	push	r21
    2d8e:	6f 93       	push	r22
    2d90:	7f 93       	push	r23
    2d92:	8f 93       	push	r24
    2d94:	9f 93       	push	r25
    2d96:	af 93       	push	r26
    2d98:	bf 93       	push	r27
    2d9a:	ef 93       	push	r30
    2d9c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    2d9e:	80 91 c2 06 	lds	r24, 0x06C2
    2da2:	90 91 c3 06 	lds	r25, 0x06C3
    2da6:	89 2b       	or	r24, r25
    2da8:	29 f0       	breq	.+10     	; 0x2db4 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    2daa:	e0 91 c2 06 	lds	r30, 0x06C2
    2dae:	f0 91 c3 06 	lds	r31, 0x06C3
    2db2:	19 95       	eicall
}
    2db4:	ff 91       	pop	r31
    2db6:	ef 91       	pop	r30
    2db8:	bf 91       	pop	r27
    2dba:	af 91       	pop	r26
    2dbc:	9f 91       	pop	r25
    2dbe:	8f 91       	pop	r24
    2dc0:	7f 91       	pop	r23
    2dc2:	6f 91       	pop	r22
    2dc4:	5f 91       	pop	r21
    2dc6:	4f 91       	pop	r20
    2dc8:	3f 91       	pop	r19
    2dca:	2f 91       	pop	r18
    2dcc:	0f 90       	pop	r0
    2dce:	0b be       	out	0x3b, r0	; 59
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	0f 90       	pop	r0
    2dd6:	1f 90       	pop	r1
    2dd8:	18 95       	reti

00002dda <__vector_2>:

ISR(INT1_vect) {
    2dda:	1f 92       	push	r1
    2ddc:	0f 92       	push	r0
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	0f 92       	push	r0
    2de2:	11 24       	eor	r1, r1
    2de4:	0b b6       	in	r0, 0x3b	; 59
    2de6:	0f 92       	push	r0
    2de8:	2f 93       	push	r18
    2dea:	3f 93       	push	r19
    2dec:	4f 93       	push	r20
    2dee:	5f 93       	push	r21
    2df0:	6f 93       	push	r22
    2df2:	7f 93       	push	r23
    2df4:	8f 93       	push	r24
    2df6:	9f 93       	push	r25
    2df8:	af 93       	push	r26
    2dfa:	bf 93       	push	r27
    2dfc:	ef 93       	push	r30
    2dfe:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    2e00:	80 91 c4 06 	lds	r24, 0x06C4
    2e04:	90 91 c5 06 	lds	r25, 0x06C5
    2e08:	89 2b       	or	r24, r25
    2e0a:	29 f0       	breq	.+10     	; 0x2e16 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    2e0c:	e0 91 c4 06 	lds	r30, 0x06C4
    2e10:	f0 91 c5 06 	lds	r31, 0x06C5
    2e14:	19 95       	eicall
}
    2e16:	ff 91       	pop	r31
    2e18:	ef 91       	pop	r30
    2e1a:	bf 91       	pop	r27
    2e1c:	af 91       	pop	r26
    2e1e:	9f 91       	pop	r25
    2e20:	8f 91       	pop	r24
    2e22:	7f 91       	pop	r23
    2e24:	6f 91       	pop	r22
    2e26:	5f 91       	pop	r21
    2e28:	4f 91       	pop	r20
    2e2a:	3f 91       	pop	r19
    2e2c:	2f 91       	pop	r18
    2e2e:	0f 90       	pop	r0
    2e30:	0b be       	out	0x3b, r0	; 59
    2e32:	0f 90       	pop	r0
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	0f 90       	pop	r0
    2e38:	1f 90       	pop	r1
    2e3a:	18 95       	reti

00002e3c <__vector_3>:

ISR(INT2_vect) {
    2e3c:	1f 92       	push	r1
    2e3e:	0f 92       	push	r0
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	0f 92       	push	r0
    2e44:	11 24       	eor	r1, r1
    2e46:	0b b6       	in	r0, 0x3b	; 59
    2e48:	0f 92       	push	r0
    2e4a:	2f 93       	push	r18
    2e4c:	3f 93       	push	r19
    2e4e:	4f 93       	push	r20
    2e50:	5f 93       	push	r21
    2e52:	6f 93       	push	r22
    2e54:	7f 93       	push	r23
    2e56:	8f 93       	push	r24
    2e58:	9f 93       	push	r25
    2e5a:	af 93       	push	r26
    2e5c:	bf 93       	push	r27
    2e5e:	ef 93       	push	r30
    2e60:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    2e62:	80 91 c6 06 	lds	r24, 0x06C6
    2e66:	90 91 c7 06 	lds	r25, 0x06C7
    2e6a:	89 2b       	or	r24, r25
    2e6c:	29 f0       	breq	.+10     	; 0x2e78 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    2e6e:	e0 91 c6 06 	lds	r30, 0x06C6
    2e72:	f0 91 c7 06 	lds	r31, 0x06C7
    2e76:	19 95       	eicall
}
    2e78:	ff 91       	pop	r31
    2e7a:	ef 91       	pop	r30
    2e7c:	bf 91       	pop	r27
    2e7e:	af 91       	pop	r26
    2e80:	9f 91       	pop	r25
    2e82:	8f 91       	pop	r24
    2e84:	7f 91       	pop	r23
    2e86:	6f 91       	pop	r22
    2e88:	5f 91       	pop	r21
    2e8a:	4f 91       	pop	r20
    2e8c:	3f 91       	pop	r19
    2e8e:	2f 91       	pop	r18
    2e90:	0f 90       	pop	r0
    2e92:	0b be       	out	0x3b, r0	; 59
    2e94:	0f 90       	pop	r0
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	0f 90       	pop	r0
    2e9a:	1f 90       	pop	r1
    2e9c:	18 95       	reti

00002e9e <__vector_4>:

ISR(INT3_vect) {
    2e9e:	1f 92       	push	r1
    2ea0:	0f 92       	push	r0
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	0f 92       	push	r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	0b b6       	in	r0, 0x3b	; 59
    2eaa:	0f 92       	push	r0
    2eac:	2f 93       	push	r18
    2eae:	3f 93       	push	r19
    2eb0:	4f 93       	push	r20
    2eb2:	5f 93       	push	r21
    2eb4:	6f 93       	push	r22
    2eb6:	7f 93       	push	r23
    2eb8:	8f 93       	push	r24
    2eba:	9f 93       	push	r25
    2ebc:	af 93       	push	r26
    2ebe:	bf 93       	push	r27
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    2ec4:	80 91 c8 06 	lds	r24, 0x06C8
    2ec8:	90 91 c9 06 	lds	r25, 0x06C9
    2ecc:	89 2b       	or	r24, r25
    2ece:	29 f0       	breq	.+10     	; 0x2eda <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    2ed0:	e0 91 c8 06 	lds	r30, 0x06C8
    2ed4:	f0 91 c9 06 	lds	r31, 0x06C9
    2ed8:	19 95       	eicall
}
    2eda:	ff 91       	pop	r31
    2edc:	ef 91       	pop	r30
    2ede:	bf 91       	pop	r27
    2ee0:	af 91       	pop	r26
    2ee2:	9f 91       	pop	r25
    2ee4:	8f 91       	pop	r24
    2ee6:	7f 91       	pop	r23
    2ee8:	6f 91       	pop	r22
    2eea:	5f 91       	pop	r21
    2eec:	4f 91       	pop	r20
    2eee:	3f 91       	pop	r19
    2ef0:	2f 91       	pop	r18
    2ef2:	0f 90       	pop	r0
    2ef4:	0b be       	out	0x3b, r0	; 59
    2ef6:	0f 90       	pop	r0
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	0f 90       	pop	r0
    2efc:	1f 90       	pop	r1
    2efe:	18 95       	reti

00002f00 <__vector_5>:

ISR(INT4_vect) {
    2f00:	1f 92       	push	r1
    2f02:	0f 92       	push	r0
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	0f 92       	push	r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	0b b6       	in	r0, 0x3b	; 59
    2f0c:	0f 92       	push	r0
    2f0e:	2f 93       	push	r18
    2f10:	3f 93       	push	r19
    2f12:	4f 93       	push	r20
    2f14:	5f 93       	push	r21
    2f16:	6f 93       	push	r22
    2f18:	7f 93       	push	r23
    2f1a:	8f 93       	push	r24
    2f1c:	9f 93       	push	r25
    2f1e:	af 93       	push	r26
    2f20:	bf 93       	push	r27
    2f22:	ef 93       	push	r30
    2f24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2f26:	80 91 be 06 	lds	r24, 0x06BE
    2f2a:	90 91 bf 06 	lds	r25, 0x06BF
    2f2e:	89 2b       	or	r24, r25
    2f30:	29 f0       	breq	.+10     	; 0x2f3c <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    2f32:	e0 91 be 06 	lds	r30, 0x06BE
    2f36:	f0 91 bf 06 	lds	r31, 0x06BF
    2f3a:	19 95       	eicall
}
    2f3c:	ff 91       	pop	r31
    2f3e:	ef 91       	pop	r30
    2f40:	bf 91       	pop	r27
    2f42:	af 91       	pop	r26
    2f44:	9f 91       	pop	r25
    2f46:	8f 91       	pop	r24
    2f48:	7f 91       	pop	r23
    2f4a:	6f 91       	pop	r22
    2f4c:	5f 91       	pop	r21
    2f4e:	4f 91       	pop	r20
    2f50:	3f 91       	pop	r19
    2f52:	2f 91       	pop	r18
    2f54:	0f 90       	pop	r0
    2f56:	0b be       	out	0x3b, r0	; 59
    2f58:	0f 90       	pop	r0
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	0f 90       	pop	r0
    2f5e:	1f 90       	pop	r1
    2f60:	18 95       	reti

00002f62 <__vector_6>:

ISR(INT5_vect) {
    2f62:	1f 92       	push	r1
    2f64:	0f 92       	push	r0
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	0f 92       	push	r0
    2f6a:	11 24       	eor	r1, r1
    2f6c:	0b b6       	in	r0, 0x3b	; 59
    2f6e:	0f 92       	push	r0
    2f70:	2f 93       	push	r18
    2f72:	3f 93       	push	r19
    2f74:	4f 93       	push	r20
    2f76:	5f 93       	push	r21
    2f78:	6f 93       	push	r22
    2f7a:	7f 93       	push	r23
    2f7c:	8f 93       	push	r24
    2f7e:	9f 93       	push	r25
    2f80:	af 93       	push	r26
    2f82:	bf 93       	push	r27
    2f84:	ef 93       	push	r30
    2f86:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    2f88:	80 91 c0 06 	lds	r24, 0x06C0
    2f8c:	90 91 c1 06 	lds	r25, 0x06C1
    2f90:	89 2b       	or	r24, r25
    2f92:	29 f0       	breq	.+10     	; 0x2f9e <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    2f94:	e0 91 c0 06 	lds	r30, 0x06C0
    2f98:	f0 91 c1 06 	lds	r31, 0x06C1
    2f9c:	19 95       	eicall
}
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	7f 91       	pop	r23
    2fac:	6f 91       	pop	r22
    2fae:	5f 91       	pop	r21
    2fb0:	4f 91       	pop	r20
    2fb2:	3f 91       	pop	r19
    2fb4:	2f 91       	pop	r18
    2fb6:	0f 90       	pop	r0
    2fb8:	0b be       	out	0x3b, r0	; 59
    2fba:	0f 90       	pop	r0
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	0f 90       	pop	r0
    2fc0:	1f 90       	pop	r1
    2fc2:	18 95       	reti

00002fc4 <__vector_7>:

ISR(INT6_vect) {
    2fc4:	1f 92       	push	r1
    2fc6:	0f 92       	push	r0
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	0f 92       	push	r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	0b b6       	in	r0, 0x3b	; 59
    2fd0:	0f 92       	push	r0
    2fd2:	2f 93       	push	r18
    2fd4:	3f 93       	push	r19
    2fd6:	4f 93       	push	r20
    2fd8:	5f 93       	push	r21
    2fda:	6f 93       	push	r22
    2fdc:	7f 93       	push	r23
    2fde:	8f 93       	push	r24
    2fe0:	9f 93       	push	r25
    2fe2:	af 93       	push	r26
    2fe4:	bf 93       	push	r27
    2fe6:	ef 93       	push	r30
    2fe8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    2fea:	80 91 ca 06 	lds	r24, 0x06CA
    2fee:	90 91 cb 06 	lds	r25, 0x06CB
    2ff2:	89 2b       	or	r24, r25
    2ff4:	29 f0       	breq	.+10     	; 0x3000 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    2ff6:	e0 91 ca 06 	lds	r30, 0x06CA
    2ffa:	f0 91 cb 06 	lds	r31, 0x06CB
    2ffe:	19 95       	eicall
}
    3000:	ff 91       	pop	r31
    3002:	ef 91       	pop	r30
    3004:	bf 91       	pop	r27
    3006:	af 91       	pop	r26
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	7f 91       	pop	r23
    300e:	6f 91       	pop	r22
    3010:	5f 91       	pop	r21
    3012:	4f 91       	pop	r20
    3014:	3f 91       	pop	r19
    3016:	2f 91       	pop	r18
    3018:	0f 90       	pop	r0
    301a:	0b be       	out	0x3b, r0	; 59
    301c:	0f 90       	pop	r0
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	0f 90       	pop	r0
    3022:	1f 90       	pop	r1
    3024:	18 95       	reti

00003026 <__vector_8>:

ISR(INT7_vect) {
    3026:	1f 92       	push	r1
    3028:	0f 92       	push	r0
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	0f 92       	push	r0
    302e:	11 24       	eor	r1, r1
    3030:	0b b6       	in	r0, 0x3b	; 59
    3032:	0f 92       	push	r0
    3034:	2f 93       	push	r18
    3036:	3f 93       	push	r19
    3038:	4f 93       	push	r20
    303a:	5f 93       	push	r21
    303c:	6f 93       	push	r22
    303e:	7f 93       	push	r23
    3040:	8f 93       	push	r24
    3042:	9f 93       	push	r25
    3044:	af 93       	push	r26
    3046:	bf 93       	push	r27
    3048:	ef 93       	push	r30
    304a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    304c:	80 91 cc 06 	lds	r24, 0x06CC
    3050:	90 91 cd 06 	lds	r25, 0x06CD
    3054:	89 2b       	or	r24, r25
    3056:	29 f0       	breq	.+10     	; 0x3062 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    3058:	e0 91 cc 06 	lds	r30, 0x06CC
    305c:	f0 91 cd 06 	lds	r31, 0x06CD
    3060:	19 95       	eicall
}
    3062:	ff 91       	pop	r31
    3064:	ef 91       	pop	r30
    3066:	bf 91       	pop	r27
    3068:	af 91       	pop	r26
    306a:	9f 91       	pop	r25
    306c:	8f 91       	pop	r24
    306e:	7f 91       	pop	r23
    3070:	6f 91       	pop	r22
    3072:	5f 91       	pop	r21
    3074:	4f 91       	pop	r20
    3076:	3f 91       	pop	r19
    3078:	2f 91       	pop	r18
    307a:	0f 90       	pop	r0
    307c:	0b be       	out	0x3b, r0	; 59
    307e:	0f 90       	pop	r0
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	0f 90       	pop	r0
    3084:	1f 90       	pop	r1
    3086:	18 95       	reti

00003088 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3088:	80 91 fe 06 	lds	r24, 0x06FE
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	20 91 ff 06 	lds	r18, 0x06FF
    3092:	82 1b       	sub	r24, r18
    3094:	91 09       	sbc	r25, r1
    3096:	08 95       	ret

00003098 <_ZN7TwoWire4readEv>:
    3098:	90 91 ff 06 	lds	r25, 0x06FF
    309c:	80 91 fe 06 	lds	r24, 0x06FE
    30a0:	98 17       	cp	r25, r24
    30a2:	50 f4       	brcc	.+20     	; 0x30b8 <_ZN7TwoWire4readEv+0x20>
    30a4:	e9 2f       	mov	r30, r25
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	e0 50       	subi	r30, 0x00	; 0
    30aa:	f9 4f       	sbci	r31, 0xF9	; 249
    30ac:	20 81       	ld	r18, Z
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	9f 5f       	subi	r25, 0xFF	; 255
    30b2:	90 93 ff 06 	sts	0x06FF, r25
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <_ZN7TwoWire4readEv+0x24>
    30b8:	2f ef       	ldi	r18, 0xFF	; 255
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	c9 01       	movw	r24, r18
    30be:	08 95       	ret

000030c0 <_ZN7TwoWire4peekEv>:
    30c0:	e0 91 ff 06 	lds	r30, 0x06FF
    30c4:	80 91 fe 06 	lds	r24, 0x06FE
    30c8:	e8 17       	cp	r30, r24
    30ca:	30 f4       	brcc	.+12     	; 0x30d8 <_ZN7TwoWire4peekEv+0x18>
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	e0 50       	subi	r30, 0x00	; 0
    30d0:	f9 4f       	sbci	r31, 0xF9	; 249
    30d2:	80 81       	ld	r24, Z
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	08 95       	ret
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	9f ef       	ldi	r25, 0xFF	; 255
    30dc:	08 95       	ret

000030de <_ZN7TwoWire5flushEv>:
    30de:	08 95       	ret

000030e0 <_ZN7TwoWire5writeEPKhj>:
    30e0:	cf 92       	push	r12
    30e2:	df 92       	push	r13
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	8c 01       	movw	r16, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	6a 01       	movw	r12, r20
    30f6:	20 91 da 06 	lds	r18, 0x06DA
    30fa:	22 23       	and	r18, r18
    30fc:	a1 f0       	breq	.+40     	; 0x3126 <_ZN7TwoWire5writeEPKhj+0x46>
    30fe:	41 15       	cp	r20, r1
    3100:	51 05       	cpc	r21, r1
    3102:	99 f0       	breq	.+38     	; 0x312a <_ZN7TwoWire5writeEPKhj+0x4a>
    3104:	eb 01       	movw	r28, r22
    3106:	7b 01       	movw	r14, r22
    3108:	e4 0e       	add	r14, r20
    310a:	f5 1e       	adc	r15, r21
    310c:	69 91       	ld	r22, Y+
    310e:	d8 01       	movw	r26, r16
    3110:	ed 91       	ld	r30, X+
    3112:	fc 91       	ld	r31, X
    3114:	01 90       	ld	r0, Z+
    3116:	f0 81       	ld	r31, Z
    3118:	e0 2d       	mov	r30, r0
    311a:	c8 01       	movw	r24, r16
    311c:	19 95       	eicall
    311e:	ce 15       	cp	r28, r14
    3120:	df 05       	cpc	r29, r15
    3122:	a1 f7       	brne	.-24     	; 0x310c <_ZN7TwoWire5writeEPKhj+0x2c>
    3124:	02 c0       	rjmp	.+4      	; 0x312a <_ZN7TwoWire5writeEPKhj+0x4a>
    3126:	64 2f       	mov	r22, r20
    3128:	d7 dc       	rcall	.-1618   	; 0x2ad8 <twi_transmit>
    312a:	c6 01       	movw	r24, r12
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	08 95       	ret

0000313e <_ZN7TwoWire5writeEh>:
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	1f 92       	push	r1
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	fc 01       	movw	r30, r24
    314a:	69 83       	std	Y+1, r22	; 0x01
    314c:	90 91 da 06 	lds	r25, 0x06DA
    3150:	99 23       	and	r25, r25
    3152:	d9 f0       	breq	.+54     	; 0x318a <_ZN7TwoWire5writeEh+0x4c>
    3154:	90 91 db 06 	lds	r25, 0x06DB
    3158:	90 32       	cpi	r25, 0x20	; 32
    315a:	38 f0       	brcs	.+14     	; 0x316a <_ZN7TwoWire5writeEh+0x2c>
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	93 83       	std	Z+3, r25	; 0x03
    3162:	82 83       	std	Z+2, r24	; 0x02
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	16 c0       	rjmp	.+44     	; 0x3196 <_ZN7TwoWire5writeEh+0x58>
    316a:	80 91 dc 06 	lds	r24, 0x06DC
    316e:	e8 2f       	mov	r30, r24
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	e3 52       	subi	r30, 0x23	; 35
    3174:	f9 4f       	sbci	r31, 0xF9	; 249
    3176:	99 81       	ldd	r25, Y+1	; 0x01
    3178:	90 83       	st	Z, r25
    317a:	8f 5f       	subi	r24, 0xFF	; 255
    317c:	80 93 dc 06 	sts	0x06DC, r24
    3180:	80 93 db 06 	sts	0x06DB, r24
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	06 c0       	rjmp	.+12     	; 0x3196 <_ZN7TwoWire5writeEh+0x58>
    318a:	61 e0       	ldi	r22, 0x01	; 1
    318c:	ce 01       	movw	r24, r28
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	a3 dc       	rcall	.-1722   	; 0x2ad8 <twi_transmit>
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	0f 90       	pop	r0
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	08 95       	ret

0000319e <_ZN7TwoWireC1Ev>:
    319e:	fc 01       	movw	r30, r24
    31a0:	13 82       	std	Z+3, r1	; 0x03
    31a2:	12 82       	std	Z+2, r1	; 0x02
    31a4:	88 ee       	ldi	r24, 0xE8	; 232
    31a6:	93 e0       	ldi	r25, 0x03	; 3
    31a8:	a0 e0       	ldi	r26, 0x00	; 0
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	84 83       	std	Z+4, r24	; 0x04
    31ae:	95 83       	std	Z+5, r25	; 0x05
    31b0:	a6 83       	std	Z+6, r26	; 0x06
    31b2:	b7 83       	std	Z+7, r27	; 0x07
    31b4:	83 ec       	ldi	r24, 0xC3	; 195
    31b6:	92 e0       	ldi	r25, 0x02	; 2
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	08 95       	ret

000031be <_ZN7TwoWire5beginEv>:
    31be:	10 92 ff 06 	sts	0x06FF, r1
    31c2:	10 92 fe 06 	sts	0x06FE, r1
    31c6:	10 92 dc 06 	sts	0x06DC, r1
    31ca:	10 92 db 06 	sts	0x06DB, r1
    31ce:	bf cb       	rjmp	.-2178   	; 0x294e <twi_init>
    31d0:	08 95       	ret

000031d2 <_ZN7TwoWire11requestFromEhhh>:
    31d2:	86 2f       	mov	r24, r22
    31d4:	41 32       	cpi	r20, 0x21	; 33
    31d6:	08 f0       	brcs	.+2      	; 0x31da <_ZN7TwoWire11requestFromEhhh+0x8>
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	77 e0       	ldi	r23, 0x07	; 7
    31de:	d3 db       	rcall	.-2138   	; 0x2986 <twi_readFrom>
    31e0:	10 92 ff 06 	sts	0x06FF, r1
    31e4:	80 93 fe 06 	sts	0x06FE, r24
    31e8:	08 95       	ret

000031ea <_ZN7TwoWire11requestFromEhh>:
    31ea:	21 e0       	ldi	r18, 0x01	; 1
    31ec:	f2 cf       	rjmp	.-28     	; 0x31d2 <_ZN7TwoWire11requestFromEhhh>
    31ee:	08 95       	ret

000031f0 <_ZN7TwoWire11requestFromEii>:
    31f0:	21 e0       	ldi	r18, 0x01	; 1
    31f2:	ef cf       	rjmp	.-34     	; 0x31d2 <_ZN7TwoWire11requestFromEhhh>
    31f4:	08 95       	ret

000031f6 <_ZN7TwoWire17beginTransmissionEh>:
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	80 93 da 06 	sts	0x06DA, r24
    31fc:	60 93 fd 06 	sts	0x06FD, r22
    3200:	10 92 dc 06 	sts	0x06DC, r1
    3204:	10 92 db 06 	sts	0x06DB, r1
    3208:	08 95       	ret

0000320a <_ZN7TwoWire17beginTransmissionEi>:
    320a:	f5 cf       	rjmp	.-22     	; 0x31f6 <_ZN7TwoWire17beginTransmissionEh>
    320c:	08 95       	ret

0000320e <_ZN7TwoWire15endTransmissionEh>:
    320e:	0f 93       	push	r16
    3210:	06 2f       	mov	r16, r22
    3212:	21 e0       	ldi	r18, 0x01	; 1
    3214:	40 91 db 06 	lds	r20, 0x06DB
    3218:	6d ed       	ldi	r22, 0xDD	; 221
    321a:	76 e0       	ldi	r23, 0x06	; 6
    321c:	80 91 fd 06 	lds	r24, 0x06FD
    3220:	fe db       	rcall	.-2052   	; 0x2a1e <twi_writeTo>
    3222:	10 92 dc 06 	sts	0x06DC, r1
    3226:	10 92 db 06 	sts	0x06DB, r1
    322a:	10 92 da 06 	sts	0x06DA, r1
    322e:	0f 91       	pop	r16
    3230:	08 95       	ret

00003232 <_ZN7TwoWire15endTransmissionEv>:
    3232:	61 e0       	ldi	r22, 0x01	; 1
    3234:	ec cf       	rjmp	.-40     	; 0x320e <_ZN7TwoWire15endTransmissionEh>
    3236:	08 95       	ret

00003238 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3238:	8e ec       	ldi	r24, 0xCE	; 206
    323a:	96 e0       	ldi	r25, 0x06	; 6
    323c:	b0 cf       	rjmp	.-160    	; 0x319e <_ZN7TwoWireC1Ev>
    323e:	08 95       	ret

00003240 <__vector_23>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    3240:	1f 92       	push	r1
    3242:	0f 92       	push	r0
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	0f 92       	push	r0
    3248:	11 24       	eor	r1, r1
    324a:	2f 93       	push	r18
    324c:	3f 93       	push	r19
    324e:	8f 93       	push	r24
    3250:	9f 93       	push	r25
    3252:	af 93       	push	r26
    3254:	bf 93       	push	r27
    3256:	80 91 21 07 	lds	r24, 0x0721
    325a:	90 91 22 07 	lds	r25, 0x0722
    325e:	a0 91 23 07 	lds	r26, 0x0723
    3262:	b0 91 24 07 	lds	r27, 0x0724
    3266:	30 91 20 07 	lds	r19, 0x0720
    326a:	23 e0       	ldi	r18, 0x03	; 3
    326c:	23 0f       	add	r18, r19
    326e:	2d 37       	cpi	r18, 0x7D	; 125
    3270:	20 f4       	brcc	.+8      	; 0x327a <__vector_23+0x3a>
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	a1 1d       	adc	r26, r1
    3276:	b1 1d       	adc	r27, r1
    3278:	05 c0       	rjmp	.+10     	; 0x3284 <__vector_23+0x44>
    327a:	26 e8       	ldi	r18, 0x86	; 134
    327c:	23 0f       	add	r18, r19
    327e:	02 96       	adiw	r24, 0x02	; 2
    3280:	a1 1d       	adc	r26, r1
    3282:	b1 1d       	adc	r27, r1
    3284:	20 93 20 07 	sts	0x0720, r18
    3288:	80 93 21 07 	sts	0x0721, r24
    328c:	90 93 22 07 	sts	0x0722, r25
    3290:	a0 93 23 07 	sts	0x0723, r26
    3294:	b0 93 24 07 	sts	0x0724, r27
    3298:	80 91 25 07 	lds	r24, 0x0725
    329c:	90 91 26 07 	lds	r25, 0x0726
    32a0:	a0 91 27 07 	lds	r26, 0x0727
    32a4:	b0 91 28 07 	lds	r27, 0x0728
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	a1 1d       	adc	r26, r1
    32ac:	b1 1d       	adc	r27, r1
    32ae:	80 93 25 07 	sts	0x0725, r24
    32b2:	90 93 26 07 	sts	0x0726, r25
    32b6:	a0 93 27 07 	sts	0x0727, r26
    32ba:	b0 93 28 07 	sts	0x0728, r27
    32be:	bf 91       	pop	r27
    32c0:	af 91       	pop	r26
    32c2:	9f 91       	pop	r25
    32c4:	8f 91       	pop	r24
    32c6:	3f 91       	pop	r19
    32c8:	2f 91       	pop	r18
    32ca:	0f 90       	pop	r0
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	0f 90       	pop	r0
    32d0:	1f 90       	pop	r1
    32d2:	18 95       	reti

000032d4 <micros>:
    32d4:	3f b7       	in	r19, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	80 91 25 07 	lds	r24, 0x0725
    32dc:	90 91 26 07 	lds	r25, 0x0726
    32e0:	a0 91 27 07 	lds	r26, 0x0727
    32e4:	b0 91 28 07 	lds	r27, 0x0728
    32e8:	26 b5       	in	r18, 0x26	; 38
    32ea:	a8 9b       	sbis	0x15, 0	; 21
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <micros+0x24>
    32ee:	2f 3f       	cpi	r18, 0xFF	; 255
    32f0:	19 f0       	breq	.+6      	; 0x32f8 <micros+0x24>
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	a1 1d       	adc	r26, r1
    32f6:	b1 1d       	adc	r27, r1
    32f8:	3f bf       	out	0x3f, r19	; 63
    32fa:	ba 2f       	mov	r27, r26
    32fc:	a9 2f       	mov	r26, r25
    32fe:	98 2f       	mov	r25, r24
    3300:	88 27       	eor	r24, r24
    3302:	82 0f       	add	r24, r18
    3304:	91 1d       	adc	r25, r1
    3306:	a1 1d       	adc	r26, r1
    3308:	b1 1d       	adc	r27, r1
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	66 0f       	add	r22, r22
    3310:	77 1f       	adc	r23, r23
    3312:	88 1f       	adc	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	66 0f       	add	r22, r22
    3318:	77 1f       	adc	r23, r23
    331a:	88 1f       	adc	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	08 95       	ret

00003320 <delay>:
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	6b 01       	movw	r12, r22
    332e:	7c 01       	movw	r14, r24
    3330:	d1 df       	rcall	.-94     	; 0x32d4 <micros>
    3332:	eb 01       	movw	r28, r22
    3334:	c1 14       	cp	r12, r1
    3336:	d1 04       	cpc	r13, r1
    3338:	e1 04       	cpc	r14, r1
    333a:	f1 04       	cpc	r15, r1
    333c:	a1 f0       	breq	.+40     	; 0x3366 <delay+0x46>
    333e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <yield>
    3342:	c8 df       	rcall	.-112    	; 0x32d4 <micros>
    3344:	6c 1b       	sub	r22, r28
    3346:	7d 0b       	sbc	r23, r29
    3348:	68 3e       	cpi	r22, 0xE8	; 232
    334a:	73 40       	sbci	r23, 0x03	; 3
    334c:	38 f0       	brcs	.+14     	; 0x335c <delay+0x3c>
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	c8 1a       	sub	r12, r24
    3352:	d1 08       	sbc	r13, r1
    3354:	e1 08       	sbc	r14, r1
    3356:	f1 08       	sbc	r15, r1
    3358:	c8 51       	subi	r28, 0x18	; 24
    335a:	dc 4f       	sbci	r29, 0xFC	; 252
    335c:	c1 14       	cp	r12, r1
    335e:	d1 04       	cpc	r13, r1
    3360:	e1 04       	cpc	r14, r1
    3362:	f1 04       	cpc	r15, r1
    3364:	61 f7       	brne	.-40     	; 0x333e <delay+0x1e>
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	cf 90       	pop	r12
    3372:	08 95       	ret

00003374 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3374:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3376:	84 b5       	in	r24, 0x24	; 36
    3378:	82 60       	ori	r24, 0x02	; 2
    337a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    337c:	84 b5       	in	r24, 0x24	; 36
    337e:	81 60       	ori	r24, 0x01	; 1
    3380:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3382:	85 b5       	in	r24, 0x25	; 37
    3384:	82 60       	ori	r24, 0x02	; 2
    3386:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3388:	85 b5       	in	r24, 0x25	; 37
    338a:	81 60       	ori	r24, 0x01	; 1
    338c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    338e:	ee e6       	ldi	r30, 0x6E	; 110
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	81 60       	ori	r24, 0x01	; 1
    3396:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3398:	e1 e8       	ldi	r30, 0x81	; 129
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    339e:	80 81       	ld	r24, Z
    33a0:	82 60       	ori	r24, 0x02	; 2
    33a2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    33a4:	80 81       	ld	r24, Z
    33a6:	81 60       	ori	r24, 0x01	; 1
    33a8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    33aa:	e0 e8       	ldi	r30, 0x80	; 128
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	81 60       	ori	r24, 0x01	; 1
    33b2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    33b4:	e1 eb       	ldi	r30, 0xB1	; 177
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	84 60       	ori	r24, 0x04	; 4
    33bc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    33be:	e0 eb       	ldi	r30, 0xB0	; 176
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	81 60       	ori	r24, 0x01	; 1
    33c6:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    33c8:	e1 e9       	ldi	r30, 0x91	; 145
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	82 60       	ori	r24, 0x02	; 2
    33d0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    33d2:	80 81       	ld	r24, Z
    33d4:	81 60       	ori	r24, 0x01	; 1
    33d6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    33d8:	e0 e9       	ldi	r30, 0x90	; 144
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	81 60       	ori	r24, 0x01	; 1
    33e0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    33e2:	e1 ea       	ldi	r30, 0xA1	; 161
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	82 60       	ori	r24, 0x02	; 2
    33ea:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    33ec:	80 81       	ld	r24, Z
    33ee:	81 60       	ori	r24, 0x01	; 1
    33f0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    33f2:	e0 ea       	ldi	r30, 0xA0	; 160
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	81 60       	ori	r24, 0x01	; 1
    33fa:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    33fc:	e1 e2       	ldi	r30, 0x21	; 33
    33fe:	f1 e0       	ldi	r31, 0x01	; 1
    3400:	80 81       	ld	r24, Z
    3402:	82 60       	ori	r24, 0x02	; 2
    3404:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3406:	80 81       	ld	r24, Z
    3408:	81 60       	ori	r24, 0x01	; 1
    340a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    340c:	e0 e2       	ldi	r30, 0x20	; 32
    340e:	f1 e0       	ldi	r31, 0x01	; 1
    3410:	80 81       	ld	r24, Z
    3412:	81 60       	ori	r24, 0x01	; 1
    3414:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3416:	ea e7       	ldi	r30, 0x7A	; 122
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	84 60       	ori	r24, 0x04	; 4
    341e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    3420:	80 81       	ld	r24, Z
    3422:	82 60       	ori	r24, 0x02	; 2
    3424:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3426:	80 81       	ld	r24, Z
    3428:	81 60       	ori	r24, 0x01	; 1
    342a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    342c:	80 81       	ld	r24, Z
    342e:	80 68       	ori	r24, 0x80	; 128
    3430:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3432:	10 92 c1 00 	sts	0x00C1, r1
    3436:	08 95       	ret

00003438 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	fc 01       	movw	r30, r24
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	e2 31       	cpi	r30, 0x12	; 18
    3440:	f1 05       	cpc	r31, r1
    3442:	08 f0       	brcs	.+2      	; 0x3446 <turnOffPWM+0xe>
    3444:	60 c0       	rjmp	.+192    	; 0x3506 <turnOffPWM+0xce>
    3446:	88 27       	eor	r24, r24
    3448:	e5 5c       	subi	r30, 0xC5	; 197
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	8f 4f       	sbci	r24, 0xFF	; 255
    344e:	e0 c3       	rjmp	.+1984   	; 0x3c10 <__tablejump2__>
    3450:	e0 e8       	ldi	r30, 0x80	; 128
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	8f 77       	andi	r24, 0x7F	; 127
    3458:	80 83       	st	Z, r24
    345a:	08 95       	ret
    345c:	e0 e8       	ldi	r30, 0x80	; 128
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	8f 7d       	andi	r24, 0xDF	; 223
    3464:	80 83       	st	Z, r24
    3466:	08 95       	ret
    3468:	e0 e8       	ldi	r30, 0x80	; 128
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	80 81       	ld	r24, Z
    346e:	87 7f       	andi	r24, 0xF7	; 247
    3470:	80 83       	st	Z, r24
    3472:	08 95       	ret
    3474:	84 b5       	in	r24, 0x24	; 36
    3476:	8f 77       	andi	r24, 0x7F	; 127
    3478:	84 bd       	out	0x24, r24	; 36
    347a:	08 95       	ret
    347c:	84 b5       	in	r24, 0x24	; 36
    347e:	8f 7d       	andi	r24, 0xDF	; 223
    3480:	84 bd       	out	0x24, r24	; 36
    3482:	08 95       	ret
    3484:	e0 eb       	ldi	r30, 0xB0	; 176
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	8f 77       	andi	r24, 0x7F	; 127
    348c:	80 83       	st	Z, r24
    348e:	08 95       	ret
    3490:	e0 eb       	ldi	r30, 0xB0	; 176
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	8f 7d       	andi	r24, 0xDF	; 223
    3498:	80 83       	st	Z, r24
    349a:	08 95       	ret
    349c:	e0 e9       	ldi	r30, 0x90	; 144
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	8f 77       	andi	r24, 0x7F	; 127
    34a4:	80 83       	st	Z, r24
    34a6:	08 95       	ret
    34a8:	e0 e9       	ldi	r30, 0x90	; 144
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	8f 7d       	andi	r24, 0xDF	; 223
    34b0:	80 83       	st	Z, r24
    34b2:	08 95       	ret
    34b4:	e0 e9       	ldi	r30, 0x90	; 144
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	87 7f       	andi	r24, 0xF7	; 247
    34bc:	80 83       	st	Z, r24
    34be:	08 95       	ret
    34c0:	e0 ea       	ldi	r30, 0xA0	; 160
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	8f 77       	andi	r24, 0x7F	; 127
    34c8:	80 83       	st	Z, r24
    34ca:	08 95       	ret
    34cc:	e0 ea       	ldi	r30, 0xA0	; 160
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	8f 7d       	andi	r24, 0xDF	; 223
    34d4:	80 83       	st	Z, r24
    34d6:	08 95       	ret
    34d8:	e0 ea       	ldi	r30, 0xA0	; 160
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	87 7f       	andi	r24, 0xF7	; 247
    34e0:	80 83       	st	Z, r24
    34e2:	08 95       	ret
    34e4:	e0 e2       	ldi	r30, 0x20	; 32
    34e6:	f1 e0       	ldi	r31, 0x01	; 1
    34e8:	80 81       	ld	r24, Z
    34ea:	8f 77       	andi	r24, 0x7F	; 127
    34ec:	80 83       	st	Z, r24
    34ee:	08 95       	ret
    34f0:	e0 e2       	ldi	r30, 0x20	; 32
    34f2:	f1 e0       	ldi	r31, 0x01	; 1
    34f4:	80 81       	ld	r24, Z
    34f6:	8f 7d       	andi	r24, 0xDF	; 223
    34f8:	80 83       	st	Z, r24
    34fa:	08 95       	ret
    34fc:	e0 e2       	ldi	r30, 0x20	; 32
    34fe:	f1 e0       	ldi	r31, 0x01	; 1
    3500:	80 81       	ld	r24, Z
    3502:	87 7f       	andi	r24, 0xF7	; 247
    3504:	80 83       	st	Z, r24
    3506:	08 95       	ret

00003508 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	f9 01       	movw	r30, r18
    3514:	e7 53       	subi	r30, 0x37	; 55
    3516:	fd 4f       	sbci	r31, 0xFD	; 253
    3518:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    351a:	f9 01       	movw	r30, r18
    351c:	e1 5f       	subi	r30, 0xF1	; 241
    351e:	fc 4f       	sbci	r31, 0xFC	; 252
    3520:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    3522:	f9 01       	movw	r30, r18
    3524:	eb 5a       	subi	r30, 0xAB	; 171
    3526:	fc 4f       	sbci	r31, 0xFC	; 252
    3528:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    352a:	cc 23       	and	r28, r28
    352c:	c9 f0       	breq	.+50     	; 0x3560 <digitalWrite+0x58>
    352e:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3530:	81 11       	cpse	r24, r1
    3532:	82 df       	rcall	.-252    	; 0x3438 <turnOffPWM>

	out = portOutputRegister(port);
    3534:	ec 2f       	mov	r30, r28
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	ee 0f       	add	r30, r30
    353a:	ff 1f       	adc	r31, r31
    353c:	e5 56       	subi	r30, 0x65	; 101
    353e:	fc 4f       	sbci	r31, 0xFC	; 252
    3540:	a5 91       	lpm	r26, Z+
    3542:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3544:	8f b7       	in	r24, 0x3f	; 63
	cli();
    3546:	f8 94       	cli

	if (val == LOW) {
    3548:	d1 11       	cpse	r29, r1
    354a:	06 c0       	rjmp	.+12     	; 0x3558 <digitalWrite+0x50>
		*out &= ~bit;
    354c:	9c 91       	ld	r25, X
    354e:	e1 2f       	mov	r30, r17
    3550:	e0 95       	com	r30
    3552:	e9 23       	and	r30, r25
    3554:	ec 93       	st	X, r30
    3556:	03 c0       	rjmp	.+6      	; 0x355e <digitalWrite+0x56>
	} else {
		*out |= bit;
    3558:	ec 91       	ld	r30, X
    355a:	e1 2b       	or	r30, r17
    355c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    355e:	8f bf       	out	0x3f, r24	; 63
}
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	08 95       	ret

00003568 <__subsf3>:
    3568:	50 58       	subi	r21, 0x80	; 128

0000356a <__addsf3>:
    356a:	bb 27       	eor	r27, r27
    356c:	aa 27       	eor	r26, r26
    356e:	0e d0       	rcall	.+28     	; 0x358c <__addsf3x>
    3570:	fc c1       	rjmp	.+1016   	; 0x396a <__fp_round>
    3572:	ed d1       	rcall	.+986    	; 0x394e <__fp_pscA>
    3574:	30 f0       	brcs	.+12     	; 0x3582 <__addsf3+0x18>
    3576:	f2 d1       	rcall	.+996    	; 0x395c <__fp_pscB>
    3578:	20 f0       	brcs	.+8      	; 0x3582 <__addsf3+0x18>
    357a:	31 f4       	brne	.+12     	; 0x3588 <__addsf3+0x1e>
    357c:	9f 3f       	cpi	r25, 0xFF	; 255
    357e:	11 f4       	brne	.+4      	; 0x3584 <__addsf3+0x1a>
    3580:	1e f4       	brtc	.+6      	; 0x3588 <__addsf3+0x1e>
    3582:	bd c1       	rjmp	.+890    	; 0x38fe <__fp_nan>
    3584:	0e f4       	brtc	.+2      	; 0x3588 <__addsf3+0x1e>
    3586:	e0 95       	com	r30
    3588:	e7 fb       	bst	r30, 7
    358a:	b3 c1       	rjmp	.+870    	; 0x38f2 <__fp_inf>

0000358c <__addsf3x>:
    358c:	e9 2f       	mov	r30, r25
    358e:	fe d1       	rcall	.+1020   	; 0x398c <__fp_split3>
    3590:	80 f3       	brcs	.-32     	; 0x3572 <__addsf3+0x8>
    3592:	ba 17       	cp	r27, r26
    3594:	62 07       	cpc	r22, r18
    3596:	73 07       	cpc	r23, r19
    3598:	84 07       	cpc	r24, r20
    359a:	95 07       	cpc	r25, r21
    359c:	18 f0       	brcs	.+6      	; 0x35a4 <__addsf3x+0x18>
    359e:	71 f4       	brne	.+28     	; 0x35bc <__addsf3x+0x30>
    35a0:	9e f5       	brtc	.+102    	; 0x3608 <__addsf3x+0x7c>
    35a2:	16 c2       	rjmp	.+1068   	; 0x39d0 <__fp_zero>
    35a4:	0e f4       	brtc	.+2      	; 0x35a8 <__addsf3x+0x1c>
    35a6:	e0 95       	com	r30
    35a8:	0b 2e       	mov	r0, r27
    35aa:	ba 2f       	mov	r27, r26
    35ac:	a0 2d       	mov	r26, r0
    35ae:	0b 01       	movw	r0, r22
    35b0:	b9 01       	movw	r22, r18
    35b2:	90 01       	movw	r18, r0
    35b4:	0c 01       	movw	r0, r24
    35b6:	ca 01       	movw	r24, r20
    35b8:	a0 01       	movw	r20, r0
    35ba:	11 24       	eor	r1, r1
    35bc:	ff 27       	eor	r31, r31
    35be:	59 1b       	sub	r21, r25
    35c0:	99 f0       	breq	.+38     	; 0x35e8 <__addsf3x+0x5c>
    35c2:	59 3f       	cpi	r21, 0xF9	; 249
    35c4:	50 f4       	brcc	.+20     	; 0x35da <__addsf3x+0x4e>
    35c6:	50 3e       	cpi	r21, 0xE0	; 224
    35c8:	68 f1       	brcs	.+90     	; 0x3624 <__addsf3x+0x98>
    35ca:	1a 16       	cp	r1, r26
    35cc:	f0 40       	sbci	r31, 0x00	; 0
    35ce:	a2 2f       	mov	r26, r18
    35d0:	23 2f       	mov	r18, r19
    35d2:	34 2f       	mov	r19, r20
    35d4:	44 27       	eor	r20, r20
    35d6:	58 5f       	subi	r21, 0xF8	; 248
    35d8:	f3 cf       	rjmp	.-26     	; 0x35c0 <__addsf3x+0x34>
    35da:	46 95       	lsr	r20
    35dc:	37 95       	ror	r19
    35de:	27 95       	ror	r18
    35e0:	a7 95       	ror	r26
    35e2:	f0 40       	sbci	r31, 0x00	; 0
    35e4:	53 95       	inc	r21
    35e6:	c9 f7       	brne	.-14     	; 0x35da <__addsf3x+0x4e>
    35e8:	7e f4       	brtc	.+30     	; 0x3608 <__addsf3x+0x7c>
    35ea:	1f 16       	cp	r1, r31
    35ec:	ba 0b       	sbc	r27, r26
    35ee:	62 0b       	sbc	r22, r18
    35f0:	73 0b       	sbc	r23, r19
    35f2:	84 0b       	sbc	r24, r20
    35f4:	ba f0       	brmi	.+46     	; 0x3624 <__addsf3x+0x98>
    35f6:	91 50       	subi	r25, 0x01	; 1
    35f8:	a1 f0       	breq	.+40     	; 0x3622 <__addsf3x+0x96>
    35fa:	ff 0f       	add	r31, r31
    35fc:	bb 1f       	adc	r27, r27
    35fe:	66 1f       	adc	r22, r22
    3600:	77 1f       	adc	r23, r23
    3602:	88 1f       	adc	r24, r24
    3604:	c2 f7       	brpl	.-16     	; 0x35f6 <__addsf3x+0x6a>
    3606:	0e c0       	rjmp	.+28     	; 0x3624 <__addsf3x+0x98>
    3608:	ba 0f       	add	r27, r26
    360a:	62 1f       	adc	r22, r18
    360c:	73 1f       	adc	r23, r19
    360e:	84 1f       	adc	r24, r20
    3610:	48 f4       	brcc	.+18     	; 0x3624 <__addsf3x+0x98>
    3612:	87 95       	ror	r24
    3614:	77 95       	ror	r23
    3616:	67 95       	ror	r22
    3618:	b7 95       	ror	r27
    361a:	f7 95       	ror	r31
    361c:	9e 3f       	cpi	r25, 0xFE	; 254
    361e:	08 f0       	brcs	.+2      	; 0x3622 <__addsf3x+0x96>
    3620:	b3 cf       	rjmp	.-154    	; 0x3588 <__addsf3+0x1e>
    3622:	93 95       	inc	r25
    3624:	88 0f       	add	r24, r24
    3626:	08 f0       	brcs	.+2      	; 0x362a <__addsf3x+0x9e>
    3628:	99 27       	eor	r25, r25
    362a:	ee 0f       	add	r30, r30
    362c:	97 95       	ror	r25
    362e:	87 95       	ror	r24
    3630:	08 95       	ret
    3632:	8d d1       	rcall	.+794    	; 0x394e <__fp_pscA>
    3634:	58 f0       	brcs	.+22     	; 0x364c <__addsf3x+0xc0>
    3636:	80 e8       	ldi	r24, 0x80	; 128
    3638:	91 e0       	ldi	r25, 0x01	; 1
    363a:	09 f4       	brne	.+2      	; 0x363e <__addsf3x+0xb2>
    363c:	9e ef       	ldi	r25, 0xFE	; 254
    363e:	8e d1       	rcall	.+796    	; 0x395c <__fp_pscB>
    3640:	28 f0       	brcs	.+10     	; 0x364c <__addsf3x+0xc0>
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	51 e0       	ldi	r21, 0x01	; 1
    3646:	59 f4       	brne	.+22     	; 0x365e <atan2+0xe>
    3648:	5e ef       	ldi	r21, 0xFE	; 254
    364a:	09 c0       	rjmp	.+18     	; 0x365e <atan2+0xe>
    364c:	58 c1       	rjmp	.+688    	; 0x38fe <__fp_nan>
    364e:	c0 c1       	rjmp	.+896    	; 0x39d0 <__fp_zero>

00003650 <atan2>:
    3650:	e9 2f       	mov	r30, r25
    3652:	e0 78       	andi	r30, 0x80	; 128
    3654:	9b d1       	rcall	.+822    	; 0x398c <__fp_split3>
    3656:	68 f3       	brcs	.-38     	; 0x3632 <__addsf3x+0xa6>
    3658:	09 2e       	mov	r0, r25
    365a:	05 2a       	or	r0, r21
    365c:	c1 f3       	breq	.-16     	; 0x364e <__addsf3x+0xc2>
    365e:	26 17       	cp	r18, r22
    3660:	37 07       	cpc	r19, r23
    3662:	48 07       	cpc	r20, r24
    3664:	59 07       	cpc	r21, r25
    3666:	38 f0       	brcs	.+14     	; 0x3676 <atan2+0x26>
    3668:	0e 2e       	mov	r0, r30
    366a:	07 f8       	bld	r0, 7
    366c:	e0 25       	eor	r30, r0
    366e:	69 f0       	breq	.+26     	; 0x368a <atan2+0x3a>
    3670:	e0 25       	eor	r30, r0
    3672:	e0 64       	ori	r30, 0x40	; 64
    3674:	0a c0       	rjmp	.+20     	; 0x368a <atan2+0x3a>
    3676:	ef 63       	ori	r30, 0x3F	; 63
    3678:	07 f8       	bld	r0, 7
    367a:	00 94       	com	r0
    367c:	07 fa       	bst	r0, 7
    367e:	db 01       	movw	r26, r22
    3680:	b9 01       	movw	r22, r18
    3682:	9d 01       	movw	r18, r26
    3684:	dc 01       	movw	r26, r24
    3686:	ca 01       	movw	r24, r20
    3688:	ad 01       	movw	r20, r26
    368a:	ef 93       	push	r30
    368c:	47 d0       	rcall	.+142    	; 0x371c <__divsf3_pse>
    368e:	6d d1       	rcall	.+730    	; 0x396a <__fp_round>
    3690:	0a d0       	rcall	.+20     	; 0x36a6 <atan>
    3692:	5f 91       	pop	r21
    3694:	55 23       	and	r21, r21
    3696:	31 f0       	breq	.+12     	; 0x36a4 <atan2+0x54>
    3698:	2b ed       	ldi	r18, 0xDB	; 219
    369a:	3f e0       	ldi	r19, 0x0F	; 15
    369c:	49 e4       	ldi	r20, 0x49	; 73
    369e:	50 fd       	sbrc	r21, 0
    36a0:	49 ec       	ldi	r20, 0xC9	; 201
    36a2:	63 cf       	rjmp	.-314    	; 0x356a <__addsf3>
    36a4:	08 95       	ret

000036a6 <atan>:
    36a6:	df 93       	push	r29
    36a8:	dd 27       	eor	r29, r29
    36aa:	b9 2f       	mov	r27, r25
    36ac:	bf 77       	andi	r27, 0x7F	; 127
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	16 16       	cp	r1, r22
    36b4:	17 06       	cpc	r1, r23
    36b6:	48 07       	cpc	r20, r24
    36b8:	5b 07       	cpc	r21, r27
    36ba:	10 f4       	brcc	.+4      	; 0x36c0 <atan+0x1a>
    36bc:	d9 2f       	mov	r29, r25
    36be:	93 d1       	rcall	.+806    	; 0x39e6 <inverse>
    36c0:	9f 93       	push	r25
    36c2:	8f 93       	push	r24
    36c4:	7f 93       	push	r23
    36c6:	6f 93       	push	r22
    36c8:	3a d2       	rcall	.+1140   	; 0x3b3e <square>
    36ca:	ea e9       	ldi	r30, 0x9A	; 154
    36cc:	f2 e0       	ldi	r31, 0x02	; 2
    36ce:	1a d1       	rcall	.+564    	; 0x3904 <__fp_powser>
    36d0:	4c d1       	rcall	.+664    	; 0x396a <__fp_round>
    36d2:	2f 91       	pop	r18
    36d4:	3f 91       	pop	r19
    36d6:	4f 91       	pop	r20
    36d8:	5f 91       	pop	r21
    36da:	98 d1       	rcall	.+816    	; 0x3a0c <__mulsf3x>
    36dc:	dd 23       	and	r29, r29
    36de:	49 f0       	breq	.+18     	; 0x36f2 <atan+0x4c>
    36e0:	90 58       	subi	r25, 0x80	; 128
    36e2:	a2 ea       	ldi	r26, 0xA2	; 162
    36e4:	2a ed       	ldi	r18, 0xDA	; 218
    36e6:	3f e0       	ldi	r19, 0x0F	; 15
    36e8:	49 ec       	ldi	r20, 0xC9	; 201
    36ea:	5f e3       	ldi	r21, 0x3F	; 63
    36ec:	d0 78       	andi	r29, 0x80	; 128
    36ee:	5d 27       	eor	r21, r29
    36f0:	4d df       	rcall	.-358    	; 0x358c <__addsf3x>
    36f2:	df 91       	pop	r29
    36f4:	3a c1       	rjmp	.+628    	; 0x396a <__fp_round>

000036f6 <__cmpsf2>:
    36f6:	d9 d0       	rcall	.+434    	; 0x38aa <__fp_cmp>
    36f8:	08 f4       	brcc	.+2      	; 0x36fc <__cmpsf2+0x6>
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	08 95       	ret

000036fe <__divsf3>:
    36fe:	0c d0       	rcall	.+24     	; 0x3718 <__divsf3x>
    3700:	34 c1       	rjmp	.+616    	; 0x396a <__fp_round>
    3702:	2c d1       	rcall	.+600    	; 0x395c <__fp_pscB>
    3704:	40 f0       	brcs	.+16     	; 0x3716 <__divsf3+0x18>
    3706:	23 d1       	rcall	.+582    	; 0x394e <__fp_pscA>
    3708:	30 f0       	brcs	.+12     	; 0x3716 <__divsf3+0x18>
    370a:	21 f4       	brne	.+8      	; 0x3714 <__divsf3+0x16>
    370c:	5f 3f       	cpi	r21, 0xFF	; 255
    370e:	19 f0       	breq	.+6      	; 0x3716 <__divsf3+0x18>
    3710:	f0 c0       	rjmp	.+480    	; 0x38f2 <__fp_inf>
    3712:	51 11       	cpse	r21, r1
    3714:	5e c1       	rjmp	.+700    	; 0x39d2 <__fp_szero>
    3716:	f3 c0       	rjmp	.+486    	; 0x38fe <__fp_nan>

00003718 <__divsf3x>:
    3718:	39 d1       	rcall	.+626    	; 0x398c <__fp_split3>
    371a:	98 f3       	brcs	.-26     	; 0x3702 <__divsf3+0x4>

0000371c <__divsf3_pse>:
    371c:	99 23       	and	r25, r25
    371e:	c9 f3       	breq	.-14     	; 0x3712 <__divsf3+0x14>
    3720:	55 23       	and	r21, r21
    3722:	b1 f3       	breq	.-20     	; 0x3710 <__divsf3+0x12>
    3724:	95 1b       	sub	r25, r21
    3726:	55 0b       	sbc	r21, r21
    3728:	bb 27       	eor	r27, r27
    372a:	aa 27       	eor	r26, r26
    372c:	62 17       	cp	r22, r18
    372e:	73 07       	cpc	r23, r19
    3730:	84 07       	cpc	r24, r20
    3732:	38 f0       	brcs	.+14     	; 0x3742 <__divsf3_pse+0x26>
    3734:	9f 5f       	subi	r25, 0xFF	; 255
    3736:	5f 4f       	sbci	r21, 0xFF	; 255
    3738:	22 0f       	add	r18, r18
    373a:	33 1f       	adc	r19, r19
    373c:	44 1f       	adc	r20, r20
    373e:	aa 1f       	adc	r26, r26
    3740:	a9 f3       	breq	.-22     	; 0x372c <__divsf3_pse+0x10>
    3742:	33 d0       	rcall	.+102    	; 0x37aa <__divsf3_pse+0x8e>
    3744:	0e 2e       	mov	r0, r30
    3746:	3a f0       	brmi	.+14     	; 0x3756 <__divsf3_pse+0x3a>
    3748:	e0 e8       	ldi	r30, 0x80	; 128
    374a:	30 d0       	rcall	.+96     	; 0x37ac <__divsf3_pse+0x90>
    374c:	91 50       	subi	r25, 0x01	; 1
    374e:	50 40       	sbci	r21, 0x00	; 0
    3750:	e6 95       	lsr	r30
    3752:	00 1c       	adc	r0, r0
    3754:	ca f7       	brpl	.-14     	; 0x3748 <__divsf3_pse+0x2c>
    3756:	29 d0       	rcall	.+82     	; 0x37aa <__divsf3_pse+0x8e>
    3758:	fe 2f       	mov	r31, r30
    375a:	27 d0       	rcall	.+78     	; 0x37aa <__divsf3_pse+0x8e>
    375c:	66 0f       	add	r22, r22
    375e:	77 1f       	adc	r23, r23
    3760:	88 1f       	adc	r24, r24
    3762:	bb 1f       	adc	r27, r27
    3764:	26 17       	cp	r18, r22
    3766:	37 07       	cpc	r19, r23
    3768:	48 07       	cpc	r20, r24
    376a:	ab 07       	cpc	r26, r27
    376c:	b0 e8       	ldi	r27, 0x80	; 128
    376e:	09 f0       	breq	.+2      	; 0x3772 <__divsf3_pse+0x56>
    3770:	bb 0b       	sbc	r27, r27
    3772:	80 2d       	mov	r24, r0
    3774:	bf 01       	movw	r22, r30
    3776:	ff 27       	eor	r31, r31
    3778:	93 58       	subi	r25, 0x83	; 131
    377a:	5f 4f       	sbci	r21, 0xFF	; 255
    377c:	2a f0       	brmi	.+10     	; 0x3788 <__divsf3_pse+0x6c>
    377e:	9e 3f       	cpi	r25, 0xFE	; 254
    3780:	51 05       	cpc	r21, r1
    3782:	68 f0       	brcs	.+26     	; 0x379e <__divsf3_pse+0x82>
    3784:	b6 c0       	rjmp	.+364    	; 0x38f2 <__fp_inf>
    3786:	25 c1       	rjmp	.+586    	; 0x39d2 <__fp_szero>
    3788:	5f 3f       	cpi	r21, 0xFF	; 255
    378a:	ec f3       	brlt	.-6      	; 0x3786 <__divsf3_pse+0x6a>
    378c:	98 3e       	cpi	r25, 0xE8	; 232
    378e:	dc f3       	brlt	.-10     	; 0x3786 <__divsf3_pse+0x6a>
    3790:	86 95       	lsr	r24
    3792:	77 95       	ror	r23
    3794:	67 95       	ror	r22
    3796:	b7 95       	ror	r27
    3798:	f7 95       	ror	r31
    379a:	9f 5f       	subi	r25, 0xFF	; 255
    379c:	c9 f7       	brne	.-14     	; 0x3790 <__divsf3_pse+0x74>
    379e:	88 0f       	add	r24, r24
    37a0:	91 1d       	adc	r25, r1
    37a2:	96 95       	lsr	r25
    37a4:	87 95       	ror	r24
    37a6:	97 f9       	bld	r25, 7
    37a8:	08 95       	ret
    37aa:	e1 e0       	ldi	r30, 0x01	; 1
    37ac:	66 0f       	add	r22, r22
    37ae:	77 1f       	adc	r23, r23
    37b0:	88 1f       	adc	r24, r24
    37b2:	bb 1f       	adc	r27, r27
    37b4:	62 17       	cp	r22, r18
    37b6:	73 07       	cpc	r23, r19
    37b8:	84 07       	cpc	r24, r20
    37ba:	ba 07       	cpc	r27, r26
    37bc:	20 f0       	brcs	.+8      	; 0x37c6 <__divsf3_pse+0xaa>
    37be:	62 1b       	sub	r22, r18
    37c0:	73 0b       	sbc	r23, r19
    37c2:	84 0b       	sbc	r24, r20
    37c4:	ba 0b       	sbc	r27, r26
    37c6:	ee 1f       	adc	r30, r30
    37c8:	88 f7       	brcc	.-30     	; 0x37ac <__divsf3_pse+0x90>
    37ca:	e0 95       	com	r30
    37cc:	08 95       	ret

000037ce <__fixsfsi>:
    37ce:	04 d0       	rcall	.+8      	; 0x37d8 <__fixunssfsi>
    37d0:	68 94       	set
    37d2:	b1 11       	cpse	r27, r1
    37d4:	fe c0       	rjmp	.+508    	; 0x39d2 <__fp_szero>
    37d6:	08 95       	ret

000037d8 <__fixunssfsi>:
    37d8:	e1 d0       	rcall	.+450    	; 0x399c <__fp_splitA>
    37da:	88 f0       	brcs	.+34     	; 0x37fe <__fixunssfsi+0x26>
    37dc:	9f 57       	subi	r25, 0x7F	; 127
    37de:	90 f0       	brcs	.+36     	; 0x3804 <__fixunssfsi+0x2c>
    37e0:	b9 2f       	mov	r27, r25
    37e2:	99 27       	eor	r25, r25
    37e4:	b7 51       	subi	r27, 0x17	; 23
    37e6:	a0 f0       	brcs	.+40     	; 0x3810 <__fixunssfsi+0x38>
    37e8:	d1 f0       	breq	.+52     	; 0x381e <__fixunssfsi+0x46>
    37ea:	66 0f       	add	r22, r22
    37ec:	77 1f       	adc	r23, r23
    37ee:	88 1f       	adc	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	1a f0       	brmi	.+6      	; 0x37fa <__fixunssfsi+0x22>
    37f4:	ba 95       	dec	r27
    37f6:	c9 f7       	brne	.-14     	; 0x37ea <__fixunssfsi+0x12>
    37f8:	12 c0       	rjmp	.+36     	; 0x381e <__fixunssfsi+0x46>
    37fa:	b1 30       	cpi	r27, 0x01	; 1
    37fc:	81 f0       	breq	.+32     	; 0x381e <__fixunssfsi+0x46>
    37fe:	e8 d0       	rcall	.+464    	; 0x39d0 <__fp_zero>
    3800:	b1 e0       	ldi	r27, 0x01	; 1
    3802:	08 95       	ret
    3804:	e5 c0       	rjmp	.+458    	; 0x39d0 <__fp_zero>
    3806:	67 2f       	mov	r22, r23
    3808:	78 2f       	mov	r23, r24
    380a:	88 27       	eor	r24, r24
    380c:	b8 5f       	subi	r27, 0xF8	; 248
    380e:	39 f0       	breq	.+14     	; 0x381e <__fixunssfsi+0x46>
    3810:	b9 3f       	cpi	r27, 0xF9	; 249
    3812:	cc f3       	brlt	.-14     	; 0x3806 <__fixunssfsi+0x2e>
    3814:	86 95       	lsr	r24
    3816:	77 95       	ror	r23
    3818:	67 95       	ror	r22
    381a:	b3 95       	inc	r27
    381c:	d9 f7       	brne	.-10     	; 0x3814 <__fixunssfsi+0x3c>
    381e:	3e f4       	brtc	.+14     	; 0x382e <__fixunssfsi+0x56>
    3820:	90 95       	com	r25
    3822:	80 95       	com	r24
    3824:	70 95       	com	r23
    3826:	61 95       	neg	r22
    3828:	7f 4f       	sbci	r23, 0xFF	; 255
    382a:	8f 4f       	sbci	r24, 0xFF	; 255
    382c:	9f 4f       	sbci	r25, 0xFF	; 255
    382e:	08 95       	ret

00003830 <__floatunsisf>:
    3830:	e8 94       	clt
    3832:	09 c0       	rjmp	.+18     	; 0x3846 <__floatsisf+0x12>

00003834 <__floatsisf>:
    3834:	97 fb       	bst	r25, 7
    3836:	3e f4       	brtc	.+14     	; 0x3846 <__floatsisf+0x12>
    3838:	90 95       	com	r25
    383a:	80 95       	com	r24
    383c:	70 95       	com	r23
    383e:	61 95       	neg	r22
    3840:	7f 4f       	sbci	r23, 0xFF	; 255
    3842:	8f 4f       	sbci	r24, 0xFF	; 255
    3844:	9f 4f       	sbci	r25, 0xFF	; 255
    3846:	99 23       	and	r25, r25
    3848:	a9 f0       	breq	.+42     	; 0x3874 <__floatsisf+0x40>
    384a:	f9 2f       	mov	r31, r25
    384c:	96 e9       	ldi	r25, 0x96	; 150
    384e:	bb 27       	eor	r27, r27
    3850:	93 95       	inc	r25
    3852:	f6 95       	lsr	r31
    3854:	87 95       	ror	r24
    3856:	77 95       	ror	r23
    3858:	67 95       	ror	r22
    385a:	b7 95       	ror	r27
    385c:	f1 11       	cpse	r31, r1
    385e:	f8 cf       	rjmp	.-16     	; 0x3850 <__floatsisf+0x1c>
    3860:	fa f4       	brpl	.+62     	; 0x38a0 <__floatsisf+0x6c>
    3862:	bb 0f       	add	r27, r27
    3864:	11 f4       	brne	.+4      	; 0x386a <__floatsisf+0x36>
    3866:	60 ff       	sbrs	r22, 0
    3868:	1b c0       	rjmp	.+54     	; 0x38a0 <__floatsisf+0x6c>
    386a:	6f 5f       	subi	r22, 0xFF	; 255
    386c:	7f 4f       	sbci	r23, 0xFF	; 255
    386e:	8f 4f       	sbci	r24, 0xFF	; 255
    3870:	9f 4f       	sbci	r25, 0xFF	; 255
    3872:	16 c0       	rjmp	.+44     	; 0x38a0 <__floatsisf+0x6c>
    3874:	88 23       	and	r24, r24
    3876:	11 f0       	breq	.+4      	; 0x387c <__floatsisf+0x48>
    3878:	96 e9       	ldi	r25, 0x96	; 150
    387a:	11 c0       	rjmp	.+34     	; 0x389e <__floatsisf+0x6a>
    387c:	77 23       	and	r23, r23
    387e:	21 f0       	breq	.+8      	; 0x3888 <__floatsisf+0x54>
    3880:	9e e8       	ldi	r25, 0x8E	; 142
    3882:	87 2f       	mov	r24, r23
    3884:	76 2f       	mov	r23, r22
    3886:	05 c0       	rjmp	.+10     	; 0x3892 <__floatsisf+0x5e>
    3888:	66 23       	and	r22, r22
    388a:	71 f0       	breq	.+28     	; 0x38a8 <__floatsisf+0x74>
    388c:	96 e8       	ldi	r25, 0x86	; 134
    388e:	86 2f       	mov	r24, r22
    3890:	70 e0       	ldi	r23, 0x00	; 0
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	2a f0       	brmi	.+10     	; 0x38a0 <__floatsisf+0x6c>
    3896:	9a 95       	dec	r25
    3898:	66 0f       	add	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	88 1f       	adc	r24, r24
    389e:	da f7       	brpl	.-10     	; 0x3896 <__floatsisf+0x62>
    38a0:	88 0f       	add	r24, r24
    38a2:	96 95       	lsr	r25
    38a4:	87 95       	ror	r24
    38a6:	97 f9       	bld	r25, 7
    38a8:	08 95       	ret

000038aa <__fp_cmp>:
    38aa:	99 0f       	add	r25, r25
    38ac:	00 08       	sbc	r0, r0
    38ae:	55 0f       	add	r21, r21
    38b0:	aa 0b       	sbc	r26, r26
    38b2:	e0 e8       	ldi	r30, 0x80	; 128
    38b4:	fe ef       	ldi	r31, 0xFE	; 254
    38b6:	16 16       	cp	r1, r22
    38b8:	17 06       	cpc	r1, r23
    38ba:	e8 07       	cpc	r30, r24
    38bc:	f9 07       	cpc	r31, r25
    38be:	c0 f0       	brcs	.+48     	; 0x38f0 <__fp_cmp+0x46>
    38c0:	12 16       	cp	r1, r18
    38c2:	13 06       	cpc	r1, r19
    38c4:	e4 07       	cpc	r30, r20
    38c6:	f5 07       	cpc	r31, r21
    38c8:	98 f0       	brcs	.+38     	; 0x38f0 <__fp_cmp+0x46>
    38ca:	62 1b       	sub	r22, r18
    38cc:	73 0b       	sbc	r23, r19
    38ce:	84 0b       	sbc	r24, r20
    38d0:	95 0b       	sbc	r25, r21
    38d2:	39 f4       	brne	.+14     	; 0x38e2 <__fp_cmp+0x38>
    38d4:	0a 26       	eor	r0, r26
    38d6:	61 f0       	breq	.+24     	; 0x38f0 <__fp_cmp+0x46>
    38d8:	23 2b       	or	r18, r19
    38da:	24 2b       	or	r18, r20
    38dc:	25 2b       	or	r18, r21
    38de:	21 f4       	brne	.+8      	; 0x38e8 <__fp_cmp+0x3e>
    38e0:	08 95       	ret
    38e2:	0a 26       	eor	r0, r26
    38e4:	09 f4       	brne	.+2      	; 0x38e8 <__fp_cmp+0x3e>
    38e6:	a1 40       	sbci	r26, 0x01	; 1
    38e8:	a6 95       	lsr	r26
    38ea:	8f ef       	ldi	r24, 0xFF	; 255
    38ec:	81 1d       	adc	r24, r1
    38ee:	81 1d       	adc	r24, r1
    38f0:	08 95       	ret

000038f2 <__fp_inf>:
    38f2:	97 f9       	bld	r25, 7
    38f4:	9f 67       	ori	r25, 0x7F	; 127
    38f6:	80 e8       	ldi	r24, 0x80	; 128
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	60 e0       	ldi	r22, 0x00	; 0
    38fc:	08 95       	ret

000038fe <__fp_nan>:
    38fe:	9f ef       	ldi	r25, 0xFF	; 255
    3900:	80 ec       	ldi	r24, 0xC0	; 192
    3902:	08 95       	ret

00003904 <__fp_powser>:
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	1f 93       	push	r17
    390a:	0f 93       	push	r16
    390c:	ff 92       	push	r15
    390e:	ef 92       	push	r14
    3910:	df 92       	push	r13
    3912:	7b 01       	movw	r14, r22
    3914:	8c 01       	movw	r16, r24
    3916:	68 94       	set
    3918:	05 c0       	rjmp	.+10     	; 0x3924 <__fp_powser+0x20>
    391a:	da 2e       	mov	r13, r26
    391c:	ef 01       	movw	r28, r30
    391e:	76 d0       	rcall	.+236    	; 0x3a0c <__mulsf3x>
    3920:	fe 01       	movw	r30, r28
    3922:	e8 94       	clt
    3924:	a5 91       	lpm	r26, Z+
    3926:	25 91       	lpm	r18, Z+
    3928:	35 91       	lpm	r19, Z+
    392a:	45 91       	lpm	r20, Z+
    392c:	55 91       	lpm	r21, Z+
    392e:	ae f3       	brts	.-22     	; 0x391a <__fp_powser+0x16>
    3930:	ef 01       	movw	r28, r30
    3932:	2c de       	rcall	.-936    	; 0x358c <__addsf3x>
    3934:	fe 01       	movw	r30, r28
    3936:	97 01       	movw	r18, r14
    3938:	a8 01       	movw	r20, r16
    393a:	da 94       	dec	r13
    393c:	79 f7       	brne	.-34     	; 0x391c <__fp_powser+0x18>
    393e:	df 90       	pop	r13
    3940:	ef 90       	pop	r14
    3942:	ff 90       	pop	r15
    3944:	0f 91       	pop	r16
    3946:	1f 91       	pop	r17
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	08 95       	ret

0000394e <__fp_pscA>:
    394e:	00 24       	eor	r0, r0
    3950:	0a 94       	dec	r0
    3952:	16 16       	cp	r1, r22
    3954:	17 06       	cpc	r1, r23
    3956:	18 06       	cpc	r1, r24
    3958:	09 06       	cpc	r0, r25
    395a:	08 95       	ret

0000395c <__fp_pscB>:
    395c:	00 24       	eor	r0, r0
    395e:	0a 94       	dec	r0
    3960:	12 16       	cp	r1, r18
    3962:	13 06       	cpc	r1, r19
    3964:	14 06       	cpc	r1, r20
    3966:	05 06       	cpc	r0, r21
    3968:	08 95       	ret

0000396a <__fp_round>:
    396a:	09 2e       	mov	r0, r25
    396c:	03 94       	inc	r0
    396e:	00 0c       	add	r0, r0
    3970:	11 f4       	brne	.+4      	; 0x3976 <__fp_round+0xc>
    3972:	88 23       	and	r24, r24
    3974:	52 f0       	brmi	.+20     	; 0x398a <__fp_round+0x20>
    3976:	bb 0f       	add	r27, r27
    3978:	40 f4       	brcc	.+16     	; 0x398a <__fp_round+0x20>
    397a:	bf 2b       	or	r27, r31
    397c:	11 f4       	brne	.+4      	; 0x3982 <__fp_round+0x18>
    397e:	60 ff       	sbrs	r22, 0
    3980:	04 c0       	rjmp	.+8      	; 0x398a <__fp_round+0x20>
    3982:	6f 5f       	subi	r22, 0xFF	; 255
    3984:	7f 4f       	sbci	r23, 0xFF	; 255
    3986:	8f 4f       	sbci	r24, 0xFF	; 255
    3988:	9f 4f       	sbci	r25, 0xFF	; 255
    398a:	08 95       	ret

0000398c <__fp_split3>:
    398c:	57 fd       	sbrc	r21, 7
    398e:	90 58       	subi	r25, 0x80	; 128
    3990:	44 0f       	add	r20, r20
    3992:	55 1f       	adc	r21, r21
    3994:	59 f0       	breq	.+22     	; 0x39ac <__fp_splitA+0x10>
    3996:	5f 3f       	cpi	r21, 0xFF	; 255
    3998:	71 f0       	breq	.+28     	; 0x39b6 <__fp_splitA+0x1a>
    399a:	47 95       	ror	r20

0000399c <__fp_splitA>:
    399c:	88 0f       	add	r24, r24
    399e:	97 fb       	bst	r25, 7
    39a0:	99 1f       	adc	r25, r25
    39a2:	61 f0       	breq	.+24     	; 0x39bc <__fp_splitA+0x20>
    39a4:	9f 3f       	cpi	r25, 0xFF	; 255
    39a6:	79 f0       	breq	.+30     	; 0x39c6 <__fp_splitA+0x2a>
    39a8:	87 95       	ror	r24
    39aa:	08 95       	ret
    39ac:	12 16       	cp	r1, r18
    39ae:	13 06       	cpc	r1, r19
    39b0:	14 06       	cpc	r1, r20
    39b2:	55 1f       	adc	r21, r21
    39b4:	f2 cf       	rjmp	.-28     	; 0x399a <__fp_split3+0xe>
    39b6:	46 95       	lsr	r20
    39b8:	f1 df       	rcall	.-30     	; 0x399c <__fp_splitA>
    39ba:	08 c0       	rjmp	.+16     	; 0x39cc <__fp_splitA+0x30>
    39bc:	16 16       	cp	r1, r22
    39be:	17 06       	cpc	r1, r23
    39c0:	18 06       	cpc	r1, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	f1 cf       	rjmp	.-30     	; 0x39a8 <__fp_splitA+0xc>
    39c6:	86 95       	lsr	r24
    39c8:	71 05       	cpc	r23, r1
    39ca:	61 05       	cpc	r22, r1
    39cc:	08 94       	sec
    39ce:	08 95       	ret

000039d0 <__fp_zero>:
    39d0:	e8 94       	clt

000039d2 <__fp_szero>:
    39d2:	bb 27       	eor	r27, r27
    39d4:	66 27       	eor	r22, r22
    39d6:	77 27       	eor	r23, r23
    39d8:	cb 01       	movw	r24, r22
    39da:	97 f9       	bld	r25, 7
    39dc:	08 95       	ret

000039de <__gesf2>:
    39de:	65 df       	rcall	.-310    	; 0x38aa <__fp_cmp>
    39e0:	08 f4       	brcc	.+2      	; 0x39e4 <__gesf2+0x6>
    39e2:	8f ef       	ldi	r24, 0xFF	; 255
    39e4:	08 95       	ret

000039e6 <inverse>:
    39e6:	9b 01       	movw	r18, r22
    39e8:	ac 01       	movw	r20, r24
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	80 e8       	ldi	r24, 0x80	; 128
    39f0:	9f e3       	ldi	r25, 0x3F	; 63
    39f2:	85 ce       	rjmp	.-758    	; 0x36fe <__divsf3>

000039f4 <__mulsf3>:
    39f4:	0b d0       	rcall	.+22     	; 0x3a0c <__mulsf3x>
    39f6:	b9 cf       	rjmp	.-142    	; 0x396a <__fp_round>
    39f8:	aa df       	rcall	.-172    	; 0x394e <__fp_pscA>
    39fa:	28 f0       	brcs	.+10     	; 0x3a06 <__mulsf3+0x12>
    39fc:	af df       	rcall	.-162    	; 0x395c <__fp_pscB>
    39fe:	18 f0       	brcs	.+6      	; 0x3a06 <__mulsf3+0x12>
    3a00:	95 23       	and	r25, r21
    3a02:	09 f0       	breq	.+2      	; 0x3a06 <__mulsf3+0x12>
    3a04:	76 cf       	rjmp	.-276    	; 0x38f2 <__fp_inf>
    3a06:	7b cf       	rjmp	.-266    	; 0x38fe <__fp_nan>
    3a08:	11 24       	eor	r1, r1
    3a0a:	e3 cf       	rjmp	.-58     	; 0x39d2 <__fp_szero>

00003a0c <__mulsf3x>:
    3a0c:	bf df       	rcall	.-130    	; 0x398c <__fp_split3>
    3a0e:	a0 f3       	brcs	.-24     	; 0x39f8 <__mulsf3+0x4>

00003a10 <__mulsf3_pse>:
    3a10:	95 9f       	mul	r25, r21
    3a12:	d1 f3       	breq	.-12     	; 0x3a08 <__mulsf3+0x14>
    3a14:	95 0f       	add	r25, r21
    3a16:	50 e0       	ldi	r21, 0x00	; 0
    3a18:	55 1f       	adc	r21, r21
    3a1a:	62 9f       	mul	r22, r18
    3a1c:	f0 01       	movw	r30, r0
    3a1e:	72 9f       	mul	r23, r18
    3a20:	bb 27       	eor	r27, r27
    3a22:	f0 0d       	add	r31, r0
    3a24:	b1 1d       	adc	r27, r1
    3a26:	63 9f       	mul	r22, r19
    3a28:	aa 27       	eor	r26, r26
    3a2a:	f0 0d       	add	r31, r0
    3a2c:	b1 1d       	adc	r27, r1
    3a2e:	aa 1f       	adc	r26, r26
    3a30:	64 9f       	mul	r22, r20
    3a32:	66 27       	eor	r22, r22
    3a34:	b0 0d       	add	r27, r0
    3a36:	a1 1d       	adc	r26, r1
    3a38:	66 1f       	adc	r22, r22
    3a3a:	82 9f       	mul	r24, r18
    3a3c:	22 27       	eor	r18, r18
    3a3e:	b0 0d       	add	r27, r0
    3a40:	a1 1d       	adc	r26, r1
    3a42:	62 1f       	adc	r22, r18
    3a44:	73 9f       	mul	r23, r19
    3a46:	b0 0d       	add	r27, r0
    3a48:	a1 1d       	adc	r26, r1
    3a4a:	62 1f       	adc	r22, r18
    3a4c:	83 9f       	mul	r24, r19
    3a4e:	a0 0d       	add	r26, r0
    3a50:	61 1d       	adc	r22, r1
    3a52:	22 1f       	adc	r18, r18
    3a54:	74 9f       	mul	r23, r20
    3a56:	33 27       	eor	r19, r19
    3a58:	a0 0d       	add	r26, r0
    3a5a:	61 1d       	adc	r22, r1
    3a5c:	23 1f       	adc	r18, r19
    3a5e:	84 9f       	mul	r24, r20
    3a60:	60 0d       	add	r22, r0
    3a62:	21 1d       	adc	r18, r1
    3a64:	82 2f       	mov	r24, r18
    3a66:	76 2f       	mov	r23, r22
    3a68:	6a 2f       	mov	r22, r26
    3a6a:	11 24       	eor	r1, r1
    3a6c:	9f 57       	subi	r25, 0x7F	; 127
    3a6e:	50 40       	sbci	r21, 0x00	; 0
    3a70:	8a f0       	brmi	.+34     	; 0x3a94 <__mulsf3_pse+0x84>
    3a72:	e1 f0       	breq	.+56     	; 0x3aac <__mulsf3_pse+0x9c>
    3a74:	88 23       	and	r24, r24
    3a76:	4a f0       	brmi	.+18     	; 0x3a8a <__mulsf3_pse+0x7a>
    3a78:	ee 0f       	add	r30, r30
    3a7a:	ff 1f       	adc	r31, r31
    3a7c:	bb 1f       	adc	r27, r27
    3a7e:	66 1f       	adc	r22, r22
    3a80:	77 1f       	adc	r23, r23
    3a82:	88 1f       	adc	r24, r24
    3a84:	91 50       	subi	r25, 0x01	; 1
    3a86:	50 40       	sbci	r21, 0x00	; 0
    3a88:	a9 f7       	brne	.-22     	; 0x3a74 <__mulsf3_pse+0x64>
    3a8a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a8c:	51 05       	cpc	r21, r1
    3a8e:	70 f0       	brcs	.+28     	; 0x3aac <__mulsf3_pse+0x9c>
    3a90:	30 cf       	rjmp	.-416    	; 0x38f2 <__fp_inf>
    3a92:	9f cf       	rjmp	.-194    	; 0x39d2 <__fp_szero>
    3a94:	5f 3f       	cpi	r21, 0xFF	; 255
    3a96:	ec f3       	brlt	.-6      	; 0x3a92 <__mulsf3_pse+0x82>
    3a98:	98 3e       	cpi	r25, 0xE8	; 232
    3a9a:	dc f3       	brlt	.-10     	; 0x3a92 <__mulsf3_pse+0x82>
    3a9c:	86 95       	lsr	r24
    3a9e:	77 95       	ror	r23
    3aa0:	67 95       	ror	r22
    3aa2:	b7 95       	ror	r27
    3aa4:	f7 95       	ror	r31
    3aa6:	e7 95       	ror	r30
    3aa8:	9f 5f       	subi	r25, 0xFF	; 255
    3aaa:	c1 f7       	brne	.-16     	; 0x3a9c <__mulsf3_pse+0x8c>
    3aac:	fe 2b       	or	r31, r30
    3aae:	88 0f       	add	r24, r24
    3ab0:	91 1d       	adc	r25, r1
    3ab2:	96 95       	lsr	r25
    3ab4:	87 95       	ror	r24
    3ab6:	97 f9       	bld	r25, 7
    3ab8:	08 95       	ret
    3aba:	11 f4       	brne	.+4      	; 0x3ac0 <__mulsf3_pse+0xb0>
    3abc:	0e f4       	brtc	.+2      	; 0x3ac0 <__mulsf3_pse+0xb0>
    3abe:	1f cf       	rjmp	.-450    	; 0x38fe <__fp_nan>
    3ac0:	45 c0       	rjmp	.+138    	; 0x3b4c <__fp_mpack>

00003ac2 <sqrt>:
    3ac2:	6c df       	rcall	.-296    	; 0x399c <__fp_splitA>
    3ac4:	d0 f3       	brcs	.-12     	; 0x3aba <__mulsf3_pse+0xaa>
    3ac6:	99 23       	and	r25, r25
    3ac8:	d9 f3       	breq	.-10     	; 0x3ac0 <__mulsf3_pse+0xb0>
    3aca:	ce f3       	brts	.-14     	; 0x3abe <__mulsf3_pse+0xae>
    3acc:	9f 57       	subi	r25, 0x7F	; 127
    3ace:	55 0b       	sbc	r21, r21
    3ad0:	87 ff       	sbrs	r24, 7
    3ad2:	4a d0       	rcall	.+148    	; 0x3b68 <__fp_norm2>
    3ad4:	00 24       	eor	r0, r0
    3ad6:	a0 e6       	ldi	r26, 0x60	; 96
    3ad8:	40 ea       	ldi	r20, 0xA0	; 160
    3ada:	90 01       	movw	r18, r0
    3adc:	80 58       	subi	r24, 0x80	; 128
    3ade:	56 95       	lsr	r21
    3ae0:	97 95       	ror	r25
    3ae2:	28 f4       	brcc	.+10     	; 0x3aee <sqrt+0x2c>
    3ae4:	80 5c       	subi	r24, 0xC0	; 192
    3ae6:	66 0f       	add	r22, r22
    3ae8:	77 1f       	adc	r23, r23
    3aea:	88 1f       	adc	r24, r24
    3aec:	20 f0       	brcs	.+8      	; 0x3af6 <sqrt+0x34>
    3aee:	26 17       	cp	r18, r22
    3af0:	37 07       	cpc	r19, r23
    3af2:	48 07       	cpc	r20, r24
    3af4:	30 f4       	brcc	.+12     	; 0x3b02 <sqrt+0x40>
    3af6:	62 1b       	sub	r22, r18
    3af8:	73 0b       	sbc	r23, r19
    3afa:	84 0b       	sbc	r24, r20
    3afc:	20 29       	or	r18, r0
    3afe:	31 29       	or	r19, r1
    3b00:	4a 2b       	or	r20, r26
    3b02:	a6 95       	lsr	r26
    3b04:	17 94       	ror	r1
    3b06:	07 94       	ror	r0
    3b08:	20 25       	eor	r18, r0
    3b0a:	31 25       	eor	r19, r1
    3b0c:	4a 27       	eor	r20, r26
    3b0e:	58 f7       	brcc	.-42     	; 0x3ae6 <sqrt+0x24>
    3b10:	66 0f       	add	r22, r22
    3b12:	77 1f       	adc	r23, r23
    3b14:	88 1f       	adc	r24, r24
    3b16:	20 f0       	brcs	.+8      	; 0x3b20 <sqrt+0x5e>
    3b18:	26 17       	cp	r18, r22
    3b1a:	37 07       	cpc	r19, r23
    3b1c:	48 07       	cpc	r20, r24
    3b1e:	30 f4       	brcc	.+12     	; 0x3b2c <sqrt+0x6a>
    3b20:	62 0b       	sbc	r22, r18
    3b22:	73 0b       	sbc	r23, r19
    3b24:	84 0b       	sbc	r24, r20
    3b26:	20 0d       	add	r18, r0
    3b28:	31 1d       	adc	r19, r1
    3b2a:	41 1d       	adc	r20, r1
    3b2c:	a0 95       	com	r26
    3b2e:	81 f7       	brne	.-32     	; 0x3b10 <sqrt+0x4e>
    3b30:	b9 01       	movw	r22, r18
    3b32:	84 2f       	mov	r24, r20
    3b34:	91 58       	subi	r25, 0x81	; 129
    3b36:	88 0f       	add	r24, r24
    3b38:	96 95       	lsr	r25
    3b3a:	87 95       	ror	r24
    3b3c:	08 95       	ret

00003b3e <square>:
    3b3e:	9b 01       	movw	r18, r22
    3b40:	ac 01       	movw	r20, r24
    3b42:	58 cf       	rjmp	.-336    	; 0x39f4 <__mulsf3>

00003b44 <__unordsf2>:
    3b44:	b2 de       	rcall	.-668    	; 0x38aa <__fp_cmp>
    3b46:	88 0b       	sbc	r24, r24
    3b48:	99 0b       	sbc	r25, r25
    3b4a:	08 95       	ret

00003b4c <__fp_mpack>:
    3b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3b4e:	31 f0       	breq	.+12     	; 0x3b5c <__fp_mpack_finite+0xc>

00003b50 <__fp_mpack_finite>:
    3b50:	91 50       	subi	r25, 0x01	; 1
    3b52:	20 f4       	brcc	.+8      	; 0x3b5c <__fp_mpack_finite+0xc>
    3b54:	87 95       	ror	r24
    3b56:	77 95       	ror	r23
    3b58:	67 95       	ror	r22
    3b5a:	b7 95       	ror	r27
    3b5c:	88 0f       	add	r24, r24
    3b5e:	91 1d       	adc	r25, r1
    3b60:	96 95       	lsr	r25
    3b62:	87 95       	ror	r24
    3b64:	97 f9       	bld	r25, 7
    3b66:	08 95       	ret

00003b68 <__fp_norm2>:
    3b68:	91 50       	subi	r25, 0x01	; 1
    3b6a:	50 40       	sbci	r21, 0x00	; 0
    3b6c:	66 0f       	add	r22, r22
    3b6e:	77 1f       	adc	r23, r23
    3b70:	88 1f       	adc	r24, r24
    3b72:	d2 f7       	brpl	.-12     	; 0x3b68 <__fp_norm2>
    3b74:	08 95       	ret

00003b76 <__mulsi3>:
    3b76:	db 01       	movw	r26, r22
    3b78:	8f 93       	push	r24
    3b7a:	9f 93       	push	r25
    3b7c:	51 d0       	rcall	.+162    	; 0x3c20 <__muluhisi3>
    3b7e:	bf 91       	pop	r27
    3b80:	af 91       	pop	r26
    3b82:	a2 9f       	mul	r26, r18
    3b84:	80 0d       	add	r24, r0
    3b86:	91 1d       	adc	r25, r1
    3b88:	a3 9f       	mul	r26, r19
    3b8a:	90 0d       	add	r25, r0
    3b8c:	b2 9f       	mul	r27, r18
    3b8e:	90 0d       	add	r25, r0
    3b90:	11 24       	eor	r1, r1
    3b92:	08 95       	ret

00003b94 <__udivmodsi4>:
    3b94:	a1 e2       	ldi	r26, 0x21	; 33
    3b96:	1a 2e       	mov	r1, r26
    3b98:	aa 1b       	sub	r26, r26
    3b9a:	bb 1b       	sub	r27, r27
    3b9c:	fd 01       	movw	r30, r26
    3b9e:	0d c0       	rjmp	.+26     	; 0x3bba <__udivmodsi4_ep>

00003ba0 <__udivmodsi4_loop>:
    3ba0:	aa 1f       	adc	r26, r26
    3ba2:	bb 1f       	adc	r27, r27
    3ba4:	ee 1f       	adc	r30, r30
    3ba6:	ff 1f       	adc	r31, r31
    3ba8:	a2 17       	cp	r26, r18
    3baa:	b3 07       	cpc	r27, r19
    3bac:	e4 07       	cpc	r30, r20
    3bae:	f5 07       	cpc	r31, r21
    3bb0:	20 f0       	brcs	.+8      	; 0x3bba <__udivmodsi4_ep>
    3bb2:	a2 1b       	sub	r26, r18
    3bb4:	b3 0b       	sbc	r27, r19
    3bb6:	e4 0b       	sbc	r30, r20
    3bb8:	f5 0b       	sbc	r31, r21

00003bba <__udivmodsi4_ep>:
    3bba:	66 1f       	adc	r22, r22
    3bbc:	77 1f       	adc	r23, r23
    3bbe:	88 1f       	adc	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	1a 94       	dec	r1
    3bc4:	69 f7       	brne	.-38     	; 0x3ba0 <__udivmodsi4_loop>
    3bc6:	60 95       	com	r22
    3bc8:	70 95       	com	r23
    3bca:	80 95       	com	r24
    3bcc:	90 95       	com	r25
    3bce:	9b 01       	movw	r18, r22
    3bd0:	ac 01       	movw	r20, r24
    3bd2:	bd 01       	movw	r22, r26
    3bd4:	cf 01       	movw	r24, r30
    3bd6:	08 95       	ret

00003bd8 <__divmodsi4>:
    3bd8:	05 2e       	mov	r0, r21
    3bda:	97 fb       	bst	r25, 7
    3bdc:	16 f4       	brtc	.+4      	; 0x3be2 <__divmodsi4+0xa>
    3bde:	00 94       	com	r0
    3be0:	0f d0       	rcall	.+30     	; 0x3c00 <__negsi2>
    3be2:	57 fd       	sbrc	r21, 7
    3be4:	05 d0       	rcall	.+10     	; 0x3bf0 <__divmodsi4_neg2>
    3be6:	d6 df       	rcall	.-84     	; 0x3b94 <__udivmodsi4>
    3be8:	07 fc       	sbrc	r0, 7
    3bea:	02 d0       	rcall	.+4      	; 0x3bf0 <__divmodsi4_neg2>
    3bec:	46 f4       	brtc	.+16     	; 0x3bfe <__divmodsi4_exit>
    3bee:	08 c0       	rjmp	.+16     	; 0x3c00 <__negsi2>

00003bf0 <__divmodsi4_neg2>:
    3bf0:	50 95       	com	r21
    3bf2:	40 95       	com	r20
    3bf4:	30 95       	com	r19
    3bf6:	21 95       	neg	r18
    3bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfa:	4f 4f       	sbci	r20, 0xFF	; 255
    3bfc:	5f 4f       	sbci	r21, 0xFF	; 255

00003bfe <__divmodsi4_exit>:
    3bfe:	08 95       	ret

00003c00 <__negsi2>:
    3c00:	90 95       	com	r25
    3c02:	80 95       	com	r24
    3c04:	70 95       	com	r23
    3c06:	61 95       	neg	r22
    3c08:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0e:	08 95       	ret

00003c10 <__tablejump2__>:
    3c10:	ee 0f       	add	r30, r30
    3c12:	ff 1f       	adc	r31, r31
    3c14:	88 1f       	adc	r24, r24
    3c16:	8b bf       	out	0x3b, r24	; 59
    3c18:	07 90       	elpm	r0, Z+
    3c1a:	f6 91       	elpm	r31, Z
    3c1c:	e0 2d       	mov	r30, r0
    3c1e:	19 94       	eijmp

00003c20 <__muluhisi3>:
    3c20:	09 d0       	rcall	.+18     	; 0x3c34 <__umulhisi3>
    3c22:	a5 9f       	mul	r26, r21
    3c24:	90 0d       	add	r25, r0
    3c26:	b4 9f       	mul	r27, r20
    3c28:	90 0d       	add	r25, r0
    3c2a:	a4 9f       	mul	r26, r20
    3c2c:	80 0d       	add	r24, r0
    3c2e:	91 1d       	adc	r25, r1
    3c30:	11 24       	eor	r1, r1
    3c32:	08 95       	ret

00003c34 <__umulhisi3>:
    3c34:	a2 9f       	mul	r26, r18
    3c36:	b0 01       	movw	r22, r0
    3c38:	b3 9f       	mul	r27, r19
    3c3a:	c0 01       	movw	r24, r0
    3c3c:	a3 9f       	mul	r26, r19
    3c3e:	70 0d       	add	r23, r0
    3c40:	81 1d       	adc	r24, r1
    3c42:	11 24       	eor	r1, r1
    3c44:	91 1d       	adc	r25, r1
    3c46:	b2 9f       	mul	r27, r18
    3c48:	70 0d       	add	r23, r0
    3c4a:	81 1d       	adc	r24, r1
    3c4c:	11 24       	eor	r1, r1
    3c4e:	91 1d       	adc	r25, r1
    3c50:	08 95       	ret

00003c52 <_exit>:
    3c52:	f8 94       	cli

00003c54 <__stop_program>:
    3c54:	ff cf       	rjmp	.-2      	; 0x3c54 <__stop_program>
